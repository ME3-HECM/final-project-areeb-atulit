

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sun Dec 11 17:28:13 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    55                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    56                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    57                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    58                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    59   000000                     
    60                           ; Generated 06/04/2022 GMT
    61                           ; 
    62                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution. Publication is not required when
    76                           ;        this file is used in an embedded application.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC18F67K40 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94   000000                     _TRISBbits	set	3970
    95   000000                     _TX4REG	set	3812
    96   000000                     _RC4STAbits	set	3815
    97   000000                     _SP4BRGH	set	3814
    98   000000                     _LATHbits	set	3968
    99   000000                     _TRISCbits	set	3971
   100   000000                     _TRISDbits	set	3972
   101   000000                     _TRISEbits	set	3973
   102   000000                     _TRISFbits	set	3974
   103   000000                     _TRISAbits	set	3969
   104   000000                     _SSP2CON2bits	set	3802
   105   000000                     _RX4PPS	set	3605
   106   000000                     _SSP2CLKPPS	set	3612
   107   000000                     _SSP2DATPPS	set	3613
   108   000000                     _ANSELDbits	set	3751
   109   000000                     _SSP2ADD	set	3798
   110   000000                     _SSP2CON1bits	set	3801
   111   000000                     _LATAbits	set	3961
   112   000000                     _LATGbits	set	3967
   113   000000                     _TRISGbits	set	3975
   114   000000                     _T2PR	set	4028
   115   000000                     _T2CONbits	set	4029
   116   000000                     _TMR0L	set	4051
   117   000000                     _TMR0H	set	4052
   118   000000                     _T0CON0bits	set	4053
   119   000000                     _T0CON1bits	set	4054
   120   000000                     _INTCONbits	set	4082
   121   000000                     _TRISHbits	set	3976
   122   000000                     _CCPR2H	set	4006
   123   000000                     _CCPR1H	set	4010
   124   000000                     _LATDbits	set	3964
   125   000000                     _LATEbits	set	3965
   126   000000                     _LATFbits	set	3966
   127   000000                     _RC4REG	set	3811
   128   000000                     _SP4BRGL	set	3813
   129   000000                     _TX4STAbits	set	3816
   130   000000                     _BAUD4CONbits	set	3817
   131   000000                     _SSP2CON2	set	3802
   132   000000                     _SSP2STAT	set	3800
   133   000000                     _SSP2BUF	set	3797
   134   000000                     _IPR0bits	set	3615
   135   000000                     _PIE0bits	set	3625
   136   000000                     _PIE4bits	set	3629
   137   000000                     _RC0PPS	set	3682
   138   000000                     _RD5PPS	set	3695
   139   000000                     _RE2PPS	set	3700
   140   000000                     _ANSELBbits	set	3738
   141   000000                     _RD6PPS	set	3696
   142   000000                     _RC7PPS	set	3689
   143   000000                     _CCPR4H	set	3873
   144   000000                     _CCPR3H	set	3877
   145   000000                     _PIR0bits	set	3635
   146   000000                     _PIR4bits	set	3639
   147   000000                     _RE4PPS	set	3702
   148   000000                     _RG6PPS	set	3720
   149   000000                     _T2CLKCONbits	set	4031
   150   000000                     _T2HLTbits	set	4030
   151   000000                     _CCP1CONbits	set	4011
   152   000000                     _CCPTMRS0bits	set	4013
   153   000000                     _CCP2CONbits	set	4007
   154   000000                     _CCP3CONbits	set	3878
   155   000000                     _CCP4CONbits	set	3874
   156                           
   157                           	psect	smallconst
   158   000E00                     __psmallconst:
   159                           	callstack 0
   160   000E00  00                 	db	0
   161   000E01                     
   162                           ; BSR set to: 14
   163   000E01  52                 	db	82	;'R'
   164   000E02  47                 	db	71	;'G'
   165   000E03  42                 	db	66	;'B'
   166   000E04  43                 	db	67	;'C'
   167   000E05  3A                 	db	58	;':'
   168   000E06  25                 	db	37
   169   000E07  69                 	db	105	;'i'
   170   000E08  20                 	db	32
   171   000E09  25                 	db	37
   172   000E0A  69                 	db	105	;'i'
   173   000E0B  20                 	db	32
   174   000E0C  25                 	db	37
   175   000E0D  69                 	db	105	;'i'
   176   000E0E  20                 	db	32
   177   000E0F  25                 	db	37
   178   000E10  69                 	db	105	;'i'
   179   000E11  0A                 	db	10
   180   000E12  00                 	db	0
   181   000E13  00                 	db	0	; dummy byte at the end
   182   000000                     
   183                           ; #config settings
   184                           
   185                           	psect	cinit
   186   0023CA                     __pcinit:
   187                           	callstack 0
   188   0023CA                     start_initialization:
   189                           	callstack 0
   190   0023CA                     __initialization:
   191                           	callstack 0
   192                           
   193                           ; Clear objects allocated to BANK0 (77 bytes)
   194   0023CA  EE00  F060         	lfsr	0,__pbssBANK0
   195   0023CE  0E4D               	movlw	77
   196   0023D0                     clear_0:
   197   0023D0  6AEE               	clrf	postinc0,c
   198   0023D2  06E8               	decf	wreg,f,c
   199   0023D4  E1FD               	bnz	clear_0
   200                           
   201                           ; Clear objects allocated to COMRAM (29 bytes)
   202   0023D6  EE00  F039         	lfsr	0,__pbssCOMRAM
   203   0023DA  0E1D               	movlw	29
   204   0023DC                     clear_1:
   205   0023DC  6AEE               	clrf	postinc0,c
   206   0023DE  06E8               	decf	wreg,f,c
   207   0023E0  E1FD               	bnz	clear_1
   208   0023E2                     end_of_initialization:
   209                           	callstack 0
   210   0023E2                     __end_of__initialization:
   211                           	callstack 0
   212   0023E2  9056               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   213   0023E4  9256               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   214   0023E6  0E00               	movlw	low (__Lsmallconst shr (0+16))
   215   0023E8  6EF8               	movwf	tblptru,c
   216   0023EA  0E0E               	movlw	high __Lsmallconst
   217   0023EC  6EF7               	movwf	tblptrh,c
   218   0023EE  0100               	movlb	0
   219   0023F0  EF64  F00E         	goto	_main	;jump to C main() function
   220                           
   221                           	psect	bssCOMRAM
   222   000039                     __pbssCOMRAM:
   223                           	callstack 0
   224   000039                     _EUSART4RXbuf:
   225                           	callstack 0
   226   000039                     	ds	20
   227   00004D                     _ctr:
   228                           	callstack 0
   229   00004D                     	ds	2
   230   00004F                     _interrupt_ctr:
   231                           	callstack 0
   232   00004F                     	ds	2
   233   000051                     _motor_return:
   234                           	callstack 0
   235   000051                     	ds	1
   236   000052                     _TxBufReadCnt:
   237                           	callstack 0
   238   000052                     	ds	1
   239   000053                     _TxBufWriteCnt:
   240                           	callstack 0
   241   000053                     	ds	1
   242   000054                     _RxBufReadCnt:
   243                           	callstack 0
   244   000054                     	ds	1
   245   000055                     _RxBufWriteCnt:
   246                           	callstack 0
   247   000055                     	ds	1
   248                           
   249                           	psect	bssBANK0
   250   000060                     __pbssBANK0:
   251                           	callstack 0
   252   000060                     _EUSART4TXbuf:
   253                           	callstack 0
   254   000060                     	ds	60
   255   00009C                     _interrupt_flag:
   256                           	callstack 0
   257   00009C                     	ds	2
   258   00009E                     _buggy_path:
   259                           	callstack 0
   260   00009E                     	ds	15
   261                           
   262                           	psect	cstackBANK0
   263   0000AD                     __pcstackBANK0:
   264                           	callstack 0
   265   0000AD                     main@RGBC:
   266                           	callstack 0
   267                           
   268                           ; 14 bytes @ 0x0
   269   0000AD                     	ds	14
   270   0000BB                     main@mL:
   271                           	callstack 0
   272                           
   273                           ; 9 bytes @ 0xE
   274   0000BB                     	ds	9
   275   0000C4                     main@mR:
   276                           	callstack 0
   277                           
   278                           ; 9 bytes @ 0x17
   279   0000C4                     	ds	9
   280                           
   281                           	psect	cstackCOMRAM
   282   000001                     __pcstackCOMRAM:
   283                           	callstack 0
   284   000001                     ??i2_I2C_2_Master_Idle:
   285   000001                     
   286                           ; 1 bytes @ 0x0
   287   000001                     	ds	1
   288   000002                     i2I2C_2_Master_Write@data_byte:
   289                           	callstack 0
   290                           
   291                           ; 1 bytes @ 0x1
   292   000002                     	ds	1
   293   000003                     i2color_writetoaddr@value:
   294                           	callstack 0
   295                           
   296                           ; 1 bytes @ 0x2
   297   000003                     	ds	1
   298   000004                     i2color_writetoaddr@address:
   299                           	callstack 0
   300                           
   301                           ; 1 bytes @ 0x3
   302   000004                     	ds	1
   303   000005                     ??i2_Color_Interrupts_init:
   304   000005                     i2Color_Interrupts_threshold@upperThreshold:
   305                           	callstack 0
   306                           
   307                           ; 2 bytes @ 0x4
   308   000005                     	ds	2
   309   000007                     i2Color_Interrupts_threshold@lowerThreshold:
   310                           	callstack 0
   311                           
   312                           ; 2 bytes @ 0x6
   313   000007                     	ds	2
   314   000009                     ??_I2C_2_Master_Idle:
   315   000009                     ?___wmul:
   316                           	callstack 0
   317   000009                     initDCmotorsPWM@PWMperiod:
   318                           	callstack 0
   319   000009                     motorLinit@mL:
   320                           	callstack 0
   321   000009                     motorRinit@mR:
   322                           	callstack 0
   323   000009                     ___wmul@multiplier:
   324                           	callstack 0
   325                           
   326                           ; 2 bytes @ 0x8
   327   000009                     	ds	1
   328   00000A                     ??_I2C_2_Master_Read:
   329   00000A                     I2C_2_Master_Write@data_byte:
   330                           	callstack 0
   331                           
   332                           ; 1 bytes @ 0x9
   333   00000A                     	ds	1
   334   00000B                     color_writetoaddr@value:
   335                           	callstack 0
   336   00000B                     I2C_2_Master_Read@ack:
   337                           	callstack 0
   338   00000B                     ___wmul@multiplicand:
   339                           	callstack 0
   340                           
   341                           ; 2 bytes @ 0xA
   342   00000B                     	ds	1
   343   00000C                     color_writetoaddr@address:
   344                           	callstack 0
   345   00000C                     I2C_2_Master_Read@tmp:
   346                           	callstack 0
   347                           
   348                           ; 1 bytes @ 0xB
   349   00000C                     	ds	1
   350   00000D                     ??_Color_Interrupts_init:
   351   00000D                     ??_color_click_init:
   352   00000D                     ?_color_read_Red:
   353                           	callstack 0
   354   00000D                     ?_color_read_Green:
   355                           	callstack 0
   356   00000D                     ?_color_read_Blue:
   357                           	callstack 0
   358   00000D                     ?_color_read_Clear:
   359                           	callstack 0
   360   00000D                     Color_Interrupts_threshold@upperThreshold:
   361                           	callstack 0
   362   00000D                     ___wmul@product:
   363                           	callstack 0
   364                           
   365                           ; 2 bytes @ 0xC
   366   00000D                     	ds	2
   367   00000F                     ??_color_read_Red:
   368   00000F                     ??_color_read_Green:
   369   00000F                     ??_color_read_Blue:
   370   00000F                     ??_color_read_Clear:
   371   00000F                     ?___lwdiv:
   372                           	callstack 0
   373   00000F                     Color_Interrupts_threshold@lowerThreshold:
   374                           	callstack 0
   375   00000F                     ___lwdiv@dividend:
   376                           	callstack 0
   377                           
   378                           ; 2 bytes @ 0xE
   379   00000F                     	ds	2
   380   000011                     ___lwdiv@divisor:
   381                           	callstack 0
   382                           
   383                           ; 2 bytes @ 0x10
   384   000011                     	ds	1
   385   000012                     color_read_Red@tmp:
   386                           	callstack 0
   387   000012                     color_read_Green@tmp:
   388                           	callstack 0
   389   000012                     color_read_Blue@tmp:
   390                           	callstack 0
   391   000012                     color_read_Clear@tmp:
   392                           	callstack 0
   393                           
   394                           ; 2 bytes @ 0x11
   395   000012                     	ds	1
   396   000013                     ___lwdiv@quotient:
   397                           	callstack 0
   398                           
   399                           ; 2 bytes @ 0x12
   400   000013                     	ds	1
   401   000014                     color_read_RGBC@temp:
   402                           	callstack 0
   403                           
   404                           ; 2 bytes @ 0x13
   405   000014                     	ds	1
   406   000015                     ___lwdiv@counter:
   407                           	callstack 0
   408                           
   409                           ; 1 bytes @ 0x14
   410   000015                     	ds	1
   411   000016                     setMotorPWM@m:
   412                           	callstack 0
   413                           
   414                           ; 2 bytes @ 0x15
   415   000016                     	ds	2
   416   000018                     ??_setMotorPWM:
   417                           
   418                           ; 1 bytes @ 0x17
   419   000018                     	ds	2
   420   00001A                     setMotorPWM@posDuty:
   421                           	callstack 0
   422                           
   423                           ; 1 bytes @ 0x19
   424   00001A                     	ds	1
   425   00001B                     setMotorPWM@negDuty:
   426                           	callstack 0
   427                           
   428                           ; 1 bytes @ 0x1A
   429   00001B                     	ds	1
   430   00001C                     norm_stop@mL:
   431                           	callstack 0
   432   00001C                     turnLeft@mL:
   433                           	callstack 0
   434   00001C                     turnRight@mL:
   435                           	callstack 0
   436   00001C                     fullSpeedAhead@mL:
   437                           	callstack 0
   438   00001C                     reverse@mL:
   439                           	callstack 0
   440                           
   441                           ; 2 bytes @ 0x1B
   442   00001C                     	ds	2
   443   00001E                     norm_stop@mR:
   444                           	callstack 0
   445   00001E                     turnLeft@mR:
   446                           	callstack 0
   447   00001E                     turnRight@mR:
   448                           	callstack 0
   449   00001E                     fullSpeedAhead@mR:
   450                           	callstack 0
   451   00001E                     reverse@mR:
   452                           	callstack 0
   453                           
   454                           ; 2 bytes @ 0x1D
   455   00001E                     	ds	2
   456   000020                     ??_reverse:
   457   000020                     
   458                           ; 1 bytes @ 0x1F
   459   000020                     	ds	1
   460   000021                     motor_response@temp:
   461                           	callstack 0
   462   000021                     motor_retrace@buggy_path:
   463                           	callstack 0
   464                           
   465                           ; 2 bytes @ 0x20
   466   000021                     	ds	2
   467   000023                     motor_response@mL:
   468                           	callstack 0
   469   000023                     motor_retrace@mL:
   470                           	callstack 0
   471                           
   472                           ; 2 bytes @ 0x22
   473   000023                     	ds	2
   474   000025                     motor_response@mR:
   475                           	callstack 0
   476   000025                     motor_retrace@mR:
   477                           	callstack 0
   478                           
   479                           ; 2 bytes @ 0x24
   480   000025                     	ds	2
   481   000027                     ??_motor_response:
   482   000027                     ??_motor_retrace:
   483                           
   484                           ; 1 bytes @ 0x26
   485   000027                     	ds	2
   486   000029                     motor_response@j:
   487                           	callstack 0
   488   000029                     motor_retrace@j:
   489                           	callstack 0
   490                           
   491                           ; 2 bytes @ 0x28
   492   000029                     	ds	2
   493   00002B                     motor_response@j_485:
   494                           	callstack 0
   495   00002B                     motor_retrace@j_496:
   496                           	callstack 0
   497                           
   498                           ; 2 bytes @ 0x2A
   499   00002B                     	ds	2
   500   00002D                     motor_response@j_486:
   501                           	callstack 0
   502   00002D                     motor_retrace@j_497:
   503                           	callstack 0
   504                           
   505                           ; 2 bytes @ 0x2C
   506   00002D                     	ds	2
   507   00002F                     motor_response@j_487:
   508                           	callstack 0
   509   00002F                     motor_retrace@j_498:
   510                           	callstack 0
   511                           
   512                           ; 2 bytes @ 0x2E
   513   00002F                     	ds	2
   514   000031                     motor_response@j_488:
   515                           	callstack 0
   516   000031                     motor_retrace@j_499:
   517                           	callstack 0
   518                           
   519                           ; 2 bytes @ 0x30
   520   000031                     	ds	2
   521   000033                     motor_response@j_489:
   522                           	callstack 0
   523   000033                     motor_retrace@j_500:
   524                           	callstack 0
   525                           
   526                           ; 2 bytes @ 0x32
   527   000033                     	ds	2
   528   000035                     motor_response@j_490:
   529                           	callstack 0
   530   000035                     motor_retrace@j_501:
   531                           	callstack 0
   532                           
   533                           ; 2 bytes @ 0x34
   534   000035                     	ds	2
   535   000037                     ??_main:
   536                           
   537                           ; 1 bytes @ 0x36
   538   000037                     	ds	2
   539                           
   540 ;;
   541 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   542 ;;
   543 ;; *************** function _main *****************
   544 ;; Defined at:
   545 ;;		line 22 in file "main.c"
   546 ;; Parameters:    Size  Location     Type
   547 ;;		None
   548 ;; Auto vars:     Size  Location     Type
   549 ;;  buf           100    0        unsigned char [100]
   550 ;;  RGBC           14    0[BANK0 ] struct RGBC_val
   551 ;;  mR              9   23[BANK0 ] struct DC_motor
   552 ;;  mL              9   14[BANK0 ] struct DC_motor
   553 ;;  lowerThresho    2    0        int 
   554 ;;  upperThresho    2    0        int 
   555 ;; Return value:  Size  Location     Type
   556 ;;                  1    wreg      void 
   557 ;; Registers used:
   558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   559 ;; Tracked objects:
   560 ;;		On entry : 0/0
   561 ;;		On exit  : 0/0
   562 ;;		Unchanged: 0/0
   563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   565 ;;      Locals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   566 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   567 ;;      Totals:         2      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   568 ;;Total ram usage:       34 bytes
   569 ;; Hardware stack levels required when called: 10
   570 ;; This function calls:
   571 ;;		_Color_Interrupts_init
   572 ;;		_Color_Interrupts_threshold
   573 ;;		_Interrupts_init
   574 ;;		_color_click_init
   575 ;;		_color_read_RGBC
   576 ;;		_fullSpeedAhead
   577 ;;		_initDCmotorsPWM
   578 ;;		_motorLinit
   579 ;;		_motorRinit
   580 ;;		_motor_response
   581 ;;		_motor_retrace
   582 ;;		_norm_stop
   583 ;;		_persistence_register
   584 ;;		_tricolorLED
   585 ;; This function is called by:
   586 ;;		Startup code after reset
   587 ;; This function uses a non-reentrant model
   588 ;;
   589                           
   590                           	psect	text0
   591   001CC8                     __ptext0:
   592                           	callstack 0
   593   001CC8                     _main:
   594                           	callstack 21
   595   001CC8                     
   596                           ;main.c: 24:     tricolorLED();
   597   001CC8  ECAE  F012         	call	_tricolorLED	;wreg free
   598   001CCC                     
   599                           ;main.c: 30:     color_click_init();
   600   001CCC  EC99  F011         	call	_color_click_init	;wreg free
   601   001CD0                     
   602                           ;main.c: 32:     Interrupts_init();
   603   001CD0  ECB9  F012         	call	_Interrupts_init	;wreg free
   604                           
   605                           ;main.c: 33:     Color_Interrupts_init();
   606   001CD4  EC94  F012         	call	_Color_Interrupts_init	;wreg free
   607                           
   608                           ;main.c: 34:     Color_Interrupts_threshold(upperThreshold, lowerThreshold);
   609   001CD8  0E0B               	movlw	11
   610   001CDA  6E0E               	movwf	(Color_Interrupts_threshold@upperThreshold+1)^0,c
   611   001CDC  0EB8               	movlw	184
   612   001CDE  6E0D               	movwf	Color_Interrupts_threshold@upperThreshold^0,c
   613   001CE0  0E00               	movlw	0
   614   001CE2  6E10               	movwf	(Color_Interrupts_threshold@lowerThreshold+1)^0,c
   615   001CE4  0E00               	movlw	0
   616   001CE6  6E0F               	movwf	Color_Interrupts_threshold@lowerThreshold^0,c
   617   001CE8  EC0F  F012         	call	_Color_Interrupts_threshold	;wreg free
   618                           
   619                           ;main.c: 35:     persistence_register();
   620   001CEC  ECC4  F012         	call	_persistence_register	;wreg free
   621   001CF0                     
   622                           ;main.c: 37:     initDCmotorsPWM(200);
   623   001CF0  0E00               	movlw	0
   624   001CF2  6E0A               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   625   001CF4  0EC8               	movlw	200
   626   001CF6  6E09               	movwf	initDCmotorsPWM@PWMperiod^0,c
   627   001CF8  EC53  F00F         	call	_initDCmotorsPWM	;wreg free
   628   001CFC                     
   629                           ;main.c: 38:     DC_motor mL, mR;;main.c: 39:     motorLinit(&mL);
   630   001CFC  0EBB               	movlw	low main@mL
   631   001CFE  6E09               	movwf	motorLinit@mL^0,c
   632   001D00  0E00               	movlw	high main@mL
   633   001D02  6E0A               	movwf	(motorLinit@mL+1)^0,c
   634   001D04  EC74  F010         	call	_motorLinit	;wreg free
   635   001D08                     
   636                           ;main.c: 40:     motorRinit(&mR);
   637   001D08  0EC4               	movlw	low main@mR
   638   001D0A  6E09               	movwf	motorRinit@mR^0,c
   639   001D0C  0E00               	movlw	high main@mR
   640   001D0E  6E0A               	movwf	(motorRinit@mR+1)^0,c
   641   001D10  EC3F  F010         	call	_motorRinit	;wreg free
   642   001D14                     
   643                           ;main.c: 42:     TRISEbits.TRISE2 = 0;
   644   001D14  9485               	bcf	133,2,c	;volatile
   645   001D16                     
   646                           ;main.c: 43:     TRISEbits.TRISE4 = 0;
   647   001D16  9885               	bcf	133,4,c	;volatile
   648   001D18                     
   649                           ;main.c: 44:     TRISCbits.TRISC7 = 0;
   650   001D18  9E83               	bcf	131,7,c	;volatile
   651   001D1A                     
   652                           ;main.c: 45:     TRISGbits.TRISG6 = 0;
   653   001D1A  9C87               	bcf	135,6,c	;volatile
   654   001D1C                     
   655                           ;main.c: 46:     TRISDbits.TRISD7 = 0;
   656   001D1C  9E84               	bcf	132,7,c	;volatile
   657   001D1E                     
   658                           ;main.c: 47:     LATDbits.LATD7 = 0;
   659   001D1E  9E7C               	bcf	124,7,c	;volatile
   660   001D20                     
   661                           ;main.c: 48:     TRISHbits.TRISH3 = 0;
   662   001D20  9688               	bcf	136,3,c	;volatile
   663   001D22                     
   664                           ;main.c: 49:     LATHbits.LATH3 = 0;
   665   001D22  9680               	bcf	128,3,c	;volatile
   666   001D24                     l2654:
   667                           
   668                           ;main.c: 52:         fullSpeedAhead(&mL, &mR);
   669   001D24  0EBB               	movlw	low main@mL
   670   001D26  6E1C               	movwf	fullSpeedAhead@mL^0,c
   671   001D28  0E00               	movlw	high main@mL
   672   001D2A  6E1D               	movwf	(fullSpeedAhead@mL+1)^0,c
   673   001D2C  0EC4               	movlw	low main@mR
   674   001D2E  6E1E               	movwf	fullSpeedAhead@mR^0,c
   675   001D30  0E00               	movlw	high main@mR
   676   001D32  6E1F               	movwf	(fullSpeedAhead@mR+1)^0,c
   677   001D34  ECDE  F00E         	call	_fullSpeedAhead	;wreg free
   678   001D38                     
   679                           ;main.c: 54:         LATHbits.LATH3 = 1;
   680   001D38  8680               	bsf	128,3,c	;volatile
   681   001D3A                     
   682                           ;main.c: 55:         if (interrupt_flag == 1 ) {
   683   001D3A  0100               	movlb	0	; () banked
   684   001D3C  059C               	decf	_interrupt_flag& (0+255),w,b
   685   001D3E  119D               	iorwf	(_interrupt_flag+1)& (0+255),w,b
   686   001D40  A4D8               	btfss	status,2,c
   687   001D42  EFA5  F00E         	goto	u1371
   688   001D46  EFA7  F00E         	goto	u1370
   689   001D4A                     u1371:
   690   001D4A  EF92  F00E         	goto	l2654
   691   001D4E                     u1370:
   692   001D4E                     
   693                           ; BSR set to: 0
   694                           ;main.c: 57:             norm_stop(&mL, &mR);
   695   001D4E  0EBB               	movlw	low main@mL
   696   001D50  6E1C               	movwf	norm_stop@mL^0,c
   697   001D52  0E00               	movlw	high main@mL
   698   001D54  6E1D               	movwf	(norm_stop@mL+1)^0,c
   699   001D56  0EC4               	movlw	low main@mR
   700   001D58  6E1E               	movwf	norm_stop@mR^0,c
   701   001D5A  0E00               	movlw	high main@mR
   702   001D5C  6E1F               	movwf	(norm_stop@mR+1)^0,c
   703   001D5E  ECB3  F011         	call	_norm_stop	;wreg free
   704   001D62                     
   705                           ;main.c: 58:             _delay((unsigned long)((1000)*(64000000/4000.0)));
   706   001D62  0E52               	movlw	82
   707   001D64  6E38               	movwf	(??_main+1)^0,c
   708   001D66  0E2B               	movlw	43
   709   001D68  6E37               	movwf	??_main^0,c
   710   001D6A  0E00               	movlw	0
   711   001D6C                     u1437:
   712   001D6C  2EE8               	decfsz	wreg,f,c
   713   001D6E  D7FE               	bra	u1437
   714   001D70  2E37               	decfsz	??_main^0,f,c
   715   001D72  D7FC               	bra	u1437
   716   001D74  2E38               	decfsz	(??_main+1)^0,f,c
   717   001D76  D7FA               	bra	u1437
   718   001D78  D000               	nop2	
   719   001D7A                     
   720                           ;main.c: 59:             LATDbits.LATD7 = 0;
   721   001D7A  9E7C               	bcf	124,7,c	;volatile
   722   001D7C                     
   723                           ;main.c: 60:             color_read_RGBC(&RGBC);
   724   001D7C  0EAD               	movlw	low main@RGBC
   725   001D7E  6E14               	movwf	color_read_RGBC@temp^0,c
   726   001D80  0E00               	movlw	high main@RGBC
   727   001D82  6E15               	movwf	(color_read_RGBC@temp+1)^0,c
   728   001D84  ECA9  F010         	call	_color_read_RGBC	;wreg free
   729   001D88                     
   730                           ;main.c: 61:             if(motor_return=0){
   731   001D88  0E00               	movlw	0
   732   001D8A  6E51               	movwf	_motor_return^0,c
   733   001D8C                     
   734                           ;main.c: 66:                 motor_retrace(&buggy_path, &mL, &mR);
   735   001D8C  0E9E               	movlw	low _buggy_path
   736   001D8E  6E21               	movwf	motor_retrace@buggy_path^0,c
   737   001D90  0E00               	movlw	high _buggy_path
   738   001D92  6E22               	movwf	(motor_retrace@buggy_path+1)^0,c
   739   001D94  0EBB               	movlw	low main@mL
   740   001D96  6E23               	movwf	motor_retrace@mL^0,c
   741   001D98  0E00               	movlw	high main@mL
   742   001D9A  6E24               	movwf	(motor_retrace@mL+1)^0,c
   743   001D9C  0EC4               	movlw	low main@mR
   744   001D9E  6E25               	movwf	motor_retrace@mR^0,c
   745   001DA0  0E00               	movlw	high main@mR
   746   001DA2  6E26               	movwf	(motor_retrace@mR+1)^0,c
   747   001DA4  ECA1  F00A         	call	_motor_retrace	;wreg free
   748   001DA8                     
   749                           ;main.c: 70:             LATHbits.LATH3 = 0;
   750   001DA8  9680               	bcf	128,3,c	;volatile
   751   001DAA                     
   752                           ;main.c: 71:             interrupt_flag = 0;
   753   001DAA  0E00               	movlw	0
   754   001DAC  0100               	movlb	0	; () banked
   755   001DAE  6F9D               	movwf	(_interrupt_flag+1)& (0+255),b
   756   001DB0  0E00               	movlw	0
   757   001DB2  6F9C               	movwf	_interrupt_flag& (0+255),b
   758   001DB4  EF92  F00E         	goto	l2654
   759   001DB8  EF19  F000         	goto	start
   760   001DBC                     __end_of_main:
   761                           	callstack 0
   762                           
   763 ;; *************** function _tricolorLED *****************
   764 ;; Defined at:
   765 ;;		line 110 in file "color.c"
   766 ;; Parameters:    Size  Location     Type
   767 ;;		None
   768 ;; Auto vars:     Size  Location     Type
   769 ;;		None
   770 ;; Return value:  Size  Location     Type
   771 ;;                  1    wreg      void 
   772 ;; Registers used:
   773 ;;		None
   774 ;; Tracked objects:
   775 ;;		On entry : 0/0
   776 ;;		On exit  : 0/0
   777 ;;		Unchanged: 0/0
   778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   782 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   783 ;;Total ram usage:        0 bytes
   784 ;; Hardware stack levels used: 1
   785 ;; Hardware stack levels required when called: 6
   786 ;; This function calls:
   787 ;;		Nothing
   788 ;; This function is called by:
   789 ;;		_main
   790 ;; This function uses a non-reentrant model
   791 ;;
   792                           
   793                           	psect	text1
   794   00255C                     __ptext1:
   795                           	callstack 0
   796   00255C                     _tricolorLED:
   797                           	callstack 24
   798   00255C                     
   799                           ;color.c: 112:     TRISGbits.TRISG0 = 0;
   800   00255C  9087               	bcf	135,0,c	;volatile
   801                           
   802                           ;color.c: 113:     LATGbits.LATG0 = 1;
   803   00255E  807F               	bsf	127,0,c	;volatile
   804                           
   805                           ;color.c: 114:     TRISAbits.TRISA4 = 0;
   806   002560  9881               	bcf	129,4,c	;volatile
   807                           
   808                           ;color.c: 115:     LATAbits.LATA4 = 1;
   809   002562  8879               	bsf	121,4,c	;volatile
   810                           
   811                           ;color.c: 116:     TRISFbits.TRISF7 = 0;
   812   002564  9E86               	bcf	134,7,c	;volatile
   813                           
   814                           ;color.c: 117:     LATFbits.LATF7 = 1;
   815   002566  8E7E               	bsf	126,7,c	;volatile
   816                           
   817                           ;color.c: 118:     TRISAbits.TRISA3 = 0;
   818   002568  9681               	bcf	129,3,c	;volatile
   819                           
   820                           ;color.c: 119:     LATAbits.LATA3 = 1;
   821   00256A  8679               	bsf	121,3,c	;volatile
   822                           
   823                           ;color.c: 120:     TRISEbits.TRISE7 = 0;
   824   00256C  9E85               	bcf	133,7,c	;volatile
   825                           
   826                           ;color.c: 121:     LATEbits.LATE7 = 1;
   827   00256E  8E7D               	bsf	125,7,c	;volatile
   828   002570  0012               	return		;funcret
   829   002572                     __end_of_tricolorLED:
   830                           	callstack 0
   831                           
   832 ;; *************** function _persistence_register *****************
   833 ;; Defined at:
   834 ;;		line 46 in file "interrupts.c"
   835 ;; Parameters:    Size  Location     Type
   836 ;;		None
   837 ;; Auto vars:     Size  Location     Type
   838 ;;		None
   839 ;; Return value:  Size  Location     Type
   840 ;;                  1    wreg      void 
   841 ;; Registers used:
   842 ;;		wreg, status,2, status,0, cstack
   843 ;; Tracked objects:
   844 ;;		On entry : 0/0
   845 ;;		On exit  : 0/0
   846 ;;		Unchanged: 0/0
   847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   852 ;;Total ram usage:        0 bytes
   853 ;; Hardware stack levels used: 1
   854 ;; Hardware stack levels required when called: 9
   855 ;; This function calls:
   856 ;;		_color_writetoaddr
   857 ;; This function is called by:
   858 ;;		_main
   859 ;; This function uses a non-reentrant model
   860 ;;
   861                           
   862                           	psect	text2
   863   002588                     __ptext2:
   864                           	callstack 0
   865   002588                     _persistence_register:
   866                           	callstack 21
   867   002588                     
   868                           ;interrupts.c: 48:  color_writetoaddr(0x0C, 0b010);
   869   002588  0E02               	movlw	2
   870   00258A  6E0B               	movwf	color_writetoaddr@value^0,c
   871   00258C  0E0C               	movlw	12
   872   00258E  EC74  F012         	call	_color_writetoaddr
   873   002592  0012               	return		;funcret
   874   002594                     __end_of_persistence_register:
   875                           	callstack 0
   876                           
   877 ;; *************** function _motor_retrace *****************
   878 ;; Defined at:
   879 ;;		line 194 in file "color.c"
   880 ;; Parameters:    Size  Location     Type
   881 ;;  buggy_path      2   32[COMRAM] PTR unsigned char 
   882 ;;		 -> buggy_path(15), 
   883 ;;  mL              2   34[COMRAM] PTR struct DC_motor
   884 ;;		 -> main@mL(9), 
   885 ;;  mR              2   36[COMRAM] PTR struct DC_motor
   886 ;;		 -> main@mR(9), 
   887 ;; Auto vars:     Size  Location     Type
   888 ;;  j               2   52[COMRAM] int 
   889 ;;  j               2   50[COMRAM] int 
   890 ;;  j               2   48[COMRAM] int 
   891 ;;  j               2   46[COMRAM] int 
   892 ;;  j               2   44[COMRAM] int 
   893 ;;  j               2   42[COMRAM] int 
   894 ;;  j               2   40[COMRAM] int 
   895 ;; Return value:  Size  Location     Type
   896 ;;                  1    wreg      void 
   897 ;; Registers used:
   898 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   899 ;; Tracked objects:
   900 ;;		On entry : 0/0
   901 ;;		On exit  : 0/0
   902 ;;		Unchanged: 0/0
   903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   904 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   905 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   906 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   907 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   908 ;;Total ram usage:       22 bytes
   909 ;; Hardware stack levels used: 1
   910 ;; Hardware stack levels required when called: 9
   911 ;; This function calls:
   912 ;;		_norm_stop
   913 ;;		_reverse
   914 ;;		_turnLeft
   915 ;;		_turnRight
   916 ;; This function is called by:
   917 ;;		_main
   918 ;; This function uses a non-reentrant model
   919 ;;
   920                           
   921                           	psect	text3
   922   001542                     __ptext3:
   923                           	callstack 0
   924   001542                     _motor_retrace:
   925                           	callstack 21
   926   001542                     
   927                           ;color.c: 195:     if (buggy_path[ctr]==1) {
   928   001542  504D               	movf	_ctr^0,w,c
   929   001544  2421               	addwf	motor_retrace@buggy_path^0,w,c
   930   001546  6ED9               	movwf	fsr2l,c
   931   001548  504E               	movf	(_ctr+1)^0,w,c
   932   00154A  2022               	addwfc	(motor_retrace@buggy_path+1)^0,w,c
   933   00154C  6EDA               	movwf	fsr2h,c
   934   00154E  04DE               	decf	postinc2,w,c
   935   001550  A4D8               	btfss	status,2,c
   936   001552  EFAD  F00A         	goto	u1191
   937   001556  EFAF  F00A         	goto	u1190
   938   00155A                     u1191:
   939   00155A  EFF1  F00A         	goto	l2416
   940   00155E                     u1190:
   941   00155E                     
   942                           ;color.c: 196:      for (int j = 0; j <= 15; j++) {
   943   00155E  0E00               	movlw	0
   944   001560  6E2A               	movwf	(motor_retrace@j+1)^0,c
   945   001562  0E00               	movlw	0
   946   001564  6E29               	movwf	motor_retrace@j^0,c
   947   001566                     l2408:
   948                           
   949                           ;color.c: 197:          turnLeft(mL, mR);
   950   001566  C023  F01C         	movff	motor_retrace@mL,turnLeft@mL
   951   00156A  C024  F01D         	movff	motor_retrace@mL+1,turnLeft@mL+1
   952   00156E  C025  F01E         	movff	motor_retrace@mR,turnLeft@mR
   953   001572  C026  F01F         	movff	motor_retrace@mR+1,turnLeft@mR+1
   954   001576  EC06  F010         	call	_turnLeft	;wreg free
   955   00157A                     
   956                           ;color.c: 198:          _delay((unsigned long)((30)*(64000000/4000.0)));
   957   00157A  0E03               	movlw	3
   958   00157C  6E28               	movwf	(??_motor_retrace+1)^0,c
   959   00157E  0E70               	movlw	112
   960   001580  6E27               	movwf	??_motor_retrace^0,c
   961   001582  0E5C               	movlw	92
   962   001584                     u1447:
   963   001584  2EE8               	decfsz	wreg,f,c
   964   001586  D7FE               	bra	u1447
   965   001588  2E27               	decfsz	??_motor_retrace^0,f,c
   966   00158A  D7FC               	bra	u1447
   967   00158C  2E28               	decfsz	(??_motor_retrace+1)^0,f,c
   968   00158E  D7FA               	bra	u1447
   969   001590  D000               	nop2	
   970   001592                     
   971                           ;color.c: 199:          norm_stop(mL, mR);
   972   001592  C023  F01C         	movff	motor_retrace@mL,norm_stop@mL
   973   001596  C024  F01D         	movff	motor_retrace@mL+1,norm_stop@mL+1
   974   00159A  C025  F01E         	movff	motor_retrace@mR,norm_stop@mR
   975   00159E  C026  F01F         	movff	motor_retrace@mR+1,norm_stop@mR+1
   976   0015A2  ECB3  F011         	call	_norm_stop	;wreg free
   977                           
   978                           ;color.c: 200:          _delay((unsigned long)((30)*(64000000/4000.0)));
   979   0015A6  0E03               	movlw	3
   980   0015A8  6E28               	movwf	(??_motor_retrace+1)^0,c
   981   0015AA  0E70               	movlw	112
   982   0015AC  6E27               	movwf	??_motor_retrace^0,c
   983   0015AE  0E5C               	movlw	92
   984   0015B0                     u1457:
   985   0015B0  2EE8               	decfsz	wreg,f,c
   986   0015B2  D7FE               	bra	u1457
   987   0015B4  2E27               	decfsz	??_motor_retrace^0,f,c
   988   0015B6  D7FC               	bra	u1457
   989   0015B8  2E28               	decfsz	(??_motor_retrace+1)^0,f,c
   990   0015BA  D7FA               	bra	u1457
   991   0015BC  D000               	nop2	
   992   0015BE                     
   993                           ;color.c: 201:      }
   994   0015BE  4A29               	infsnz	motor_retrace@j^0,f,c
   995   0015C0  2A2A               	incf	(motor_retrace@j+1)^0,f,c
   996   0015C2  BE2A               	btfsc	(motor_retrace@j+1)^0,7,c
   997   0015C4  EFED  F00A         	goto	u1201
   998   0015C8  502A               	movf	(motor_retrace@j+1)^0,w,c
   999   0015CA  E109               	bnz	u1200
  1000   0015CC  0E10               	movlw	16
  1001   0015CE  5C29               	subwf	motor_retrace@j^0,w,c
  1002   0015D0  A0D8               	btfss	status,0,c
  1003   0015D2  EFED  F00A         	goto	u1201
  1004   0015D6  EFEF  F00A         	goto	u1200
  1005   0015DA                     u1201:
  1006   0015DA  EFB3  F00A         	goto	l2408
  1007   0015DE                     u1200:
  1008   0015DE  EF22  F00D         	goto	l2524
  1009   0015E2                     l2416:
  1010   0015E2  504D               	movf	_ctr^0,w,c
  1011   0015E4  2421               	addwf	motor_retrace@buggy_path^0,w,c
  1012   0015E6  6ED9               	movwf	fsr2l,c
  1013   0015E8  504E               	movf	(_ctr+1)^0,w,c
  1014   0015EA  2022               	addwfc	(motor_retrace@buggy_path+1)^0,w,c
  1015   0015EC  6EDA               	movwf	fsr2h,c
  1016   0015EE  0E02               	movlw	2
  1017   0015F0  18DE               	xorwf	postinc2,w,c
  1018   0015F2  A4D8               	btfss	status,2,c
  1019   0015F4  EFFE  F00A         	goto	u1211
  1020   0015F8  EF00  F00B         	goto	u1210
  1021   0015FC                     u1211:
  1022   0015FC  EF42  F00B         	goto	l2432
  1023   001600                     u1210:
  1024   001600                     
  1025                           ;color.c: 204:     for (int j = 0; j <= 15; j++) {
  1026   001600  0E00               	movlw	0
  1027   001602  6E2C               	movwf	(motor_retrace@j_496+1)^0,c
  1028   001604  0E00               	movlw	0
  1029   001606  6E2B               	movwf	motor_retrace@j_496^0,c
  1030   001608                     l2424:
  1031                           
  1032                           ;color.c: 205:         turnRight(mL, mR);
  1033   001608  C023  F01C         	movff	motor_retrace@mL,turnRight@mL
  1034   00160C  C024  F01D         	movff	motor_retrace@mL+1,turnRight@mL+1
  1035   001610  C025  F01E         	movff	motor_retrace@mR,turnRight@mR
  1036   001614  C026  F01F         	movff	motor_retrace@mR+1,turnRight@mR+1
  1037   001618  ECCD  F00F         	call	_turnRight	;wreg free
  1038   00161C                     
  1039                           ;color.c: 206:         _delay((unsigned long)((30)*(64000000/4000.0)));
  1040   00161C  0E03               	movlw	3
  1041   00161E  6E28               	movwf	(??_motor_retrace+1)^0,c
  1042   001620  0E70               	movlw	112
  1043   001622  6E27               	movwf	??_motor_retrace^0,c
  1044   001624  0E5C               	movlw	92
  1045   001626                     u1467:
  1046   001626  2EE8               	decfsz	wreg,f,c
  1047   001628  D7FE               	bra	u1467
  1048   00162A  2E27               	decfsz	??_motor_retrace^0,f,c
  1049   00162C  D7FC               	bra	u1467
  1050   00162E  2E28               	decfsz	(??_motor_retrace+1)^0,f,c
  1051   001630  D7FA               	bra	u1467
  1052   001632  D000               	nop2	
  1053   001634                     
  1054                           ;color.c: 207:         norm_stop(mL, mR);
  1055   001634  C023  F01C         	movff	motor_retrace@mL,norm_stop@mL
  1056   001638  C024  F01D         	movff	motor_retrace@mL+1,norm_stop@mL+1
  1057   00163C  C025  F01E         	movff	motor_retrace@mR,norm_stop@mR
  1058   001640  C026  F01F         	movff	motor_retrace@mR+1,norm_stop@mR+1
  1059   001644  ECB3  F011         	call	_norm_stop	;wreg free
  1060                           
  1061                           ;color.c: 208:         _delay((unsigned long)((30)*(64000000/4000.0)));
  1062   001648  0E03               	movlw	3
  1063   00164A  6E28               	movwf	(??_motor_retrace+1)^0,c
  1064   00164C  0E70               	movlw	112
  1065   00164E  6E27               	movwf	??_motor_retrace^0,c
  1066   001650  0E5C               	movlw	92
  1067   001652                     u1477:
  1068   001652  2EE8               	decfsz	wreg,f,c
  1069   001654  D7FE               	bra	u1477
  1070   001656  2E27               	decfsz	??_motor_retrace^0,f,c
  1071   001658  D7FC               	bra	u1477
  1072   00165A  2E28               	decfsz	(??_motor_retrace+1)^0,f,c
  1073   00165C  D7FA               	bra	u1477
  1074   00165E  D000               	nop2	
  1075   001660                     
  1076                           ;color.c: 209:     }
  1077   001660  4A2B               	infsnz	motor_retrace@j_496^0,f,c
  1078   001662  2A2C               	incf	(motor_retrace@j_496+1)^0,f,c
  1079   001664  BE2C               	btfsc	(motor_retrace@j_496+1)^0,7,c
  1080   001666  EF3E  F00B         	goto	u1221
  1081   00166A  502C               	movf	(motor_retrace@j_496+1)^0,w,c
  1082   00166C  E109               	bnz	u1220
  1083   00166E  0E10               	movlw	16
  1084   001670  5C2B               	subwf	motor_retrace@j_496^0,w,c
  1085   001672  A0D8               	btfss	status,0,c
  1086   001674  EF3E  F00B         	goto	u1221
  1087   001678  EF40  F00B         	goto	u1220
  1088   00167C                     u1221:
  1089   00167C  EF04  F00B         	goto	l2424
  1090   001680                     u1220:
  1091   001680  EF22  F00D         	goto	l2524
  1092   001684                     l2432:
  1093   001684  504D               	movf	_ctr^0,w,c
  1094   001686  2421               	addwf	motor_retrace@buggy_path^0,w,c
  1095   001688  6ED9               	movwf	fsr2l,c
  1096   00168A  504E               	movf	(_ctr+1)^0,w,c
  1097   00168C  2022               	addwfc	(motor_retrace@buggy_path+1)^0,w,c
  1098   00168E  6EDA               	movwf	fsr2h,c
  1099   001690  0E03               	movlw	3
  1100   001692  18DE               	xorwf	postinc2,w,c
  1101   001694  A4D8               	btfss	status,2,c
  1102   001696  EF4F  F00B         	goto	u1231
  1103   00169A  EF51  F00B         	goto	u1230
  1104   00169E                     u1231:
  1105   00169E  EF93  F00B         	goto	l2448
  1106   0016A2                     u1230:
  1107   0016A2                     
  1108                           ;color.c: 212:      for (int j = 0; j <= 29; j++) {
  1109   0016A2  0E00               	movlw	0
  1110   0016A4  6E2E               	movwf	(motor_retrace@j_497+1)^0,c
  1111   0016A6  0E00               	movlw	0
  1112   0016A8  6E2D               	movwf	motor_retrace@j_497^0,c
  1113   0016AA                     l2440:
  1114                           
  1115                           ;color.c: 213:          turnRight(mL, mR);
  1116   0016AA  C023  F01C         	movff	motor_retrace@mL,turnRight@mL
  1117   0016AE  C024  F01D         	movff	motor_retrace@mL+1,turnRight@mL+1
  1118   0016B2  C025  F01E         	movff	motor_retrace@mR,turnRight@mR
  1119   0016B6  C026  F01F         	movff	motor_retrace@mR+1,turnRight@mR+1
  1120   0016BA  ECCD  F00F         	call	_turnRight	;wreg free
  1121   0016BE                     
  1122                           ;color.c: 214:          _delay((unsigned long)((30)*(64000000/4000.0)));
  1123   0016BE  0E03               	movlw	3
  1124   0016C0  6E28               	movwf	(??_motor_retrace+1)^0,c
  1125   0016C2  0E70               	movlw	112
  1126   0016C4  6E27               	movwf	??_motor_retrace^0,c
  1127   0016C6  0E5C               	movlw	92
  1128   0016C8                     u1487:
  1129   0016C8  2EE8               	decfsz	wreg,f,c
  1130   0016CA  D7FE               	bra	u1487
  1131   0016CC  2E27               	decfsz	??_motor_retrace^0,f,c
  1132   0016CE  D7FC               	bra	u1487
  1133   0016D0  2E28               	decfsz	(??_motor_retrace+1)^0,f,c
  1134   0016D2  D7FA               	bra	u1487
  1135   0016D4  D000               	nop2	
  1136   0016D6                     
  1137                           ;color.c: 215:          norm_stop(mL, mR);
  1138   0016D6  C023  F01C         	movff	motor_retrace@mL,norm_stop@mL
  1139   0016DA  C024  F01D         	movff	motor_retrace@mL+1,norm_stop@mL+1
  1140   0016DE  C025  F01E         	movff	motor_retrace@mR,norm_stop@mR
  1141   0016E2  C026  F01F         	movff	motor_retrace@mR+1,norm_stop@mR+1
  1142   0016E6  ECB3  F011         	call	_norm_stop	;wreg free
  1143                           
  1144                           ;color.c: 216:          _delay((unsigned long)((30)*(64000000/4000.0)));
  1145   0016EA  0E03               	movlw	3
  1146   0016EC  6E28               	movwf	(??_motor_retrace+1)^0,c
  1147   0016EE  0E70               	movlw	112
  1148   0016F0  6E27               	movwf	??_motor_retrace^0,c
  1149   0016F2  0E5C               	movlw	92
  1150   0016F4                     u1497:
  1151   0016F4  2EE8               	decfsz	wreg,f,c
  1152   0016F6  D7FE               	bra	u1497
  1153   0016F8  2E27               	decfsz	??_motor_retrace^0,f,c
  1154   0016FA  D7FC               	bra	u1497
  1155   0016FC  2E28               	decfsz	(??_motor_retrace+1)^0,f,c
  1156   0016FE  D7FA               	bra	u1497
  1157   001700  D000               	nop2	
  1158   001702                     
  1159                           ;color.c: 217:      }
  1160   001702  4A2D               	infsnz	motor_retrace@j_497^0,f,c
  1161   001704  2A2E               	incf	(motor_retrace@j_497+1)^0,f,c
  1162   001706  BE2E               	btfsc	(motor_retrace@j_497+1)^0,7,c
  1163   001708  EF8F  F00B         	goto	u1241
  1164   00170C  502E               	movf	(motor_retrace@j_497+1)^0,w,c
  1165   00170E  E109               	bnz	u1240
  1166   001710  0E1E               	movlw	30
  1167   001712  5C2D               	subwf	motor_retrace@j_497^0,w,c
  1168   001714  A0D8               	btfss	status,0,c
  1169   001716  EF8F  F00B         	goto	u1241
  1170   00171A  EF91  F00B         	goto	u1240
  1171   00171E                     u1241:
  1172   00171E  EF55  F00B         	goto	l2440
  1173   001722                     u1240:
  1174   001722  EF22  F00D         	goto	l2524
  1175   001726                     l2448:
  1176   001726  504D               	movf	_ctr^0,w,c
  1177   001728  2421               	addwf	motor_retrace@buggy_path^0,w,c
  1178   00172A  6ED9               	movwf	fsr2l,c
  1179   00172C  504E               	movf	(_ctr+1)^0,w,c
  1180   00172E  2022               	addwfc	(motor_retrace@buggy_path+1)^0,w,c
  1181   001730  6EDA               	movwf	fsr2h,c
  1182   001732  0E04               	movlw	4
  1183   001734  18DE               	xorwf	postinc2,w,c
  1184   001736  A4D8               	btfss	status,2,c
  1185   001738  EFA0  F00B         	goto	u1251
  1186   00173C  EFA2  F00B         	goto	u1250
  1187   001740                     u1251:
  1188   001740  EF0B  F00C         	goto	l2470
  1189   001744                     u1250:
  1190   001744                     
  1191                           ;color.c: 221:      reverse(mL, mR);
  1192   001744  C023  F01C         	movff	motor_retrace@mL,reverse@mL
  1193   001748  C024  F01D         	movff	motor_retrace@mL+1,reverse@mL+1
  1194   00174C  C025  F01E         	movff	motor_retrace@mR,reverse@mR
  1195   001750  C026  F01F         	movff	motor_retrace@mR+1,reverse@mR+1
  1196   001754  ECE8  F00D         	call	_reverse	;wreg free
  1197   001758                     
  1198                           ;color.c: 222:      _delay((unsigned long)((10)*(64000000/4000.0)));
  1199   001758  0ED0               	movlw	208
  1200   00175A  6E27               	movwf	??_motor_retrace^0,c
  1201   00175C  0ECA               	movlw	202
  1202   00175E                     u1507:
  1203   00175E  2EE8               	decfsz	wreg,f,c
  1204   001760  D7FE               	bra	u1507
  1205   001762  2E27               	decfsz	??_motor_retrace^0,f,c
  1206   001764  D7FC               	bra	u1507
  1207   001766                     
  1208                           ;color.c: 223:      norm_stop(mL, mR);
  1209   001766  C023  F01C         	movff	motor_retrace@mL,norm_stop@mL
  1210   00176A  C024  F01D         	movff	motor_retrace@mL+1,norm_stop@mL+1
  1211   00176E  C025  F01E         	movff	motor_retrace@mR,norm_stop@mR
  1212   001772  C026  F01F         	movff	motor_retrace@mR+1,norm_stop@mR+1
  1213   001776  ECB3  F011         	call	_norm_stop	;wreg free
  1214                           
  1215                           ;color.c: 224:      _delay((unsigned long)((100)*(64000000/4000.0)));
  1216   00177A  0E09               	movlw	9
  1217   00177C  6E28               	movwf	(??_motor_retrace+1)^0,c
  1218   00177E  0E1E               	movlw	30
  1219   001780  6E27               	movwf	??_motor_retrace^0,c
  1220   001782  0EE4               	movlw	228
  1221   001784                     u1517:
  1222   001784  2EE8               	decfsz	wreg,f,c
  1223   001786  D7FE               	bra	u1517
  1224   001788  2E27               	decfsz	??_motor_retrace^0,f,c
  1225   00178A  D7FC               	bra	u1517
  1226   00178C  2E28               	decfsz	(??_motor_retrace+1)^0,f,c
  1227   00178E  D7FA               	bra	u1517
  1228   001790  D000               	nop2	
  1229   001792                     
  1230                           ;color.c: 225:      for (int j = 0; j <= 16; j++) {
  1231   001792  0E00               	movlw	0
  1232   001794  6E30               	movwf	(motor_retrace@j_498+1)^0,c
  1233   001796  0E00               	movlw	0
  1234   001798  6E2F               	movwf	motor_retrace@j_498^0,c
  1235   00179A                     l2462:
  1236                           
  1237                           ;color.c: 226:          turnLeft(mL, mR);
  1238   00179A  C023  F01C         	movff	motor_retrace@mL,turnLeft@mL
  1239   00179E  C024  F01D         	movff	motor_retrace@mL+1,turnLeft@mL+1
  1240   0017A2  C025  F01E         	movff	motor_retrace@mR,turnLeft@mR
  1241   0017A6  C026  F01F         	movff	motor_retrace@mR+1,turnLeft@mR+1
  1242   0017AA  EC06  F010         	call	_turnLeft	;wreg free
  1243   0017AE                     
  1244                           ;color.c: 227:          _delay((unsigned long)((30)*(64000000/4000.0)));
  1245   0017AE  0E03               	movlw	3
  1246   0017B0  6E28               	movwf	(??_motor_retrace+1)^0,c
  1247   0017B2  0E70               	movlw	112
  1248   0017B4  6E27               	movwf	??_motor_retrace^0,c
  1249   0017B6  0E5C               	movlw	92
  1250   0017B8                     u1527:
  1251   0017B8  2EE8               	decfsz	wreg,f,c
  1252   0017BA  D7FE               	bra	u1527
  1253   0017BC  2E27               	decfsz	??_motor_retrace^0,f,c
  1254   0017BE  D7FC               	bra	u1527
  1255   0017C0  2E28               	decfsz	(??_motor_retrace+1)^0,f,c
  1256   0017C2  D7FA               	bra	u1527
  1257   0017C4  D000               	nop2	
  1258   0017C6                     
  1259                           ;color.c: 228:          norm_stop(mL, mR);
  1260   0017C6  C023  F01C         	movff	motor_retrace@mL,norm_stop@mL
  1261   0017CA  C024  F01D         	movff	motor_retrace@mL+1,norm_stop@mL+1
  1262   0017CE  C025  F01E         	movff	motor_retrace@mR,norm_stop@mR
  1263   0017D2  C026  F01F         	movff	motor_retrace@mR+1,norm_stop@mR+1
  1264   0017D6  ECB3  F011         	call	_norm_stop	;wreg free
  1265                           
  1266                           ;color.c: 229:          _delay((unsigned long)((30)*(64000000/4000.0)));
  1267   0017DA  0E03               	movlw	3
  1268   0017DC  6E28               	movwf	(??_motor_retrace+1)^0,c
  1269   0017DE  0E70               	movlw	112
  1270   0017E0  6E27               	movwf	??_motor_retrace^0,c
  1271   0017E2  0E5C               	movlw	92
  1272   0017E4                     u1537:
  1273   0017E4  2EE8               	decfsz	wreg,f,c
  1274   0017E6  D7FE               	bra	u1537
  1275   0017E8  2E27               	decfsz	??_motor_retrace^0,f,c
  1276   0017EA  D7FC               	bra	u1537
  1277   0017EC  2E28               	decfsz	(??_motor_retrace+1)^0,f,c
  1278   0017EE  D7FA               	bra	u1537
  1279   0017F0  D000               	nop2	
  1280   0017F2                     
  1281                           ;color.c: 230:      }
  1282   0017F2  4A2F               	infsnz	motor_retrace@j_498^0,f,c
  1283   0017F4  2A30               	incf	(motor_retrace@j_498+1)^0,f,c
  1284   0017F6  BE30               	btfsc	(motor_retrace@j_498+1)^0,7,c
  1285   0017F8  EF07  F00C         	goto	u1261
  1286   0017FC  5030               	movf	(motor_retrace@j_498+1)^0,w,c
  1287   0017FE  E109               	bnz	u1260
  1288   001800  0E11               	movlw	17
  1289   001802  5C2F               	subwf	motor_retrace@j_498^0,w,c
  1290   001804  A0D8               	btfss	status,0,c
  1291   001806  EF07  F00C         	goto	u1261
  1292   00180A  EF09  F00C         	goto	u1260
  1293   00180E                     u1261:
  1294   00180E  EFCD  F00B         	goto	l2462
  1295   001812                     u1260:
  1296   001812  EF22  F00D         	goto	l2524
  1297   001816                     l2470:
  1298   001816  504D               	movf	_ctr^0,w,c
  1299   001818  2421               	addwf	motor_retrace@buggy_path^0,w,c
  1300   00181A  6ED9               	movwf	fsr2l,c
  1301   00181C  504E               	movf	(_ctr+1)^0,w,c
  1302   00181E  2022               	addwfc	(motor_retrace@buggy_path+1)^0,w,c
  1303   001820  6EDA               	movwf	fsr2h,c
  1304   001822  0E05               	movlw	5
  1305   001824  18DE               	xorwf	postinc2,w,c
  1306   001826  A4D8               	btfss	status,2,c
  1307   001828  EF18  F00C         	goto	u1271
  1308   00182C  EF1A  F00C         	goto	u1270
  1309   001830                     u1271:
  1310   001830  EF82  F00C         	goto	l2492
  1311   001834                     u1270:
  1312   001834                     
  1313                           ;color.c: 233:      reverse(mL, mR);
  1314   001834  C023  F01C         	movff	motor_retrace@mL,reverse@mL
  1315   001838  C024  F01D         	movff	motor_retrace@mL+1,reverse@mL+1
  1316   00183C  C025  F01E         	movff	motor_retrace@mR,reverse@mR
  1317   001840  C026  F01F         	movff	motor_retrace@mR+1,reverse@mR+1
  1318   001844  ECE8  F00D         	call	_reverse	;wreg free
  1319   001848                     
  1320                           ;color.c: 234:      _delay((unsigned long)((10)*(64000000/4000.0)));
  1321   001848  0ED0               	movlw	208
  1322   00184A  6E27               	movwf	??_motor_retrace^0,c
  1323   00184C  0ECA               	movlw	202
  1324   00184E                     u1547:
  1325   00184E  2EE8               	decfsz	wreg,f,c
  1326   001850  D7FE               	bra	u1547
  1327   001852  2E27               	decfsz	??_motor_retrace^0,f,c
  1328   001854  D7FC               	bra	u1547
  1329   001856                     
  1330                           ;color.c: 235:      norm_stop(mL, mR);
  1331   001856  C023  F01C         	movff	motor_retrace@mL,norm_stop@mL
  1332   00185A  C024  F01D         	movff	motor_retrace@mL+1,norm_stop@mL+1
  1333   00185E  C025  F01E         	movff	motor_retrace@mR,norm_stop@mR
  1334   001862  C026  F01F         	movff	motor_retrace@mR+1,norm_stop@mR+1
  1335   001866  ECB3  F011         	call	_norm_stop	;wreg free
  1336                           
  1337                           ;color.c: 236:      _delay((unsigned long)((300)*(64000000/4000.0)));
  1338   00186A  0E19               	movlw	25
  1339   00186C  6E28               	movwf	(??_motor_retrace+1)^0,c
  1340   00186E  0E5A               	movlw	90
  1341   001870  6E27               	movwf	??_motor_retrace^0,c
  1342   001872  0EB2               	movlw	178
  1343   001874                     u1557:
  1344   001874  2EE8               	decfsz	wreg,f,c
  1345   001876  D7FE               	bra	u1557
  1346   001878  2E27               	decfsz	??_motor_retrace^0,f,c
  1347   00187A  D7FC               	bra	u1557
  1348   00187C  2E28               	decfsz	(??_motor_retrace+1)^0,f,c
  1349   00187E  D7FA               	bra	u1557
  1350   001880                     
  1351                           ;color.c: 237:      for (int j = 0; j <= 12; j++) {
  1352   001880  0E00               	movlw	0
  1353   001882  6E32               	movwf	(motor_retrace@j_499+1)^0,c
  1354   001884  0E00               	movlw	0
  1355   001886  6E31               	movwf	motor_retrace@j_499^0,c
  1356   001888                     l2484:
  1357                           
  1358                           ;color.c: 238:          turnRight(mL, mR);
  1359   001888  C023  F01C         	movff	motor_retrace@mL,turnRight@mL
  1360   00188C  C024  F01D         	movff	motor_retrace@mL+1,turnRight@mL+1
  1361   001890  C025  F01E         	movff	motor_retrace@mR,turnRight@mR
  1362   001894  C026  F01F         	movff	motor_retrace@mR+1,turnRight@mR+1
  1363   001898  ECCD  F00F         	call	_turnRight	;wreg free
  1364   00189C                     
  1365                           ;color.c: 239:          _delay((unsigned long)((30)*(64000000/4000.0)));
  1366   00189C  0E03               	movlw	3
  1367   00189E  6E28               	movwf	(??_motor_retrace+1)^0,c
  1368   0018A0  0E70               	movlw	112
  1369   0018A2  6E27               	movwf	??_motor_retrace^0,c
  1370   0018A4  0E5C               	movlw	92
  1371   0018A6                     u1567:
  1372   0018A6  2EE8               	decfsz	wreg,f,c
  1373   0018A8  D7FE               	bra	u1567
  1374   0018AA  2E27               	decfsz	??_motor_retrace^0,f,c
  1375   0018AC  D7FC               	bra	u1567
  1376   0018AE  2E28               	decfsz	(??_motor_retrace+1)^0,f,c
  1377   0018B0  D7FA               	bra	u1567
  1378   0018B2  D000               	nop2	
  1379   0018B4                     
  1380                           ;color.c: 240:          norm_stop(mL, mR);
  1381   0018B4  C023  F01C         	movff	motor_retrace@mL,norm_stop@mL
  1382   0018B8  C024  F01D         	movff	motor_retrace@mL+1,norm_stop@mL+1
  1383   0018BC  C025  F01E         	movff	motor_retrace@mR,norm_stop@mR
  1384   0018C0  C026  F01F         	movff	motor_retrace@mR+1,norm_stop@mR+1
  1385   0018C4  ECB3  F011         	call	_norm_stop	;wreg free
  1386                           
  1387                           ;color.c: 241:          _delay((unsigned long)((30)*(64000000/4000.0)));
  1388   0018C8  0E03               	movlw	3
  1389   0018CA  6E28               	movwf	(??_motor_retrace+1)^0,c
  1390   0018CC  0E70               	movlw	112
  1391   0018CE  6E27               	movwf	??_motor_retrace^0,c
  1392   0018D0  0E5C               	movlw	92
  1393   0018D2                     u1577:
  1394   0018D2  2EE8               	decfsz	wreg,f,c
  1395   0018D4  D7FE               	bra	u1577
  1396   0018D6  2E27               	decfsz	??_motor_retrace^0,f,c
  1397   0018D8  D7FC               	bra	u1577
  1398   0018DA  2E28               	decfsz	(??_motor_retrace+1)^0,f,c
  1399   0018DC  D7FA               	bra	u1577
  1400   0018DE  D000               	nop2	
  1401   0018E0                     
  1402                           ;color.c: 242:      }
  1403   0018E0  4A31               	infsnz	motor_retrace@j_499^0,f,c
  1404   0018E2  2A32               	incf	(motor_retrace@j_499+1)^0,f,c
  1405   0018E4  BE32               	btfsc	(motor_retrace@j_499+1)^0,7,c
  1406   0018E6  EF7E  F00C         	goto	u1281
  1407   0018EA  5032               	movf	(motor_retrace@j_499+1)^0,w,c
  1408   0018EC  E109               	bnz	u1280
  1409   0018EE  0E0D               	movlw	13
  1410   0018F0  5C31               	subwf	motor_retrace@j_499^0,w,c
  1411   0018F2  A0D8               	btfss	status,0,c
  1412   0018F4  EF7E  F00C         	goto	u1281
  1413   0018F8  EF80  F00C         	goto	u1280
  1414   0018FC                     u1281:
  1415   0018FC  EF44  F00C         	goto	l2484
  1416   001900                     u1280:
  1417   001900  EF22  F00D         	goto	l2524
  1418   001904                     l2492:
  1419   001904  504D               	movf	_ctr^0,w,c
  1420   001906  2421               	addwf	motor_retrace@buggy_path^0,w,c
  1421   001908  6ED9               	movwf	fsr2l,c
  1422   00190A  504E               	movf	(_ctr+1)^0,w,c
  1423   00190C  2022               	addwfc	(motor_retrace@buggy_path+1)^0,w,c
  1424   00190E  6EDA               	movwf	fsr2h,c
  1425   001910  0E06               	movlw	6
  1426   001912  18DE               	xorwf	postinc2,w,c
  1427   001914  A4D8               	btfss	status,2,c
  1428   001916  EF8F  F00C         	goto	u1291
  1429   00191A  EF91  F00C         	goto	u1290
  1430   00191E                     u1291:
  1431   00191E  EFD3  F00C         	goto	l2508
  1432   001922                     u1290:
  1433   001922                     
  1434                           ;color.c: 245:      for (int j = 0; j <= 23; j++) {
  1435   001922  0E00               	movlw	0
  1436   001924  6E34               	movwf	(motor_retrace@j_500+1)^0,c
  1437   001926  0E00               	movlw	0
  1438   001928  6E33               	movwf	motor_retrace@j_500^0,c
  1439   00192A                     l2500:
  1440                           
  1441                           ;color.c: 246:          turnRight(mL, mR);
  1442   00192A  C023  F01C         	movff	motor_retrace@mL,turnRight@mL
  1443   00192E  C024  F01D         	movff	motor_retrace@mL+1,turnRight@mL+1
  1444   001932  C025  F01E         	movff	motor_retrace@mR,turnRight@mR
  1445   001936  C026  F01F         	movff	motor_retrace@mR+1,turnRight@mR+1
  1446   00193A  ECCD  F00F         	call	_turnRight	;wreg free
  1447   00193E                     
  1448                           ;color.c: 247:          _delay((unsigned long)((30)*(64000000/4000.0)));
  1449   00193E  0E03               	movlw	3
  1450   001940  6E28               	movwf	(??_motor_retrace+1)^0,c
  1451   001942  0E70               	movlw	112
  1452   001944  6E27               	movwf	??_motor_retrace^0,c
  1453   001946  0E5C               	movlw	92
  1454   001948                     u1587:
  1455   001948  2EE8               	decfsz	wreg,f,c
  1456   00194A  D7FE               	bra	u1587
  1457   00194C  2E27               	decfsz	??_motor_retrace^0,f,c
  1458   00194E  D7FC               	bra	u1587
  1459   001950  2E28               	decfsz	(??_motor_retrace+1)^0,f,c
  1460   001952  D7FA               	bra	u1587
  1461   001954  D000               	nop2	
  1462   001956                     
  1463                           ;color.c: 248:          norm_stop(mL, mR);
  1464   001956  C023  F01C         	movff	motor_retrace@mL,norm_stop@mL
  1465   00195A  C024  F01D         	movff	motor_retrace@mL+1,norm_stop@mL+1
  1466   00195E  C025  F01E         	movff	motor_retrace@mR,norm_stop@mR
  1467   001962  C026  F01F         	movff	motor_retrace@mR+1,norm_stop@mR+1
  1468   001966  ECB3  F011         	call	_norm_stop	;wreg free
  1469                           
  1470                           ;color.c: 249:          _delay((unsigned long)((30)*(64000000/4000.0)));
  1471   00196A  0E03               	movlw	3
  1472   00196C  6E28               	movwf	(??_motor_retrace+1)^0,c
  1473   00196E  0E70               	movlw	112
  1474   001970  6E27               	movwf	??_motor_retrace^0,c
  1475   001972  0E5C               	movlw	92
  1476   001974                     u1597:
  1477   001974  2EE8               	decfsz	wreg,f,c
  1478   001976  D7FE               	bra	u1597
  1479   001978  2E27               	decfsz	??_motor_retrace^0,f,c
  1480   00197A  D7FC               	bra	u1597
  1481   00197C  2E28               	decfsz	(??_motor_retrace+1)^0,f,c
  1482   00197E  D7FA               	bra	u1597
  1483   001980  D000               	nop2	
  1484   001982                     
  1485                           ;color.c: 250:      }
  1486   001982  4A33               	infsnz	motor_retrace@j_500^0,f,c
  1487   001984  2A34               	incf	(motor_retrace@j_500+1)^0,f,c
  1488   001986  BE34               	btfsc	(motor_retrace@j_500+1)^0,7,c
  1489   001988  EFCF  F00C         	goto	u1301
  1490   00198C  5034               	movf	(motor_retrace@j_500+1)^0,w,c
  1491   00198E  E109               	bnz	u1300
  1492   001990  0E18               	movlw	24
  1493   001992  5C33               	subwf	motor_retrace@j_500^0,w,c
  1494   001994  A0D8               	btfss	status,0,c
  1495   001996  EFCF  F00C         	goto	u1301
  1496   00199A  EFD1  F00C         	goto	u1300
  1497   00199E                     u1301:
  1498   00199E  EF95  F00C         	goto	l2500
  1499   0019A2                     u1300:
  1500   0019A2  EF22  F00D         	goto	l2524
  1501   0019A6                     l2508:
  1502   0019A6  504D               	movf	_ctr^0,w,c
  1503   0019A8  2421               	addwf	motor_retrace@buggy_path^0,w,c
  1504   0019AA  6ED9               	movwf	fsr2l,c
  1505   0019AC  504E               	movf	(_ctr+1)^0,w,c
  1506   0019AE  2022               	addwfc	(motor_retrace@buggy_path+1)^0,w,c
  1507   0019B0  6EDA               	movwf	fsr2h,c
  1508   0019B2  0E07               	movlw	7
  1509   0019B4  18DE               	xorwf	postinc2,w,c
  1510   0019B6  A4D8               	btfss	status,2,c
  1511   0019B8  EFE0  F00C         	goto	u1311
  1512   0019BC  EFE2  F00C         	goto	u1310
  1513   0019C0                     u1311:
  1514   0019C0  EF22  F00D         	goto	l2524
  1515   0019C4                     u1310:
  1516   0019C4                     
  1517                           ;color.c: 253:          for (int j = 0; j <= 20; j++) {
  1518   0019C4  0E00               	movlw	0
  1519   0019C6  6E36               	movwf	(motor_retrace@j_501+1)^0,c
  1520   0019C8  0E00               	movlw	0
  1521   0019CA  6E35               	movwf	motor_retrace@j_501^0,c
  1522   0019CC                     l2516:
  1523                           
  1524                           ;color.c: 254:          turnRight(mL, mR);
  1525   0019CC  C023  F01C         	movff	motor_retrace@mL,turnRight@mL
  1526   0019D0  C024  F01D         	movff	motor_retrace@mL+1,turnRight@mL+1
  1527   0019D4  C025  F01E         	movff	motor_retrace@mR,turnRight@mR
  1528   0019D8  C026  F01F         	movff	motor_retrace@mR+1,turnRight@mR+1
  1529   0019DC  ECCD  F00F         	call	_turnRight	;wreg free
  1530   0019E0                     
  1531                           ;color.c: 255:          _delay((unsigned long)((30)*(64000000/4000.0)));
  1532   0019E0  0E03               	movlw	3
  1533   0019E2  6E28               	movwf	(??_motor_retrace+1)^0,c
  1534   0019E4  0E70               	movlw	112
  1535   0019E6  6E27               	movwf	??_motor_retrace^0,c
  1536   0019E8  0E5C               	movlw	92
  1537   0019EA                     u1607:
  1538   0019EA  2EE8               	decfsz	wreg,f,c
  1539   0019EC  D7FE               	bra	u1607
  1540   0019EE  2E27               	decfsz	??_motor_retrace^0,f,c
  1541   0019F0  D7FC               	bra	u1607
  1542   0019F2  2E28               	decfsz	(??_motor_retrace+1)^0,f,c
  1543   0019F4  D7FA               	bra	u1607
  1544   0019F6  D000               	nop2	
  1545   0019F8                     
  1546                           ;color.c: 256:          norm_stop(mL, mR);
  1547   0019F8  C023  F01C         	movff	motor_retrace@mL,norm_stop@mL
  1548   0019FC  C024  F01D         	movff	motor_retrace@mL+1,norm_stop@mL+1
  1549   001A00  C025  F01E         	movff	motor_retrace@mR,norm_stop@mR
  1550   001A04  C026  F01F         	movff	motor_retrace@mR+1,norm_stop@mR+1
  1551   001A08  ECB3  F011         	call	_norm_stop	;wreg free
  1552                           
  1553                           ;color.c: 257:          _delay((unsigned long)((30)*(64000000/4000.0)));
  1554   001A0C  0E03               	movlw	3
  1555   001A0E  6E28               	movwf	(??_motor_retrace+1)^0,c
  1556   001A10  0E70               	movlw	112
  1557   001A12  6E27               	movwf	??_motor_retrace^0,c
  1558   001A14  0E5C               	movlw	92
  1559   001A16                     u1617:
  1560   001A16  2EE8               	decfsz	wreg,f,c
  1561   001A18  D7FE               	bra	u1617
  1562   001A1A  2E27               	decfsz	??_motor_retrace^0,f,c
  1563   001A1C  D7FC               	bra	u1617
  1564   001A1E  2E28               	decfsz	(??_motor_retrace+1)^0,f,c
  1565   001A20  D7FA               	bra	u1617
  1566   001A22  D000               	nop2	
  1567   001A24                     
  1568                           ;color.c: 258:      }
  1569   001A24  4A35               	infsnz	motor_retrace@j_501^0,f,c
  1570   001A26  2A36               	incf	(motor_retrace@j_501+1)^0,f,c
  1571   001A28  BE36               	btfsc	(motor_retrace@j_501+1)^0,7,c
  1572   001A2A  EF20  F00D         	goto	u1321
  1573   001A2E  5036               	movf	(motor_retrace@j_501+1)^0,w,c
  1574   001A30  E109               	bnz	u1320
  1575   001A32  0E15               	movlw	21
  1576   001A34  5C35               	subwf	motor_retrace@j_501^0,w,c
  1577   001A36  A0D8               	btfss	status,0,c
  1578   001A38  EF20  F00D         	goto	u1321
  1579   001A3C  EF22  F00D         	goto	u1320
  1580   001A40                     u1321:
  1581   001A40  EFE6  F00C         	goto	l2516
  1582   001A44                     u1320:
  1583   001A44                     l2524:
  1584                           
  1585                           ;color.c: 261:     ctr--;
  1586   001A44  064D               	decf	_ctr^0,f,c
  1587   001A46  A0D8               	btfss	status,0,c
  1588   001A48  064E               	decf	(_ctr+1)^0,f,c
  1589   001A4A                     
  1590                           ;color.c: 262:     if (ctr == -1) {
  1591   001A4A  284D               	incf	_ctr^0,w,c
  1592   001A4C  E106               	bnz	u1331
  1593   001A4E  284E               	incf	(_ctr+1)^0,w,c
  1594   001A50  A4D8               	btfss	status,2,c
  1595   001A52  EF2D  F00D         	goto	u1331
  1596   001A56  EF2F  F00D         	goto	u1330
  1597   001A5A                     u1331:
  1598   001A5A  EF31  F00D         	goto	l160
  1599   001A5E                     u1330:
  1600   001A5E                     
  1601                           ;color.c: 263:            motor_return = 0;
  1602   001A5E  0E00               	movlw	0
  1603   001A60  6E51               	movwf	_motor_return^0,c
  1604   001A62                     l160:
  1605   001A62  0012               	return		;funcret
  1606   001A64                     __end_of_motor_retrace:
  1607                           	callstack 0
  1608                           
  1609 ;; *************** function _motor_response *****************
  1610 ;; Defined at:
  1611 ;;		line 124 in file "color.c"
  1612 ;; Parameters:    Size  Location     Type
  1613 ;;  temp            2   32[COMRAM] PTR struct RGBC_val
  1614 ;;		 -> main@RGBC(14), 
  1615 ;;  mL              2   34[COMRAM] PTR struct DC_motor
  1616 ;;		 -> main@mL(9), 
  1617 ;;  mR              2   36[COMRAM] PTR struct DC_motor
  1618 ;;		 -> main@mR(9), 
  1619 ;; Auto vars:     Size  Location     Type
  1620 ;;  j               2   52[COMRAM] int 
  1621 ;;  j               2   50[COMRAM] int 
  1622 ;;  j               2   48[COMRAM] int 
  1623 ;;  j               2   46[COMRAM] int 
  1624 ;;  j               2   44[COMRAM] int 
  1625 ;;  j               2   42[COMRAM] int 
  1626 ;;  j               2   40[COMRAM] int 
  1627 ;; Return value:  Size  Location     Type
  1628 ;;                  1    wreg      unsigned char 
  1629 ;; Registers used:
  1630 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1631 ;; Tracked objects:
  1632 ;;		On entry : 0/0
  1633 ;;		On exit  : 0/0
  1634 ;;		Unchanged: 0/0
  1635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1636 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1637 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1638 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1639 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1640 ;;Total ram usage:       22 bytes
  1641 ;; Hardware stack levels used: 1
  1642 ;; Hardware stack levels required when called: 9
  1643 ;; This function calls:
  1644 ;;		_norm_stop
  1645 ;;		_reverse
  1646 ;;		_turnLeft
  1647 ;;		_turnRight
  1648 ;; This function is called by:
  1649 ;;		_main
  1650 ;; This function uses a non-reentrant model
  1651 ;;
  1652                           
  1653                           	psect	text4
  1654   000E14                     __ptext4:
  1655                           	callstack 0
  1656   000E14                     _motor_response:
  1657                           	callstack 21
  1658   000E14                     
  1659                           ;color.c: 125:     if (temp->R > 8000 && temp->G < 2000 && temp->B < 2000) {
  1660   000E14  C021  FFD9         	movff	motor_response@temp,fsr2l
  1661   000E18  C022  FFDA         	movff	motor_response@temp+1,fsr2h
  1662   000E1C  0E41               	movlw	65
  1663   000E1E  5CDE               	subwf	postinc2,w,c
  1664   000E20  0E1F               	movlw	31
  1665   000E22  58DE               	subwfb	postinc2,w,c
  1666   000E24  A0D8               	btfss	status,0,c
  1667   000E26  EF17  F007         	goto	u891
  1668   000E2A  EF19  F007         	goto	u890
  1669   000E2E                     u891:
  1670   000E2E  EF7E  F007         	goto	l2266
  1671   000E32                     u890:
  1672   000E32  EE20 F002          	lfsr	2,2
  1673   000E36  5021               	movf	motor_response@temp^0,w,c
  1674   000E38  26D9               	addwf	fsr2l,f,c
  1675   000E3A  5022               	movf	(motor_response@temp+1)^0,w,c
  1676   000E3C  22DA               	addwfc	fsr2h,f,c
  1677   000E3E  0ED0               	movlw	208
  1678   000E40  5CDE               	subwf	postinc2,w,c
  1679   000E42  0E07               	movlw	7
  1680   000E44  58DE               	subwfb	postinc2,w,c
  1681   000E46  B0D8               	btfsc	status,0,c
  1682   000E48  EF28  F007         	goto	u901
  1683   000E4C  EF2A  F007         	goto	u900
  1684   000E50                     u901:
  1685   000E50  EF7E  F007         	goto	l2266
  1686   000E54                     u900:
  1687   000E54  EE20 F004          	lfsr	2,4
  1688   000E58  5021               	movf	motor_response@temp^0,w,c
  1689   000E5A  26D9               	addwf	fsr2l,f,c
  1690   000E5C  5022               	movf	(motor_response@temp+1)^0,w,c
  1691   000E5E  22DA               	addwfc	fsr2h,f,c
  1692   000E60  0ED0               	movlw	208
  1693   000E62  5CDE               	subwf	postinc2,w,c
  1694   000E64  0E07               	movlw	7
  1695   000E66  58DE               	subwfb	postinc2,w,c
  1696   000E68  B0D8               	btfsc	status,0,c
  1697   000E6A  EF39  F007         	goto	u911
  1698   000E6E  EF3B  F007         	goto	u910
  1699   000E72                     u911:
  1700   000E72  EF7E  F007         	goto	l2266
  1701   000E76                     u910:
  1702   000E76                     
  1703                           ;color.c: 126:         for (int j = 0; j <= 15; j++) {
  1704   000E76  0E00               	movlw	0
  1705   000E78  6E2A               	movwf	(motor_response@j+1)^0,c
  1706   000E7A  0E00               	movlw	0
  1707   000E7C  6E29               	movwf	motor_response@j^0,c
  1708   000E7E                     l2252:
  1709                           
  1710                           ;color.c: 127:             turnRight(mL, mR);
  1711   000E7E  C023  F01C         	movff	motor_response@mL,turnRight@mL
  1712   000E82  C024  F01D         	movff	motor_response@mL+1,turnRight@mL+1
  1713   000E86  C025  F01E         	movff	motor_response@mR,turnRight@mR
  1714   000E8A  C026  F01F         	movff	motor_response@mR+1,turnRight@mR+1
  1715   000E8E  ECCD  F00F         	call	_turnRight	;wreg free
  1716   000E92                     
  1717                           ;color.c: 128:             _delay((unsigned long)((30)*(64000000/4000.0)));
  1718   000E92  0E03               	movlw	3
  1719   000E94  6E28               	movwf	(??_motor_response+1)^0,c
  1720   000E96  0E70               	movlw	112
  1721   000E98  6E27               	movwf	??_motor_response^0,c
  1722   000E9A  0E5C               	movlw	92
  1723   000E9C                     u1627:
  1724   000E9C  2EE8               	decfsz	wreg,f,c
  1725   000E9E  D7FE               	bra	u1627
  1726   000EA0  2E27               	decfsz	??_motor_response^0,f,c
  1727   000EA2  D7FC               	bra	u1627
  1728   000EA4  2E28               	decfsz	(??_motor_response+1)^0,f,c
  1729   000EA6  D7FA               	bra	u1627
  1730   000EA8  D000               	nop2	
  1731   000EAA                     
  1732                           ;color.c: 129:             norm_stop(mL, mR);
  1733   000EAA  C023  F01C         	movff	motor_response@mL,norm_stop@mL
  1734   000EAE  C024  F01D         	movff	motor_response@mL+1,norm_stop@mL+1
  1735   000EB2  C025  F01E         	movff	motor_response@mR,norm_stop@mR
  1736   000EB6  C026  F01F         	movff	motor_response@mR+1,norm_stop@mR+1
  1737   000EBA  ECB3  F011         	call	_norm_stop	;wreg free
  1738                           
  1739                           ;color.c: 130:             _delay((unsigned long)((30)*(64000000/4000.0)));
  1740   000EBE  0E03               	movlw	3
  1741   000EC0  6E28               	movwf	(??_motor_response+1)^0,c
  1742   000EC2  0E70               	movlw	112
  1743   000EC4  6E27               	movwf	??_motor_response^0,c
  1744   000EC6  0E5C               	movlw	92
  1745   000EC8                     u1637:
  1746   000EC8  2EE8               	decfsz	wreg,f,c
  1747   000ECA  D7FE               	bra	u1637
  1748   000ECC  2E27               	decfsz	??_motor_response^0,f,c
  1749   000ECE  D7FC               	bra	u1637
  1750   000ED0  2E28               	decfsz	(??_motor_response+1)^0,f,c
  1751   000ED2  D7FA               	bra	u1637
  1752   000ED4  D000               	nop2	
  1753   000ED6                     
  1754                           ;color.c: 131:         }
  1755   000ED6  4A29               	infsnz	motor_response@j^0,f,c
  1756   000ED8  2A2A               	incf	(motor_response@j+1)^0,f,c
  1757   000EDA  BE2A               	btfsc	(motor_response@j+1)^0,7,c
  1758   000EDC  EF79  F007         	goto	u921
  1759   000EE0  502A               	movf	(motor_response@j+1)^0,w,c
  1760   000EE2  E109               	bnz	u920
  1761   000EE4  0E10               	movlw	16
  1762   000EE6  5C29               	subwf	motor_response@j^0,w,c
  1763   000EE8  A0D8               	btfss	status,0,c
  1764   000EEA  EF79  F007         	goto	u921
  1765   000EEE  EF7B  F007         	goto	u920
  1766   000EF2                     u921:
  1767   000EF2  EF3F  F007         	goto	l2252
  1768   000EF6                     u920:
  1769   000EF6                     
  1770                           ;color.c: 132:         return 1;
  1771   000EF6  0E01               	movlw	1
  1772   000EF8  EFA0  F00A         	goto	l105
  1773   000EFC                     l2266:
  1774   000EFC  C021  FFD9         	movff	motor_response@temp,fsr2l
  1775   000F00  C022  FFDA         	movff	motor_response@temp+1,fsr2h
  1776   000F04  0EB9               	movlw	185
  1777   000F06  5CDE               	subwf	postinc2,w,c
  1778   000F08  0E0B               	movlw	11
  1779   000F0A  58DE               	subwfb	postinc2,w,c
  1780   000F0C  A0D8               	btfss	status,0,c
  1781   000F0E  EF8B  F007         	goto	u931
  1782   000F12  EF8D  F007         	goto	u930
  1783   000F16                     u931:
  1784   000F16  EFE0  F007         	goto	l2284
  1785   000F1A                     u930:
  1786   000F1A  EE20 F002          	lfsr	2,2
  1787   000F1E  5021               	movf	motor_response@temp^0,w,c
  1788   000F20  26D9               	addwf	fsr2l,f,c
  1789   000F22  5022               	movf	(motor_response@temp+1)^0,w,c
  1790   000F24  22DA               	addwfc	fsr2h,f,c
  1791   000F26  0EB9               	movlw	185
  1792   000F28  5CDE               	subwf	postinc2,w,c
  1793   000F2A  0E0B               	movlw	11
  1794   000F2C  58DE               	subwfb	postinc2,w,c
  1795   000F2E  A0D8               	btfss	status,0,c
  1796   000F30  EF9C  F007         	goto	u941
  1797   000F34  EF9E  F007         	goto	u940
  1798   000F38                     u941:
  1799   000F38  EFE0  F007         	goto	l2284
  1800   000F3C                     u940:
  1801   000F3C                     
  1802                           ;color.c: 135:         for (int j = 0; j <= 15; j++) {
  1803   000F3C  0E00               	movlw	0
  1804   000F3E  6E2C               	movwf	(motor_response@j_485+1)^0,c
  1805   000F40  0E00               	movlw	0
  1806   000F42  6E2B               	movwf	motor_response@j_485^0,c
  1807   000F44                     l2276:
  1808                           
  1809                           ;color.c: 136:             turnLeft(mL, mR);
  1810   000F44  C023  F01C         	movff	motor_response@mL,turnLeft@mL
  1811   000F48  C024  F01D         	movff	motor_response@mL+1,turnLeft@mL+1
  1812   000F4C  C025  F01E         	movff	motor_response@mR,turnLeft@mR
  1813   000F50  C026  F01F         	movff	motor_response@mR+1,turnLeft@mR+1
  1814   000F54  EC06  F010         	call	_turnLeft	;wreg free
  1815   000F58                     
  1816                           ;color.c: 137:             _delay((unsigned long)((30)*(64000000/4000.0)));
  1817   000F58  0E03               	movlw	3
  1818   000F5A  6E28               	movwf	(??_motor_response+1)^0,c
  1819   000F5C  0E70               	movlw	112
  1820   000F5E  6E27               	movwf	??_motor_response^0,c
  1821   000F60  0E5C               	movlw	92
  1822   000F62                     u1647:
  1823   000F62  2EE8               	decfsz	wreg,f,c
  1824   000F64  D7FE               	bra	u1647
  1825   000F66  2E27               	decfsz	??_motor_response^0,f,c
  1826   000F68  D7FC               	bra	u1647
  1827   000F6A  2E28               	decfsz	(??_motor_response+1)^0,f,c
  1828   000F6C  D7FA               	bra	u1647
  1829   000F6E  D000               	nop2	
  1830   000F70                     
  1831                           ;color.c: 138:             norm_stop(mL, mR);
  1832   000F70  C023  F01C         	movff	motor_response@mL,norm_stop@mL
  1833   000F74  C024  F01D         	movff	motor_response@mL+1,norm_stop@mL+1
  1834   000F78  C025  F01E         	movff	motor_response@mR,norm_stop@mR
  1835   000F7C  C026  F01F         	movff	motor_response@mR+1,norm_stop@mR+1
  1836   000F80  ECB3  F011         	call	_norm_stop	;wreg free
  1837                           
  1838                           ;color.c: 139:             _delay((unsigned long)((30)*(64000000/4000.0)));
  1839   000F84  0E03               	movlw	3
  1840   000F86  6E28               	movwf	(??_motor_response+1)^0,c
  1841   000F88  0E70               	movlw	112
  1842   000F8A  6E27               	movwf	??_motor_response^0,c
  1843   000F8C  0E5C               	movlw	92
  1844   000F8E                     u1657:
  1845   000F8E  2EE8               	decfsz	wreg,f,c
  1846   000F90  D7FE               	bra	u1657
  1847   000F92  2E27               	decfsz	??_motor_response^0,f,c
  1848   000F94  D7FC               	bra	u1657
  1849   000F96  2E28               	decfsz	(??_motor_response+1)^0,f,c
  1850   000F98  D7FA               	bra	u1657
  1851   000F9A  D000               	nop2	
  1852   000F9C                     
  1853                           ;color.c: 140:         }
  1854   000F9C  4A2B               	infsnz	motor_response@j_485^0,f,c
  1855   000F9E  2A2C               	incf	(motor_response@j_485+1)^0,f,c
  1856   000FA0  BE2C               	btfsc	(motor_response@j_485+1)^0,7,c
  1857   000FA2  EFDC  F007         	goto	u951
  1858   000FA6  502C               	movf	(motor_response@j_485+1)^0,w,c
  1859   000FA8  E109               	bnz	u950
  1860   000FAA  0E10               	movlw	16
  1861   000FAC  5C2B               	subwf	motor_response@j_485^0,w,c
  1862   000FAE  A0D8               	btfss	status,0,c
  1863   000FB0  EFDC  F007         	goto	u951
  1864   000FB4  EFDE  F007         	goto	u950
  1865   000FB8                     u951:
  1866   000FB8  EFA2  F007         	goto	l2276
  1867   000FBC                     u950:
  1868   000FBC  EF9E  F00A         	goto	l2398
  1869   000FC0                     l2284:
  1870   000FC0  C021  FFD9         	movff	motor_response@temp,fsr2l
  1871   000FC4  C022  FFDA         	movff	motor_response@temp+1,fsr2h
  1872   000FC8  0EE9               	movlw	233
  1873   000FCA  5CDE               	subwf	postinc2,w,c
  1874   000FCC  0E03               	movlw	3
  1875   000FCE  58DE               	subwfb	postinc2,w,c
  1876   000FD0  A0D8               	btfss	status,0,c
  1877   000FD2  EFED  F007         	goto	u961
  1878   000FD6  EFEF  F007         	goto	u960
  1879   000FDA                     u961:
  1880   000FDA  EF31  F008         	goto	l2300
  1881   000FDE                     u960:
  1882   000FDE                     
  1883                           ;color.c: 143:         for (int j = 0; j <= 29; j++) {
  1884   000FDE  0E00               	movlw	0
  1885   000FE0  6E2E               	movwf	(motor_response@j_486+1)^0,c
  1886   000FE2  0E00               	movlw	0
  1887   000FE4  6E2D               	movwf	motor_response@j_486^0,c
  1888   000FE6                     l2292:
  1889                           
  1890                           ;color.c: 144:             turnLeft(mL, mR);
  1891   000FE6  C023  F01C         	movff	motor_response@mL,turnLeft@mL
  1892   000FEA  C024  F01D         	movff	motor_response@mL+1,turnLeft@mL+1
  1893   000FEE  C025  F01E         	movff	motor_response@mR,turnLeft@mR
  1894   000FF2  C026  F01F         	movff	motor_response@mR+1,turnLeft@mR+1
  1895   000FF6  EC06  F010         	call	_turnLeft	;wreg free
  1896   000FFA                     
  1897                           ;color.c: 145:             _delay((unsigned long)((30)*(64000000/4000.0)));
  1898   000FFA  0E03               	movlw	3
  1899   000FFC  6E28               	movwf	(??_motor_response+1)^0,c
  1900   000FFE  0E70               	movlw	112
  1901   001000  6E27               	movwf	??_motor_response^0,c
  1902   001002  0E5C               	movlw	92
  1903   001004                     u1667:
  1904   001004  2EE8               	decfsz	wreg,f,c
  1905   001006  D7FE               	bra	u1667
  1906   001008  2E27               	decfsz	??_motor_response^0,f,c
  1907   00100A  D7FC               	bra	u1667
  1908   00100C  2E28               	decfsz	(??_motor_response+1)^0,f,c
  1909   00100E  D7FA               	bra	u1667
  1910   001010  D000               	nop2	
  1911   001012                     
  1912                           ;color.c: 146:             norm_stop(mL, mR);
  1913   001012  C023  F01C         	movff	motor_response@mL,norm_stop@mL
  1914   001016  C024  F01D         	movff	motor_response@mL+1,norm_stop@mL+1
  1915   00101A  C025  F01E         	movff	motor_response@mR,norm_stop@mR
  1916   00101E  C026  F01F         	movff	motor_response@mR+1,norm_stop@mR+1
  1917   001022  ECB3  F011         	call	_norm_stop	;wreg free
  1918                           
  1919                           ;color.c: 147:             _delay((unsigned long)((30)*(64000000/4000.0)));
  1920   001026  0E03               	movlw	3
  1921   001028  6E28               	movwf	(??_motor_response+1)^0,c
  1922   00102A  0E70               	movlw	112
  1923   00102C  6E27               	movwf	??_motor_response^0,c
  1924   00102E  0E5C               	movlw	92
  1925   001030                     u1677:
  1926   001030  2EE8               	decfsz	wreg,f,c
  1927   001032  D7FE               	bra	u1677
  1928   001034  2E27               	decfsz	??_motor_response^0,f,c
  1929   001036  D7FC               	bra	u1677
  1930   001038  2E28               	decfsz	(??_motor_response+1)^0,f,c
  1931   00103A  D7FA               	bra	u1677
  1932   00103C  D000               	nop2	
  1933   00103E                     
  1934                           ;color.c: 148:         }
  1935   00103E  4A2D               	infsnz	motor_response@j_486^0,f,c
  1936   001040  2A2E               	incf	(motor_response@j_486+1)^0,f,c
  1937   001042  BE2E               	btfsc	(motor_response@j_486+1)^0,7,c
  1938   001044  EF2D  F008         	goto	u971
  1939   001048  502E               	movf	(motor_response@j_486+1)^0,w,c
  1940   00104A  E109               	bnz	u970
  1941   00104C  0E1E               	movlw	30
  1942   00104E  5C2D               	subwf	motor_response@j_486^0,w,c
  1943   001050  A0D8               	btfss	status,0,c
  1944   001052  EF2D  F008         	goto	u971
  1945   001056  EF2F  F008         	goto	u970
  1946   00105A                     u971:
  1947   00105A  EFF3  F007         	goto	l2292
  1948   00105E                     u970:
  1949   00105E  EF9E  F00A         	goto	l2398
  1950   001062                     l2300:
  1951   001062  C021  FFD9         	movff	motor_response@temp,fsr2l
  1952   001066  C022  FFDA         	movff	motor_response@temp+1,fsr2h
  1953   00106A  0EE1               	movlw	225
  1954   00106C  5CDE               	subwf	postinc2,w,c
  1955   00106E  0E2E               	movlw	46
  1956   001070  58DE               	subwfb	postinc2,w,c
  1957   001072  A0D8               	btfss	status,0,c
  1958   001074  EF3E  F008         	goto	u981
  1959   001078  EF40  F008         	goto	u980
  1960   00107C                     u981:
  1961   00107C  EFD0  F008         	goto	l2326
  1962   001080                     u980:
  1963   001080  EE20 F002          	lfsr	2,2
  1964   001084  5021               	movf	motor_response@temp^0,w,c
  1965   001086  26D9               	addwf	fsr2l,f,c
  1966   001088  5022               	movf	(motor_response@temp+1)^0,w,c
  1967   00108A  22DA               	addwfc	fsr2h,f,c
  1968   00108C  0E59               	movlw	89
  1969   00108E  5CDE               	subwf	postinc2,w,c
  1970   001090  0E1B               	movlw	27
  1971   001092  58DE               	subwfb	postinc2,w,c
  1972   001094  A0D8               	btfss	status,0,c
  1973   001096  EF4F  F008         	goto	u991
  1974   00109A  EF51  F008         	goto	u990
  1975   00109E                     u991:
  1976   00109E  EFD0  F008         	goto	l2326
  1977   0010A2                     u990:
  1978   0010A2  EE20 F004          	lfsr	2,4
  1979   0010A6  5021               	movf	motor_response@temp^0,w,c
  1980   0010A8  26D9               	addwf	fsr2l,f,c
  1981   0010AA  5022               	movf	(motor_response@temp+1)^0,w,c
  1982   0010AC  22DA               	addwfc	fsr2h,f,c
  1983   0010AE  0E94               	movlw	148
  1984   0010B0  5CDE               	subwf	postinc2,w,c
  1985   0010B2  0E11               	movlw	17
  1986   0010B4  58DE               	subwfb	postinc2,w,c
  1987   0010B6  B0D8               	btfsc	status,0,c
  1988   0010B8  EF60  F008         	goto	u1001
  1989   0010BC  EF62  F008         	goto	u1000
  1990   0010C0                     u1001:
  1991   0010C0  EFD0  F008         	goto	l2326
  1992   0010C4                     u1000:
  1993   0010C4                     
  1994                           ;color.c: 151:         reverse(mL, mR);
  1995   0010C4  C023  F01C         	movff	motor_response@mL,reverse@mL
  1996   0010C8  C024  F01D         	movff	motor_response@mL+1,reverse@mL+1
  1997   0010CC  C025  F01E         	movff	motor_response@mR,reverse@mR
  1998   0010D0  C026  F01F         	movff	motor_response@mR+1,reverse@mR+1
  1999   0010D4  ECE8  F00D         	call	_reverse	;wreg free
  2000   0010D8                     
  2001                           ;color.c: 152:         _delay((unsigned long)((50)*(64000000/4000.0)));
  2002   0010D8  0E05               	movlw	5
  2003   0010DA  6E28               	movwf	(??_motor_response+1)^0,c
  2004   0010DC  0E0F               	movlw	15
  2005   0010DE  6E27               	movwf	??_motor_response^0,c
  2006   0010E0  0EF1               	movlw	241
  2007   0010E2                     u1687:
  2008   0010E2  2EE8               	decfsz	wreg,f,c
  2009   0010E4  D7FE               	bra	u1687
  2010   0010E6  2E27               	decfsz	??_motor_response^0,f,c
  2011   0010E8  D7FC               	bra	u1687
  2012   0010EA  2E28               	decfsz	(??_motor_response+1)^0,f,c
  2013   0010EC  D7FA               	bra	u1687
  2014   0010EE  F000               	nop	
  2015   0010F0                     
  2016                           ;color.c: 153:         norm_stop(mL, mR);
  2017   0010F0  C023  F01C         	movff	motor_response@mL,norm_stop@mL
  2018   0010F4  C024  F01D         	movff	motor_response@mL+1,norm_stop@mL+1
  2019   0010F8  C025  F01E         	movff	motor_response@mR,norm_stop@mR
  2020   0010FC  C026  F01F         	movff	motor_response@mR+1,norm_stop@mR+1
  2021   001100  ECB3  F011         	call	_norm_stop	;wreg free
  2022                           
  2023                           ;color.c: 154:         _delay((unsigned long)((100)*(64000000/4000.0)));
  2024   001104  0E09               	movlw	9
  2025   001106  6E28               	movwf	(??_motor_response+1)^0,c
  2026   001108  0E1E               	movlw	30
  2027   00110A  6E27               	movwf	??_motor_response^0,c
  2028   00110C  0EE4               	movlw	228
  2029   00110E                     u1697:
  2030   00110E  2EE8               	decfsz	wreg,f,c
  2031   001110  D7FE               	bra	u1697
  2032   001112  2E27               	decfsz	??_motor_response^0,f,c
  2033   001114  D7FC               	bra	u1697
  2034   001116  2E28               	decfsz	(??_motor_response+1)^0,f,c
  2035   001118  D7FA               	bra	u1697
  2036   00111A  D000               	nop2	
  2037   00111C                     
  2038                           ;color.c: 155:         for (int j = 0; j <= 16; j++) {
  2039   00111C  0E00               	movlw	0
  2040   00111E  6E30               	movwf	(motor_response@j_487+1)^0,c
  2041   001120  0E00               	movlw	0
  2042   001122  6E2F               	movwf	motor_response@j_487^0,c
  2043   001124                     l2318:
  2044                           
  2045                           ;color.c: 156:             turnRight(mL, mR);
  2046   001124  C023  F01C         	movff	motor_response@mL,turnRight@mL
  2047   001128  C024  F01D         	movff	motor_response@mL+1,turnRight@mL+1
  2048   00112C  C025  F01E         	movff	motor_response@mR,turnRight@mR
  2049   001130  C026  F01F         	movff	motor_response@mR+1,turnRight@mR+1
  2050   001134  ECCD  F00F         	call	_turnRight	;wreg free
  2051   001138                     
  2052                           ;color.c: 157:             _delay((unsigned long)((30)*(64000000/4000.0)));
  2053   001138  0E03               	movlw	3
  2054   00113A  6E28               	movwf	(??_motor_response+1)^0,c
  2055   00113C  0E70               	movlw	112
  2056   00113E  6E27               	movwf	??_motor_response^0,c
  2057   001140  0E5C               	movlw	92
  2058   001142                     u1707:
  2059   001142  2EE8               	decfsz	wreg,f,c
  2060   001144  D7FE               	bra	u1707
  2061   001146  2E27               	decfsz	??_motor_response^0,f,c
  2062   001148  D7FC               	bra	u1707
  2063   00114A  2E28               	decfsz	(??_motor_response+1)^0,f,c
  2064   00114C  D7FA               	bra	u1707
  2065   00114E  D000               	nop2	
  2066   001150                     
  2067                           ;color.c: 158:             norm_stop(mL, mR);
  2068   001150  C023  F01C         	movff	motor_response@mL,norm_stop@mL
  2069   001154  C024  F01D         	movff	motor_response@mL+1,norm_stop@mL+1
  2070   001158  C025  F01E         	movff	motor_response@mR,norm_stop@mR
  2071   00115C  C026  F01F         	movff	motor_response@mR+1,norm_stop@mR+1
  2072   001160  ECB3  F011         	call	_norm_stop	;wreg free
  2073                           
  2074                           ;color.c: 159:             _delay((unsigned long)((30)*(64000000/4000.0)));
  2075   001164  0E03               	movlw	3
  2076   001166  6E28               	movwf	(??_motor_response+1)^0,c
  2077   001168  0E70               	movlw	112
  2078   00116A  6E27               	movwf	??_motor_response^0,c
  2079   00116C  0E5C               	movlw	92
  2080   00116E                     u1717:
  2081   00116E  2EE8               	decfsz	wreg,f,c
  2082   001170  D7FE               	bra	u1717
  2083   001172  2E27               	decfsz	??_motor_response^0,f,c
  2084   001174  D7FC               	bra	u1717
  2085   001176  2E28               	decfsz	(??_motor_response+1)^0,f,c
  2086   001178  D7FA               	bra	u1717
  2087   00117A  D000               	nop2	
  2088   00117C                     
  2089                           ;color.c: 160:         }
  2090   00117C  4A2F               	infsnz	motor_response@j_487^0,f,c
  2091   00117E  2A30               	incf	(motor_response@j_487+1)^0,f,c
  2092   001180  BE30               	btfsc	(motor_response@j_487+1)^0,7,c
  2093   001182  EFCC  F008         	goto	u1011
  2094   001186  5030               	movf	(motor_response@j_487+1)^0,w,c
  2095   001188  E109               	bnz	u1010
  2096   00118A  0E11               	movlw	17
  2097   00118C  5C2F               	subwf	motor_response@j_487^0,w,c
  2098   00118E  A0D8               	btfss	status,0,c
  2099   001190  EFCC  F008         	goto	u1011
  2100   001194  EFCE  F008         	goto	u1010
  2101   001198                     u1011:
  2102   001198  EF92  F008         	goto	l2318
  2103   00119C                     u1010:
  2104   00119C  EF9E  F00A         	goto	l2398
  2105   0011A0                     l2326:
  2106   0011A0  C021  FFD9         	movff	motor_response@temp,fsr2l
  2107   0011A4  C022  FFDA         	movff	motor_response@temp+1,fsr2h
  2108   0011A8  0E11               	movlw	17
  2109   0011AA  5CDE               	subwf	postinc2,w,c
  2110   0011AC  0E27               	movlw	39
  2111   0011AE  58DE               	subwfb	postinc2,w,c
  2112   0011B0  A0D8               	btfss	status,0,c
  2113   0011B2  EFDD  F008         	goto	u1021
  2114   0011B6  EFDF  F008         	goto	u1020
  2115   0011BA                     u1021:
  2116   0011BA  EF7A  F009         	goto	l2354
  2117   0011BE                     u1020:
  2118   0011BE  EE20 F002          	lfsr	2,2
  2119   0011C2  5021               	movf	motor_response@temp^0,w,c
  2120   0011C4  26D9               	addwf	fsr2l,f,c
  2121   0011C6  5022               	movf	(motor_response@temp+1)^0,w,c
  2122   0011C8  22DA               	addwfc	fsr2h,f,c
  2123   0011CA  0E59               	movlw	89
  2124   0011CC  5CDE               	subwf	postinc2,w,c
  2125   0011CE  0E1B               	movlw	27
  2126   0011D0  58DE               	subwfb	postinc2,w,c
  2127   0011D2  A0D8               	btfss	status,0,c
  2128   0011D4  EFEE  F008         	goto	u1031
  2129   0011D8  EFF0  F008         	goto	u1030
  2130   0011DC                     u1031:
  2131   0011DC  EF7A  F009         	goto	l2354
  2132   0011E0                     u1030:
  2133   0011E0  EE20 F006          	lfsr	2,6
  2134   0011E4  5021               	movf	motor_response@temp^0,w,c
  2135   0011E6  26D9               	addwf	fsr2l,f,c
  2136   0011E8  5022               	movf	(motor_response@temp+1)^0,w,c
  2137   0011EA  22DA               	addwfc	fsr2h,f,c
  2138   0011EC  0E21               	movlw	33
  2139   0011EE  5CDE               	subwf	postinc2,w,c
  2140   0011F0  0E4E               	movlw	78
  2141   0011F2  58DE               	subwfb	postinc2,w,c
  2142   0011F4  A0D8               	btfss	status,0,c
  2143   0011F6  EFFF  F008         	goto	u1041
  2144   0011FA  EF01  F009         	goto	u1040
  2145   0011FE                     u1041:
  2146   0011FE  EF7A  F009         	goto	l2354
  2147   001202                     u1040:
  2148   001202  EE20 F006          	lfsr	2,6
  2149   001206  5021               	movf	motor_response@temp^0,w,c
  2150   001208  26D9               	addwf	fsr2l,f,c
  2151   00120A  5022               	movf	(motor_response@temp+1)^0,w,c
  2152   00120C  22DA               	addwfc	fsr2h,f,c
  2153   00120E  0EF0               	movlw	240
  2154   001210  5CDE               	subwf	postinc2,w,c
  2155   001212  0E55               	movlw	85
  2156   001214  58DE               	subwfb	postinc2,w,c
  2157   001216  B0D8               	btfsc	status,0,c
  2158   001218  EF10  F009         	goto	u1051
  2159   00121C  EF12  F009         	goto	u1050
  2160   001220                     u1051:
  2161   001220  EF7A  F009         	goto	l2354
  2162   001224                     u1050:
  2163   001224                     
  2164                           ;color.c: 163:         reverse(mL, mR);
  2165   001224  C023  F01C         	movff	motor_response@mL,reverse@mL
  2166   001228  C024  F01D         	movff	motor_response@mL+1,reverse@mL+1
  2167   00122C  C025  F01E         	movff	motor_response@mR,reverse@mR
  2168   001230  C026  F01F         	movff	motor_response@mR+1,reverse@mR+1
  2169   001234  ECE8  F00D         	call	_reverse	;wreg free
  2170   001238                     
  2171                           ;color.c: 164:         _delay((unsigned long)((10)*(64000000/4000.0)));
  2172   001238  0ED0               	movlw	208
  2173   00123A  6E27               	movwf	??_motor_response^0,c
  2174   00123C  0ECA               	movlw	202
  2175   00123E                     u1727:
  2176   00123E  2EE8               	decfsz	wreg,f,c
  2177   001240  D7FE               	bra	u1727
  2178   001242  2E27               	decfsz	??_motor_response^0,f,c
  2179   001244  D7FC               	bra	u1727
  2180   001246                     
  2181                           ;color.c: 165:         norm_stop(mL, mR);
  2182   001246  C023  F01C         	movff	motor_response@mL,norm_stop@mL
  2183   00124A  C024  F01D         	movff	motor_response@mL+1,norm_stop@mL+1
  2184   00124E  C025  F01E         	movff	motor_response@mR,norm_stop@mR
  2185   001252  C026  F01F         	movff	motor_response@mR+1,norm_stop@mR+1
  2186   001256  ECB3  F011         	call	_norm_stop	;wreg free
  2187                           
  2188                           ;color.c: 166:         _delay((unsigned long)((300)*(64000000/4000.0)));
  2189   00125A  0E19               	movlw	25
  2190   00125C  6E28               	movwf	(??_motor_response+1)^0,c
  2191   00125E  0E5A               	movlw	90
  2192   001260  6E27               	movwf	??_motor_response^0,c
  2193   001262  0EB2               	movlw	178
  2194   001264                     u1737:
  2195   001264  2EE8               	decfsz	wreg,f,c
  2196   001266  D7FE               	bra	u1737
  2197   001268  2E27               	decfsz	??_motor_response^0,f,c
  2198   00126A  D7FC               	bra	u1737
  2199   00126C  2E28               	decfsz	(??_motor_response+1)^0,f,c
  2200   00126E  D7FA               	bra	u1737
  2201   001270                     
  2202                           ;color.c: 167:         for (int j = 0; j <= 12; j++) {
  2203   001270  0E00               	movlw	0
  2204   001272  6E32               	movwf	(motor_response@j_488+1)^0,c
  2205   001274  0E00               	movlw	0
  2206   001276  6E31               	movwf	motor_response@j_488^0,c
  2207   001278                     l2346:
  2208                           
  2209                           ;color.c: 168:             turnLeft(mL, mR);
  2210   001278  C023  F01C         	movff	motor_response@mL,turnLeft@mL
  2211   00127C  C024  F01D         	movff	motor_response@mL+1,turnLeft@mL+1
  2212   001280  C025  F01E         	movff	motor_response@mR,turnLeft@mR
  2213   001284  C026  F01F         	movff	motor_response@mR+1,turnLeft@mR+1
  2214   001288  EC06  F010         	call	_turnLeft	;wreg free
  2215   00128C                     
  2216                           ;color.c: 169:             _delay((unsigned long)((30)*(64000000/4000.0)));
  2217   00128C  0E03               	movlw	3
  2218   00128E  6E28               	movwf	(??_motor_response+1)^0,c
  2219   001290  0E70               	movlw	112
  2220   001292  6E27               	movwf	??_motor_response^0,c
  2221   001294  0E5C               	movlw	92
  2222   001296                     u1747:
  2223   001296  2EE8               	decfsz	wreg,f,c
  2224   001298  D7FE               	bra	u1747
  2225   00129A  2E27               	decfsz	??_motor_response^0,f,c
  2226   00129C  D7FC               	bra	u1747
  2227   00129E  2E28               	decfsz	(??_motor_response+1)^0,f,c
  2228   0012A0  D7FA               	bra	u1747
  2229   0012A2  D000               	nop2	
  2230   0012A4                     
  2231                           ;color.c: 170:             norm_stop(mL, mR);
  2232   0012A4  C023  F01C         	movff	motor_response@mL,norm_stop@mL
  2233   0012A8  C024  F01D         	movff	motor_response@mL+1,norm_stop@mL+1
  2234   0012AC  C025  F01E         	movff	motor_response@mR,norm_stop@mR
  2235   0012B0  C026  F01F         	movff	motor_response@mR+1,norm_stop@mR+1
  2236   0012B4  ECB3  F011         	call	_norm_stop	;wreg free
  2237                           
  2238                           ;color.c: 171:             _delay((unsigned long)((30)*(64000000/4000.0)));
  2239   0012B8  0E03               	movlw	3
  2240   0012BA  6E28               	movwf	(??_motor_response+1)^0,c
  2241   0012BC  0E70               	movlw	112
  2242   0012BE  6E27               	movwf	??_motor_response^0,c
  2243   0012C0  0E5C               	movlw	92
  2244   0012C2                     u1757:
  2245   0012C2  2EE8               	decfsz	wreg,f,c
  2246   0012C4  D7FE               	bra	u1757
  2247   0012C6  2E27               	decfsz	??_motor_response^0,f,c
  2248   0012C8  D7FC               	bra	u1757
  2249   0012CA  2E28               	decfsz	(??_motor_response+1)^0,f,c
  2250   0012CC  D7FA               	bra	u1757
  2251   0012CE  D000               	nop2	
  2252   0012D0                     
  2253                           ;color.c: 172:         }
  2254   0012D0  4A31               	infsnz	motor_response@j_488^0,f,c
  2255   0012D2  2A32               	incf	(motor_response@j_488+1)^0,f,c
  2256   0012D4  BE32               	btfsc	(motor_response@j_488+1)^0,7,c
  2257   0012D6  EF76  F009         	goto	u1061
  2258   0012DA  5032               	movf	(motor_response@j_488+1)^0,w,c
  2259   0012DC  E109               	bnz	u1060
  2260   0012DE  0E0D               	movlw	13
  2261   0012E0  5C31               	subwf	motor_response@j_488^0,w,c
  2262   0012E2  A0D8               	btfss	status,0,c
  2263   0012E4  EF76  F009         	goto	u1061
  2264   0012E8  EF78  F009         	goto	u1060
  2265   0012EC                     u1061:
  2266   0012EC  EF3C  F009         	goto	l2346
  2267   0012F0                     u1060:
  2268   0012F0  EF9E  F00A         	goto	l2398
  2269   0012F4                     l2354:
  2270   0012F4  C021  FFD9         	movff	motor_response@temp,fsr2l
  2271   0012F8  C022  FFDA         	movff	motor_response@temp+1,fsr2h
  2272   0012FC  0E29               	movlw	41
  2273   0012FE  5CDE               	subwf	postinc2,w,c
  2274   001300  0E23               	movlw	35
  2275   001302  58DE               	subwfb	postinc2,w,c
  2276   001304  A0D8               	btfss	status,0,c
  2277   001306  EF87  F009         	goto	u1071
  2278   00130A  EF89  F009         	goto	u1070
  2279   00130E                     u1071:
  2280   00130E  EF1D  F00A         	goto	l2378
  2281   001312                     u1070:
  2282   001312  C021  FFD9         	movff	motor_response@temp,fsr2l
  2283   001316  C022  FFDA         	movff	motor_response@temp+1,fsr2h
  2284   00131A  0E1C               	movlw	28
  2285   00131C  5CDE               	subwf	postinc2,w,c
  2286   00131E  0E25               	movlw	37
  2287   001320  58DE               	subwfb	postinc2,w,c
  2288   001322  B0D8               	btfsc	status,0,c
  2289   001324  EF96  F009         	goto	u1081
  2290   001328  EF98  F009         	goto	u1080
  2291   00132C                     u1081:
  2292   00132C  EF1D  F00A         	goto	l2378
  2293   001330                     u1080:
  2294   001330  EE20 F002          	lfsr	2,2
  2295   001334  5021               	movf	motor_response@temp^0,w,c
  2296   001336  26D9               	addwf	fsr2l,f,c
  2297   001338  5022               	movf	(motor_response@temp+1)^0,w,c
  2298   00133A  22DA               	addwfc	fsr2h,f,c
  2299   00133C  0E59               	movlw	89
  2300   00133E  5CDE               	subwf	postinc2,w,c
  2301   001340  0E1B               	movlw	27
  2302   001342  58DE               	subwfb	postinc2,w,c
  2303   001344  A0D8               	btfss	status,0,c
  2304   001346  EFA7  F009         	goto	u1091
  2305   00134A  EFA9  F009         	goto	u1090
  2306   00134E                     u1091:
  2307   00134E  EF1D  F00A         	goto	l2378
  2308   001352                     u1090:
  2309   001352  EE20 F006          	lfsr	2,6
  2310   001356  5021               	movf	motor_response@temp^0,w,c
  2311   001358  26D9               	addwf	fsr2l,f,c
  2312   00135A  5022               	movf	(motor_response@temp+1)^0,w,c
  2313   00135C  22DA               	addwfc	fsr2h,f,c
  2314   00135E  0EC9               	movlw	201
  2315   001360  5CDE               	subwf	postinc2,w,c
  2316   001362  0E32               	movlw	50
  2317   001364  58DE               	subwfb	postinc2,w,c
  2318   001366  A0D8               	btfss	status,0,c
  2319   001368  EFB8  F009         	goto	u1101
  2320   00136C  EFBA  F009         	goto	u1100
  2321   001370                     u1101:
  2322   001370  EF1D  F00A         	goto	l2378
  2323   001374                     u1100:
  2324   001374  EE20 F006          	lfsr	2,6
  2325   001378  5021               	movf	motor_response@temp^0,w,c
  2326   00137A  26D9               	addwf	fsr2l,f,c
  2327   00137C  5022               	movf	(motor_response@temp+1)^0,w,c
  2328   00137E  22DA               	addwfc	fsr2h,f,c
  2329   001380  0E98               	movlw	152
  2330   001382  5CDE               	subwf	postinc2,w,c
  2331   001384  0E3A               	movlw	58
  2332   001386  58DE               	subwfb	postinc2,w,c
  2333   001388  B0D8               	btfsc	status,0,c
  2334   00138A  EFC9  F009         	goto	u1111
  2335   00138E  EFCB  F009         	goto	u1110
  2336   001392                     u1111:
  2337   001392  EF1D  F00A         	goto	l2378
  2338   001396                     u1110:
  2339   001396                     
  2340                           ;color.c: 175:         for (int j = 0; j <= 23; j++) {
  2341   001396  0E00               	movlw	0
  2342   001398  6E34               	movwf	(motor_response@j_489+1)^0,c
  2343   00139A  0E00               	movlw	0
  2344   00139C  6E33               	movwf	motor_response@j_489^0,c
  2345   00139E  BE34               	btfsc	(motor_response@j_489+1)^0,7,c
  2346   0013A0  EFDB  F009         	goto	u1121
  2347   0013A4  5034               	movf	(motor_response@j_489+1)^0,w,c
  2348   0013A6  E109               	bnz	u1120
  2349   0013A8  0E18               	movlw	24
  2350   0013AA  5C33               	subwf	motor_response@j_489^0,w,c
  2351   0013AC  A0D8               	btfss	status,0,c
  2352   0013AE  EFDB  F009         	goto	u1121
  2353   0013B2  EFDD  F009         	goto	u1120
  2354   0013B6                     u1121:
  2355   0013B6  EFDF  F009         	goto	l2370
  2356   0013BA                     u1120:
  2357   0013BA  EF9E  F00A         	goto	l2398
  2358   0013BE                     l2370:
  2359                           
  2360                           ;color.c: 176:             turnRight(mL, mR);
  2361   0013BE  C023  F01C         	movff	motor_response@mL,turnRight@mL
  2362   0013C2  C024  F01D         	movff	motor_response@mL+1,turnRight@mL+1
  2363   0013C6  C025  F01E         	movff	motor_response@mR,turnRight@mR
  2364   0013CA  C026  F01F         	movff	motor_response@mR+1,turnRight@mR+1
  2365   0013CE  ECCD  F00F         	call	_turnRight	;wreg free
  2366   0013D2                     
  2367                           ;color.c: 177:             _delay((unsigned long)((30)*(64000000/4000.0)));
  2368   0013D2  0E03               	movlw	3
  2369   0013D4  6E28               	movwf	(??_motor_response+1)^0,c
  2370   0013D6  0E70               	movlw	112
  2371   0013D8  6E27               	movwf	??_motor_response^0,c
  2372   0013DA  0E5C               	movlw	92
  2373   0013DC                     u1767:
  2374   0013DC  2EE8               	decfsz	wreg,f,c
  2375   0013DE  D7FE               	bra	u1767
  2376   0013E0  2E27               	decfsz	??_motor_response^0,f,c
  2377   0013E2  D7FC               	bra	u1767
  2378   0013E4  2E28               	decfsz	(??_motor_response+1)^0,f,c
  2379   0013E6  D7FA               	bra	u1767
  2380   0013E8  D000               	nop2	
  2381   0013EA                     
  2382                           ;color.c: 178:             norm_stop(mL, mR);
  2383   0013EA  C023  F01C         	movff	motor_response@mL,norm_stop@mL
  2384   0013EE  C024  F01D         	movff	motor_response@mL+1,norm_stop@mL+1
  2385   0013F2  C025  F01E         	movff	motor_response@mR,norm_stop@mR
  2386   0013F6  C026  F01F         	movff	motor_response@mR+1,norm_stop@mR+1
  2387   0013FA  ECB3  F011         	call	_norm_stop	;wreg free
  2388                           
  2389                           ;color.c: 179:             _delay((unsigned long)((30)*(64000000/4000.0)));
  2390   0013FE  0E03               	movlw	3
  2391   001400  6E28               	movwf	(??_motor_response+1)^0,c
  2392   001402  0E70               	movlw	112
  2393   001404  6E27               	movwf	??_motor_response^0,c
  2394   001406  0E5C               	movlw	92
  2395   001408                     u1777:
  2396   001408  2EE8               	decfsz	wreg,f,c
  2397   00140A  D7FE               	bra	u1777
  2398   00140C  2E27               	decfsz	??_motor_response^0,f,c
  2399   00140E  D7FC               	bra	u1777
  2400   001410  2E28               	decfsz	(??_motor_response+1)^0,f,c
  2401   001412  D7FA               	bra	u1777
  2402   001414  D000               	nop2	
  2403   001416                     
  2404                           ;color.c: 180:         }
  2405   001416  4A33               	infsnz	motor_response@j_489^0,f,c
  2406   001418  2A34               	incf	(motor_response@j_489+1)^0,f,c
  2407   00141A  BE34               	btfsc	(motor_response@j_489+1)^0,7,c
  2408   00141C  EF19  F00A         	goto	u1131
  2409   001420  5034               	movf	(motor_response@j_489+1)^0,w,c
  2410   001422  E109               	bnz	u1130
  2411   001424  0E18               	movlw	24
  2412   001426  5C33               	subwf	motor_response@j_489^0,w,c
  2413   001428  A0D8               	btfss	status,0,c
  2414   00142A  EF19  F00A         	goto	u1131
  2415   00142E  EF1B  F00A         	goto	u1130
  2416   001432                     u1131:
  2417   001432  EFDF  F009         	goto	l2370
  2418   001436                     u1130:
  2419   001436  EF9E  F00A         	goto	l2398
  2420   00143A                     l2378:
  2421   00143A  EE20 F002          	lfsr	2,2
  2422   00143E  5021               	movf	motor_response@temp^0,w,c
  2423   001440  26D9               	addwf	fsr2l,f,c
  2424   001442  5022               	movf	(motor_response@temp+1)^0,w,c
  2425   001444  22DA               	addwfc	fsr2h,f,c
  2426   001446  0EAD               	movlw	173
  2427   001448  5CDE               	subwf	postinc2,w,c
  2428   00144A  0E0D               	movlw	13
  2429   00144C  58DE               	subwfb	postinc2,w,c
  2430   00144E  A0D8               	btfss	status,0,c
  2431   001450  EF2C  F00A         	goto	u1141
  2432   001454  EF2E  F00A         	goto	u1140
  2433   001458                     u1141:
  2434   001458  EF9E  F00A         	goto	l2398
  2435   00145C                     u1140:
  2436   00145C  EE20 F004          	lfsr	2,4
  2437   001460  5021               	movf	motor_response@temp^0,w,c
  2438   001462  26D9               	addwf	fsr2l,f,c
  2439   001464  5022               	movf	(motor_response@temp+1)^0,w,c
  2440   001466  22DA               	addwfc	fsr2h,f,c
  2441   001468  0EA1               	movlw	161
  2442   00146A  5CDE               	subwf	postinc2,w,c
  2443   00146C  0E0F               	movlw	15
  2444   00146E  58DE               	subwfb	postinc2,w,c
  2445   001470  A0D8               	btfss	status,0,c
  2446   001472  EF3D  F00A         	goto	u1151
  2447   001476  EF3F  F00A         	goto	u1150
  2448   00147A                     u1151:
  2449   00147A  EF9E  F00A         	goto	l2398
  2450   00147E                     u1150:
  2451   00147E  C021  FFD9         	movff	motor_response@temp,fsr2l
  2452   001482  C022  FFDA         	movff	motor_response@temp+1,fsr2h
  2453   001486  0E94               	movlw	148
  2454   001488  5CDE               	subwf	postinc2,w,c
  2455   00148A  0E11               	movlw	17
  2456   00148C  58DE               	subwfb	postinc2,w,c
  2457   00148E  B0D8               	btfsc	status,0,c
  2458   001490  EF4C  F00A         	goto	u1161
  2459   001494  EF4E  F00A         	goto	u1160
  2460   001498                     u1161:
  2461   001498  EF9E  F00A         	goto	l2398
  2462   00149C                     u1160:
  2463   00149C                     
  2464                           ;color.c: 183:         for (int j = 0; j <= 20; j++) {
  2465   00149C  0E00               	movlw	0
  2466   00149E  6E36               	movwf	(motor_response@j_490+1)^0,c
  2467   0014A0  0E00               	movlw	0
  2468   0014A2  6E35               	movwf	motor_response@j_490^0,c
  2469   0014A4  BE36               	btfsc	(motor_response@j_490+1)^0,7,c
  2470   0014A6  EF5E  F00A         	goto	u1171
  2471   0014AA  5036               	movf	(motor_response@j_490+1)^0,w,c
  2472   0014AC  E109               	bnz	u1170
  2473   0014AE  0E15               	movlw	21
  2474   0014B0  5C35               	subwf	motor_response@j_490^0,w,c
  2475   0014B2  A0D8               	btfss	status,0,c
  2476   0014B4  EF5E  F00A         	goto	u1171
  2477   0014B8  EF60  F00A         	goto	u1170
  2478   0014BC                     u1171:
  2479   0014BC  EF62  F00A         	goto	l2390
  2480   0014C0                     u1170:
  2481   0014C0  EF9E  F00A         	goto	l2398
  2482   0014C4                     l2390:
  2483                           
  2484                           ;color.c: 184:             turnLeft(mL, mR);
  2485   0014C4  C023  F01C         	movff	motor_response@mL,turnLeft@mL
  2486   0014C8  C024  F01D         	movff	motor_response@mL+1,turnLeft@mL+1
  2487   0014CC  C025  F01E         	movff	motor_response@mR,turnLeft@mR
  2488   0014D0  C026  F01F         	movff	motor_response@mR+1,turnLeft@mR+1
  2489   0014D4  EC06  F010         	call	_turnLeft	;wreg free
  2490   0014D8                     
  2491                           ;color.c: 185:             _delay((unsigned long)((30)*(64000000/4000.0)));
  2492   0014D8  0E03               	movlw	3
  2493   0014DA  6E28               	movwf	(??_motor_response+1)^0,c
  2494   0014DC  0E70               	movlw	112
  2495   0014DE  6E27               	movwf	??_motor_response^0,c
  2496   0014E0  0E5C               	movlw	92
  2497   0014E2                     u1787:
  2498   0014E2  2EE8               	decfsz	wreg,f,c
  2499   0014E4  D7FE               	bra	u1787
  2500   0014E6  2E27               	decfsz	??_motor_response^0,f,c
  2501   0014E8  D7FC               	bra	u1787
  2502   0014EA  2E28               	decfsz	(??_motor_response+1)^0,f,c
  2503   0014EC  D7FA               	bra	u1787
  2504   0014EE  D000               	nop2	
  2505   0014F0                     
  2506                           ;color.c: 186:             norm_stop(mL, mR);
  2507   0014F0  C023  F01C         	movff	motor_response@mL,norm_stop@mL
  2508   0014F4  C024  F01D         	movff	motor_response@mL+1,norm_stop@mL+1
  2509   0014F8  C025  F01E         	movff	motor_response@mR,norm_stop@mR
  2510   0014FC  C026  F01F         	movff	motor_response@mR+1,norm_stop@mR+1
  2511   001500  ECB3  F011         	call	_norm_stop	;wreg free
  2512                           
  2513                           ;color.c: 187:             _delay((unsigned long)((30)*(64000000/4000.0)));
  2514   001504  0E03               	movlw	3
  2515   001506  6E28               	movwf	(??_motor_response+1)^0,c
  2516   001508  0E70               	movlw	112
  2517   00150A  6E27               	movwf	??_motor_response^0,c
  2518   00150C  0E5C               	movlw	92
  2519   00150E                     u1797:
  2520   00150E  2EE8               	decfsz	wreg,f,c
  2521   001510  D7FE               	bra	u1797
  2522   001512  2E27               	decfsz	??_motor_response^0,f,c
  2523   001514  D7FC               	bra	u1797
  2524   001516  2E28               	decfsz	(??_motor_response+1)^0,f,c
  2525   001518  D7FA               	bra	u1797
  2526   00151A  D000               	nop2	
  2527   00151C                     
  2528                           ;color.c: 188:         }
  2529   00151C  4A35               	infsnz	motor_response@j_490^0,f,c
  2530   00151E  2A36               	incf	(motor_response@j_490+1)^0,f,c
  2531   001520  BE36               	btfsc	(motor_response@j_490+1)^0,7,c
  2532   001522  EF9C  F00A         	goto	u1181
  2533   001526  5036               	movf	(motor_response@j_490+1)^0,w,c
  2534   001528  E109               	bnz	u1180
  2535   00152A  0E15               	movlw	21
  2536   00152C  5C35               	subwf	motor_response@j_490^0,w,c
  2537   00152E  A0D8               	btfss	status,0,c
  2538   001530  EF9C  F00A         	goto	u1181
  2539   001534  EF9E  F00A         	goto	u1180
  2540   001538                     u1181:
  2541   001538  EF62  F00A         	goto	l2390
  2542   00153C                     u1180:
  2543   00153C                     l2398:
  2544                           
  2545                           ;color.c: 190:     ctr++;
  2546   00153C  4A4D               	infsnz	_ctr^0,f,c
  2547   00153E  2A4E               	incf	(_ctr+1)^0,f,c
  2548   001540                     l105:
  2549   001540  0012               	return		;funcret
  2550   001542                     __end_of_motor_response:
  2551                           	callstack 0
  2552                           
  2553 ;; *************** function _turnRight *****************
  2554 ;; Defined at:
  2555 ;;		line 144 in file "dc_motor.c"
  2556 ;; Parameters:    Size  Location     Type
  2557 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  2558 ;;		 -> main@mL(9), 
  2559 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  2560 ;;		 -> main@mR(9), 
  2561 ;; Auto vars:     Size  Location     Type
  2562 ;;		None
  2563 ;; Return value:  Size  Location     Type
  2564 ;;                  1    wreg      void 
  2565 ;; Registers used:
  2566 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2567 ;; Tracked objects:
  2568 ;;		On entry : 0/0
  2569 ;;		On exit  : 0/0
  2570 ;;		Unchanged: 0/0
  2571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2572 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2575 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2576 ;;Total ram usage:        4 bytes
  2577 ;; Hardware stack levels used: 1
  2578 ;; Hardware stack levels required when called: 8
  2579 ;; This function calls:
  2580 ;;		_setMotorPWM
  2581 ;; This function is called by:
  2582 ;;		_motor_response
  2583 ;;		_motor_retrace
  2584 ;; This function uses a non-reentrant model
  2585 ;;
  2586                           
  2587                           	psect	text5
  2588   001F9A                     __ptext5:
  2589                           	callstack 0
  2590   001F9A                     _turnRight:
  2591                           	callstack 21
  2592   001F9A                     
  2593                           ;dc_motor.c: 144: void turnRight(DC_motor *mL, DC_motor *mR);dc_motor.c: 145: {;dc_motor
      +                          .c: 146:     mL->power = 50;
  2594   001F9A  C01C  FFD9         	movff	turnRight@mL,fsr2l
  2595   001F9E  C01D  FFDA         	movff	turnRight@mL+1,fsr2h
  2596   001FA2  0E32               	movlw	50
  2597   001FA4  6EDF               	movwf	indf2,c
  2598                           
  2599                           ;dc_motor.c: 147:     mR->power = 50;
  2600   001FA6  C01E  FFD9         	movff	turnRight@mR,fsr2l
  2601   001FAA  C01F  FFDA         	movff	turnRight@mR+1,fsr2h
  2602   001FAE  0E32               	movlw	50
  2603   001FB0  6EDF               	movwf	indf2,c
  2604   001FB2                     
  2605                           ;dc_motor.c: 148:     mL->brakemode = 1;
  2606   001FB2  EE20 F002          	lfsr	2,2
  2607   001FB6  501C               	movf	turnRight@mL^0,w,c
  2608   001FB8  26D9               	addwf	fsr2l,f,c
  2609   001FBA  501D               	movf	(turnRight@mL+1)^0,w,c
  2610   001FBC  22DA               	addwfc	fsr2h,f,c
  2611   001FBE  0E01               	movlw	1
  2612   001FC0  6EDF               	movwf	indf2,c
  2613   001FC2                     
  2614                           ;dc_motor.c: 149:     mR->brakemode = 1;
  2615   001FC2  EE20 F002          	lfsr	2,2
  2616   001FC6  501E               	movf	turnRight@mR^0,w,c
  2617   001FC8  26D9               	addwf	fsr2l,f,c
  2618   001FCA  501F               	movf	(turnRight@mR+1)^0,w,c
  2619   001FCC  22DA               	addwfc	fsr2h,f,c
  2620   001FCE  0E01               	movlw	1
  2621   001FD0  6EDF               	movwf	indf2,c
  2622   001FD2                     
  2623                           ;dc_motor.c: 150:     mR->direction = 0;
  2624   001FD2  EE20 F001          	lfsr	2,1
  2625   001FD6  501E               	movf	turnRight@mR^0,w,c
  2626   001FD8  26D9               	addwf	fsr2l,f,c
  2627   001FDA  501F               	movf	(turnRight@mR+1)^0,w,c
  2628   001FDC  22DA               	addwfc	fsr2h,f,c
  2629   001FDE  0E00               	movlw	0
  2630   001FE0  6EDF               	movwf	indf2,c
  2631   001FE2                     
  2632                           ;dc_motor.c: 151:     mL->direction = 1;
  2633   001FE2  EE20 F001          	lfsr	2,1
  2634   001FE6  501C               	movf	turnRight@mL^0,w,c
  2635   001FE8  26D9               	addwf	fsr2l,f,c
  2636   001FEA  501D               	movf	(turnRight@mL+1)^0,w,c
  2637   001FEC  22DA               	addwfc	fsr2h,f,c
  2638   001FEE  0E01               	movlw	1
  2639   001FF0  6EDF               	movwf	indf2,c
  2640   001FF2                     
  2641                           ;dc_motor.c: 152:     setMotorPWM(mL);
  2642   001FF2  C01C  F016         	movff	turnRight@mL,setMotorPWM@m
  2643   001FF6  C01D  F017         	movff	turnRight@mL+1,setMotorPWM@m+1
  2644   001FFA  EC32  F00D         	call	_setMotorPWM	;wreg free
  2645   001FFE                     
  2646                           ;dc_motor.c: 153:     setMotorPWM(mR);
  2647   001FFE  C01E  F016         	movff	turnRight@mR,setMotorPWM@m
  2648   002002  C01F  F017         	movff	turnRight@mR+1,setMotorPWM@m+1
  2649   002006  EC32  F00D         	call	_setMotorPWM	;wreg free
  2650   00200A  0012               	return		;funcret
  2651   00200C                     __end_of_turnRight:
  2652                           	callstack 0
  2653                           
  2654 ;; *************** function _turnLeft *****************
  2655 ;; Defined at:
  2656 ;;		line 131 in file "dc_motor.c"
  2657 ;; Parameters:    Size  Location     Type
  2658 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  2659 ;;		 -> main@mL(9), 
  2660 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  2661 ;;		 -> main@mR(9), 
  2662 ;; Auto vars:     Size  Location     Type
  2663 ;;		None
  2664 ;; Return value:  Size  Location     Type
  2665 ;;                  1    wreg      void 
  2666 ;; Registers used:
  2667 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2668 ;; Tracked objects:
  2669 ;;		On entry : 0/0
  2670 ;;		On exit  : 0/0
  2671 ;;		Unchanged: 0/0
  2672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2673 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2676 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2677 ;;Total ram usage:        4 bytes
  2678 ;; Hardware stack levels used: 1
  2679 ;; Hardware stack levels required when called: 8
  2680 ;; This function calls:
  2681 ;;		_setMotorPWM
  2682 ;; This function is called by:
  2683 ;;		_motor_response
  2684 ;;		_motor_retrace
  2685 ;; This function uses a non-reentrant model
  2686 ;;
  2687                           
  2688                           	psect	text6
  2689   00200C                     __ptext6:
  2690                           	callstack 0
  2691   00200C                     _turnLeft:
  2692                           	callstack 21
  2693   00200C                     
  2694                           ;dc_motor.c: 131: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 132: {;dc_motor.
      +                          c: 133:     mL->power = 50;
  2695   00200C  C01C  FFD9         	movff	turnLeft@mL,fsr2l
  2696   002010  C01D  FFDA         	movff	turnLeft@mL+1,fsr2h
  2697   002014  0E32               	movlw	50
  2698   002016  6EDF               	movwf	indf2,c
  2699                           
  2700                           ;dc_motor.c: 134:     mR->power = 50;
  2701   002018  C01E  FFD9         	movff	turnLeft@mR,fsr2l
  2702   00201C  C01F  FFDA         	movff	turnLeft@mR+1,fsr2h
  2703   002020  0E32               	movlw	50
  2704   002022  6EDF               	movwf	indf2,c
  2705   002024                     
  2706                           ;dc_motor.c: 135:     mL->brakemode = 1;
  2707   002024  EE20 F002          	lfsr	2,2
  2708   002028  501C               	movf	turnLeft@mL^0,w,c
  2709   00202A  26D9               	addwf	fsr2l,f,c
  2710   00202C  501D               	movf	(turnLeft@mL+1)^0,w,c
  2711   00202E  22DA               	addwfc	fsr2h,f,c
  2712   002030  0E01               	movlw	1
  2713   002032  6EDF               	movwf	indf2,c
  2714   002034                     
  2715                           ;dc_motor.c: 136:     mR->brakemode = 1;
  2716   002034  EE20 F002          	lfsr	2,2
  2717   002038  501E               	movf	turnLeft@mR^0,w,c
  2718   00203A  26D9               	addwf	fsr2l,f,c
  2719   00203C  501F               	movf	(turnLeft@mR+1)^0,w,c
  2720   00203E  22DA               	addwfc	fsr2h,f,c
  2721   002040  0E01               	movlw	1
  2722   002042  6EDF               	movwf	indf2,c
  2723   002044                     
  2724                           ;dc_motor.c: 137:     mL->direction = 0;
  2725   002044  EE20 F001          	lfsr	2,1
  2726   002048  501C               	movf	turnLeft@mL^0,w,c
  2727   00204A  26D9               	addwf	fsr2l,f,c
  2728   00204C  501D               	movf	(turnLeft@mL+1)^0,w,c
  2729   00204E  22DA               	addwfc	fsr2h,f,c
  2730   002050  0E00               	movlw	0
  2731   002052  6EDF               	movwf	indf2,c
  2732   002054                     
  2733                           ;dc_motor.c: 138:     mR->direction = 1;
  2734   002054  EE20 F001          	lfsr	2,1
  2735   002058  501E               	movf	turnLeft@mR^0,w,c
  2736   00205A  26D9               	addwf	fsr2l,f,c
  2737   00205C  501F               	movf	(turnLeft@mR+1)^0,w,c
  2738   00205E  22DA               	addwfc	fsr2h,f,c
  2739   002060  0E01               	movlw	1
  2740   002062  6EDF               	movwf	indf2,c
  2741   002064                     
  2742                           ;dc_motor.c: 139:     setMotorPWM(mL);
  2743   002064  C01C  F016         	movff	turnLeft@mL,setMotorPWM@m
  2744   002068  C01D  F017         	movff	turnLeft@mL+1,setMotorPWM@m+1
  2745   00206C  EC32  F00D         	call	_setMotorPWM	;wreg free
  2746   002070                     
  2747                           ;dc_motor.c: 140:     setMotorPWM(mR);
  2748   002070  C01E  F016         	movff	turnLeft@mR,setMotorPWM@m
  2749   002074  C01F  F017         	movff	turnLeft@mR+1,setMotorPWM@m+1
  2750   002078  EC32  F00D         	call	_setMotorPWM	;wreg free
  2751   00207C  0012               	return		;funcret
  2752   00207E                     __end_of_turnLeft:
  2753                           	callstack 0
  2754                           
  2755 ;; *************** function _reverse *****************
  2756 ;; Defined at:
  2757 ;;		line 189 in file "dc_motor.c"
  2758 ;; Parameters:    Size  Location     Type
  2759 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  2760 ;;		 -> main@mL(9), 
  2761 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  2762 ;;		 -> main@mR(9), 
  2763 ;; Auto vars:     Size  Location     Type
  2764 ;;		None
  2765 ;; Return value:  Size  Location     Type
  2766 ;;                  1    wreg      void 
  2767 ;; Registers used:
  2768 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2769 ;; Tracked objects:
  2770 ;;		On entry : 0/0
  2771 ;;		On exit  : 0/0
  2772 ;;		Unchanged: 0/0
  2773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2774 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2776 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2777 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2778 ;;Total ram usage:        5 bytes
  2779 ;; Hardware stack levels used: 1
  2780 ;; Hardware stack levels required when called: 8
  2781 ;; This function calls:
  2782 ;;		_setMotorPWM
  2783 ;; This function is called by:
  2784 ;;		_motor_response
  2785 ;;		_motor_retrace
  2786 ;; This function uses a non-reentrant model
  2787 ;;
  2788                           
  2789                           	psect	text7
  2790   001BD0                     __ptext7:
  2791                           	callstack 0
  2792   001BD0                     _reverse:
  2793                           	callstack 21
  2794   001BD0                     
  2795                           ;dc_motor.c: 189: void reverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 190: {;dc_motor.c
      +                          : 191:     mL->power = 5;
  2796   001BD0  C01C  FFD9         	movff	reverse@mL,fsr2l
  2797   001BD4  C01D  FFDA         	movff	reverse@mL+1,fsr2h
  2798   001BD8  0E05               	movlw	5
  2799   001BDA  6EDF               	movwf	indf2,c
  2800                           
  2801                           ;dc_motor.c: 192:     mR->power = 5;
  2802   001BDC  C01E  FFD9         	movff	reverse@mR,fsr2l
  2803   001BE0  C01F  FFDA         	movff	reverse@mR+1,fsr2h
  2804   001BE4  0E05               	movlw	5
  2805   001BE6  6EDF               	movwf	indf2,c
  2806   001BE8                     
  2807                           ;dc_motor.c: 193:     mR->direction = 0;
  2808   001BE8  EE20 F001          	lfsr	2,1
  2809   001BEC  501E               	movf	reverse@mR^0,w,c
  2810   001BEE  26D9               	addwf	fsr2l,f,c
  2811   001BF0  501F               	movf	(reverse@mR+1)^0,w,c
  2812   001BF2  22DA               	addwfc	fsr2h,f,c
  2813   001BF4  0E00               	movlw	0
  2814   001BF6  6EDF               	movwf	indf2,c
  2815   001BF8                     
  2816                           ;dc_motor.c: 194:     mL->direction = 0;
  2817   001BF8  EE20 F001          	lfsr	2,1
  2818   001BFC  501C               	movf	reverse@mL^0,w,c
  2819   001BFE  26D9               	addwf	fsr2l,f,c
  2820   001C00  501D               	movf	(reverse@mL+1)^0,w,c
  2821   001C02  22DA               	addwfc	fsr2h,f,c
  2822   001C04  0E00               	movlw	0
  2823   001C06  6EDF               	movwf	indf2,c
  2824   001C08                     
  2825                           ;dc_motor.c: 195:     mL->brakemode = 1;
  2826   001C08  EE20 F002          	lfsr	2,2
  2827   001C0C  501C               	movf	reverse@mL^0,w,c
  2828   001C0E  26D9               	addwf	fsr2l,f,c
  2829   001C10  501D               	movf	(reverse@mL+1)^0,w,c
  2830   001C12  22DA               	addwfc	fsr2h,f,c
  2831   001C14  0E01               	movlw	1
  2832   001C16  6EDF               	movwf	indf2,c
  2833   001C18                     
  2834                           ;dc_motor.c: 196:     mR->brakemode = 1;
  2835   001C18  EE20 F002          	lfsr	2,2
  2836   001C1C  501E               	movf	reverse@mR^0,w,c
  2837   001C1E  26D9               	addwf	fsr2l,f,c
  2838   001C20  501F               	movf	(reverse@mR+1)^0,w,c
  2839   001C22  22DA               	addwfc	fsr2h,f,c
  2840   001C24  0E01               	movlw	1
  2841   001C26  6EDF               	movwf	indf2,c
  2842                           
  2843                           ;dc_motor.c: 197:     while (mL->power <= 100 && mR->power <=100)
  2844   001C28  EF33  F00E         	goto	l558
  2845   001C2C                     l2202:
  2846                           
  2847                           ;dc_motor.c: 198:     {;dc_motor.c: 199:         mL->power++;
  2848   001C2C  C01C  FFD9         	movff	reverse@mL,fsr2l
  2849   001C30  C01D  FFDA         	movff	reverse@mL+1,fsr2h
  2850   001C34  2ADF               	incf	indf2,f,c
  2851                           
  2852                           ;dc_motor.c: 200:         mR->power++;
  2853   001C36  C01E  FFD9         	movff	reverse@mR,fsr2l
  2854   001C3A  C01F  FFDA         	movff	reverse@mR+1,fsr2h
  2855   001C3E  2ADF               	incf	indf2,f,c
  2856   001C40                     
  2857                           ;dc_motor.c: 201:         _delay((unsigned long)((10)*(64000000/4000.0)));
  2858   001C40  0ED0               	movlw	208
  2859   001C42  6E20               	movwf	??_reverse^0,c
  2860   001C44  0ECA               	movlw	202
  2861   001C46                     u1807:
  2862   001C46  2EE8               	decfsz	wreg,f,c
  2863   001C48  D7FE               	bra	u1807
  2864   001C4A  2E20               	decfsz	??_reverse^0,f,c
  2865   001C4C  D7FC               	bra	u1807
  2866   001C4E                     
  2867                           ;dc_motor.c: 202:         setMotorPWM(mL);
  2868   001C4E  C01C  F016         	movff	reverse@mL,setMotorPWM@m
  2869   001C52  C01D  F017         	movff	reverse@mL+1,setMotorPWM@m+1
  2870   001C56  EC32  F00D         	call	_setMotorPWM	;wreg free
  2871   001C5A                     
  2872                           ;dc_motor.c: 203:         setMotorPWM(mR);
  2873   001C5A  C01E  F016         	movff	reverse@mR,setMotorPWM@m
  2874   001C5E  C01F  F017         	movff	reverse@mR+1,setMotorPWM@m+1
  2875   001C62  EC32  F00D         	call	_setMotorPWM	;wreg free
  2876   001C66                     l558:
  2877                           
  2878                           ;dc_motor.c: 197:     while (mL->power <= 100 && mR->power <=100)
  2879   001C66  C01C  FFD9         	movff	reverse@mL,fsr2l
  2880   001C6A  C01D  FFDA         	movff	reverse@mL+1,fsr2h
  2881   001C6E  0E65               	movlw	101
  2882   001C70  60DF               	cpfslt	indf2,c
  2883   001C72  EF3D  F00E         	goto	u871
  2884   001C76  EF3F  F00E         	goto	u870
  2885   001C7A                     u871:
  2886   001C7A  EF4B  F00E         	goto	l2212
  2887   001C7E                     u870:
  2888   001C7E  C01E  FFD9         	movff	reverse@mR,fsr2l
  2889   001C82  C01F  FFDA         	movff	reverse@mR+1,fsr2h
  2890   001C86  0E64               	movlw	100
  2891   001C88  64DF               	cpfsgt	indf2,c
  2892   001C8A  EF49  F00E         	goto	u881
  2893   001C8E  EF4B  F00E         	goto	u880
  2894   001C92                     u881:
  2895   001C92  EF16  F00E         	goto	l2202
  2896   001C96                     u880:
  2897   001C96                     l2212:
  2898                           
  2899                           ;dc_motor.c: 205:     mL->power = 100;
  2900   001C96  C01C  FFD9         	movff	reverse@mL,fsr2l
  2901   001C9A  C01D  FFDA         	movff	reverse@mL+1,fsr2h
  2902   001C9E  0E64               	movlw	100
  2903   001CA0  6EDF               	movwf	indf2,c
  2904                           
  2905                           ;dc_motor.c: 206:     mR->power = 100;
  2906   001CA2  C01E  FFD9         	movff	reverse@mR,fsr2l
  2907   001CA6  C01F  FFDA         	movff	reverse@mR+1,fsr2h
  2908   001CAA  0E64               	movlw	100
  2909   001CAC  6EDF               	movwf	indf2,c
  2910   001CAE                     
  2911                           ;dc_motor.c: 207:     setMotorPWM(mL);
  2912   001CAE  C01C  F016         	movff	reverse@mL,setMotorPWM@m
  2913   001CB2  C01D  F017         	movff	reverse@mL+1,setMotorPWM@m+1
  2914   001CB6  EC32  F00D         	call	_setMotorPWM	;wreg free
  2915   001CBA                     
  2916                           ;dc_motor.c: 208:     setMotorPWM(mR);
  2917   001CBA  C01E  F016         	movff	reverse@mR,setMotorPWM@m
  2918   001CBE  C01F  F017         	movff	reverse@mR+1,setMotorPWM@m+1
  2919   001CC2  EC32  F00D         	call	_setMotorPWM	;wreg free
  2920   001CC6  0012               	return		;funcret
  2921   001CC8                     __end_of_reverse:
  2922                           	callstack 0
  2923                           
  2924 ;; *************** function _norm_stop *****************
  2925 ;; Defined at:
  2926 ;;		line 118 in file "dc_motor.c"
  2927 ;; Parameters:    Size  Location     Type
  2928 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  2929 ;;		 -> main@mL(9), 
  2930 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  2931 ;;		 -> main@mR(9), 
  2932 ;; Auto vars:     Size  Location     Type
  2933 ;;		None
  2934 ;; Return value:  Size  Location     Type
  2935 ;;                  1    wreg      void 
  2936 ;; Registers used:
  2937 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2938 ;; Tracked objects:
  2939 ;;		On entry : 0/0
  2940 ;;		On exit  : 0/0
  2941 ;;		Unchanged: 0/0
  2942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2943 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2946 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2947 ;;Total ram usage:        4 bytes
  2948 ;; Hardware stack levels used: 1
  2949 ;; Hardware stack levels required when called: 8
  2950 ;; This function calls:
  2951 ;;		_setMotorPWM
  2952 ;; This function is called by:
  2953 ;;		_motor_response
  2954 ;;		_motor_retrace
  2955 ;;		_main
  2956 ;; This function uses a non-reentrant model
  2957 ;;
  2958                           
  2959                           	psect	text8
  2960   002366                     __ptext8:
  2961                           	callstack 0
  2962   002366                     _norm_stop:
  2963                           	callstack 22
  2964   002366                     
  2965                           ;dc_motor.c: 118: void norm_stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 119: {;dc_motor
      +                          .c: 124:     mL->power = 0;
  2966   002366  C01C  FFD9         	movff	norm_stop@mL,fsr2l
  2967   00236A  C01D  FFDA         	movff	norm_stop@mL+1,fsr2h
  2968   00236E  0E00               	movlw	0
  2969   002370  6EDF               	movwf	indf2,c
  2970                           
  2971                           ;dc_motor.c: 125:     mR->power = 0;
  2972   002372  C01E  FFD9         	movff	norm_stop@mR,fsr2l
  2973   002376  C01F  FFDA         	movff	norm_stop@mR+1,fsr2h
  2974   00237A  0E00               	movlw	0
  2975   00237C  6EDF               	movwf	indf2,c
  2976   00237E                     
  2977                           ;dc_motor.c: 126:     setMotorPWM(mL);
  2978   00237E  C01C  F016         	movff	norm_stop@mL,setMotorPWM@m
  2979   002382  C01D  F017         	movff	norm_stop@mL+1,setMotorPWM@m+1
  2980   002386  EC32  F00D         	call	_setMotorPWM	;wreg free
  2981   00238A                     
  2982                           ;dc_motor.c: 127:     setMotorPWM(mR);
  2983   00238A  C01E  F016         	movff	norm_stop@mR,setMotorPWM@m
  2984   00238E  C01F  F017         	movff	norm_stop@mR+1,setMotorPWM@m+1
  2985   002392  EC32  F00D         	call	_setMotorPWM	;wreg free
  2986   002396  0012               	return		;funcret
  2987   002398                     __end_of_norm_stop:
  2988                           	callstack 0
  2989                           
  2990 ;; *************** function _motorRinit *****************
  2991 ;; Defined at:
  2992 ;;		line 88 in file "dc_motor.c"
  2993 ;; Parameters:    Size  Location     Type
  2994 ;;  mR              2    8[COMRAM] PTR struct DC_motor
  2995 ;;		 -> main@mR(9), 
  2996 ;; Auto vars:     Size  Location     Type
  2997 ;;		None
  2998 ;; Return value:  Size  Location     Type
  2999 ;;                  1    wreg      void 
  3000 ;; Registers used:
  3001 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3002 ;; Tracked objects:
  3003 ;;		On entry : 0/0
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3007 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3010 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3011 ;;Total ram usage:        2 bytes
  3012 ;; Hardware stack levels used: 1
  3013 ;; Hardware stack levels required when called: 6
  3014 ;; This function calls:
  3015 ;;		Nothing
  3016 ;; This function is called by:
  3017 ;;		_main
  3018 ;; This function uses a non-reentrant model
  3019 ;;
  3020                           
  3021                           	psect	text9
  3022   00207E                     __ptext9:
  3023                           	callstack 0
  3024   00207E                     _motorRinit:
  3025                           	callstack 24
  3026   00207E                     
  3027                           ;dc_motor.c: 88: void motorRinit(DC_motor *mR);dc_motor.c: 89: {;dc_motor.c: 90:     mR-
      +                          >power = 50;
  3028   00207E  C009  FFD9         	movff	motorRinit@mR,fsr2l
  3029   002082  C00A  FFDA         	movff	motorRinit@mR+1,fsr2h
  3030   002086  0E32               	movlw	50
  3031   002088  6EDF               	movwf	indf2,c
  3032   00208A                     
  3033                           ;dc_motor.c: 91:     mR->direction = 1;
  3034   00208A  EE20 F001          	lfsr	2,1
  3035   00208E  5009               	movf	motorRinit@mR^0,w,c
  3036   002090  26D9               	addwf	fsr2l,f,c
  3037   002092  500A               	movf	(motorRinit@mR+1)^0,w,c
  3038   002094  22DA               	addwfc	fsr2h,f,c
  3039   002096  0E01               	movlw	1
  3040   002098  6EDF               	movwf	indf2,c
  3041   00209A                     
  3042                           ;dc_motor.c: 92:     mR->brakemode = 1;
  3043   00209A  EE20 F002          	lfsr	2,2
  3044   00209E  5009               	movf	motorRinit@mR^0,w,c
  3045   0020A0  26D9               	addwf	fsr2l,f,c
  3046   0020A2  500A               	movf	(motorRinit@mR+1)^0,w,c
  3047   0020A4  22DA               	addwfc	fsr2h,f,c
  3048   0020A6  0E01               	movlw	1
  3049   0020A8  6EDF               	movwf	indf2,c
  3050   0020AA                     
  3051                           ;dc_motor.c: 93:     mR->posDutyHighByte = (unsigned char *) (&CCPR3H);
  3052   0020AA  EE20 F005          	lfsr	2,5
  3053   0020AE  5009               	movf	motorRinit@mR^0,w,c
  3054   0020B0  26D9               	addwf	fsr2l,f,c
  3055   0020B2  500A               	movf	(motorRinit@mR+1)^0,w,c
  3056   0020B4  22DA               	addwfc	fsr2h,f,c
  3057   0020B6  0E25               	movlw	37
  3058   0020B8  6EDE               	movwf	postinc2,c
  3059   0020BA  0E0F               	movlw	15
  3060   0020BC  6EDD               	movwf	postdec2,c
  3061   0020BE                     
  3062                           ;dc_motor.c: 94:     mR->negDutyHighByte = (unsigned char *) (&CCPR4H);
  3063   0020BE  EE20 F007          	lfsr	2,7
  3064   0020C2  5009               	movf	motorRinit@mR^0,w,c
  3065   0020C4  26D9               	addwf	fsr2l,f,c
  3066   0020C6  500A               	movf	(motorRinit@mR+1)^0,w,c
  3067   0020C8  22DA               	addwfc	fsr2h,f,c
  3068   0020CA  0E21               	movlw	33
  3069   0020CC  6EDE               	movwf	postinc2,c
  3070   0020CE  0E0F               	movlw	15
  3071   0020D0  6EDD               	movwf	postdec2,c
  3072   0020D2                     
  3073                           ;dc_motor.c: 95:     mR->PWMperiod = 200;
  3074   0020D2  EE20 F003          	lfsr	2,3
  3075   0020D6  5009               	movf	motorRinit@mR^0,w,c
  3076   0020D8  26D9               	addwf	fsr2l,f,c
  3077   0020DA  500A               	movf	(motorRinit@mR+1)^0,w,c
  3078   0020DC  22DA               	addwfc	fsr2h,f,c
  3079   0020DE  0EC8               	movlw	200
  3080   0020E0  6EDE               	movwf	postinc2,c
  3081   0020E2  0E00               	movlw	0
  3082   0020E4  6EDD               	movwf	postdec2,c
  3083   0020E6  0012               	return		;funcret
  3084   0020E8                     __end_of_motorRinit:
  3085                           	callstack 0
  3086                           
  3087 ;; *************** function _motorLinit *****************
  3088 ;; Defined at:
  3089 ;;		line 78 in file "dc_motor.c"
  3090 ;; Parameters:    Size  Location     Type
  3091 ;;  mL              2    8[COMRAM] PTR struct DC_motor
  3092 ;;		 -> main@mL(9), 
  3093 ;; Auto vars:     Size  Location     Type
  3094 ;;		None
  3095 ;; Return value:  Size  Location     Type
  3096 ;;                  1    wreg      void 
  3097 ;; Registers used:
  3098 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3099 ;; Tracked objects:
  3100 ;;		On entry : 0/0
  3101 ;;		On exit  : 0/0
  3102 ;;		Unchanged: 0/0
  3103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3104 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3107 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3108 ;;Total ram usage:        2 bytes
  3109 ;; Hardware stack levels used: 1
  3110 ;; Hardware stack levels required when called: 6
  3111 ;; This function calls:
  3112 ;;		Nothing
  3113 ;; This function is called by:
  3114 ;;		_main
  3115 ;; This function uses a non-reentrant model
  3116 ;;
  3117                           
  3118                           	psect	text10
  3119   0020E8                     __ptext10:
  3120                           	callstack 0
  3121   0020E8                     _motorLinit:
  3122                           	callstack 24
  3123   0020E8                     
  3124                           ;dc_motor.c: 78: void motorLinit(DC_motor *mL);dc_motor.c: 79: {;dc_motor.c: 80:     mL-
      +                          >power = 50;
  3125   0020E8  C009  FFD9         	movff	motorLinit@mL,fsr2l
  3126   0020EC  C00A  FFDA         	movff	motorLinit@mL+1,fsr2h
  3127   0020F0  0E32               	movlw	50
  3128   0020F2  6EDF               	movwf	indf2,c
  3129   0020F4                     
  3130                           ;dc_motor.c: 81:     mL->direction = 1;
  3131   0020F4  EE20 F001          	lfsr	2,1
  3132   0020F8  5009               	movf	motorLinit@mL^0,w,c
  3133   0020FA  26D9               	addwf	fsr2l,f,c
  3134   0020FC  500A               	movf	(motorLinit@mL+1)^0,w,c
  3135   0020FE  22DA               	addwfc	fsr2h,f,c
  3136   002100  0E01               	movlw	1
  3137   002102  6EDF               	movwf	indf2,c
  3138   002104                     
  3139                           ;dc_motor.c: 82:     mL->brakemode = 1;
  3140   002104  EE20 F002          	lfsr	2,2
  3141   002108  5009               	movf	motorLinit@mL^0,w,c
  3142   00210A  26D9               	addwf	fsr2l,f,c
  3143   00210C  500A               	movf	(motorLinit@mL+1)^0,w,c
  3144   00210E  22DA               	addwfc	fsr2h,f,c
  3145   002110  0E01               	movlw	1
  3146   002112  6EDF               	movwf	indf2,c
  3147   002114                     
  3148                           ;dc_motor.c: 83:     mL->posDutyHighByte = (unsigned char *) (&CCPR1H);
  3149   002114  EE20 F005          	lfsr	2,5
  3150   002118  5009               	movf	motorLinit@mL^0,w,c
  3151   00211A  26D9               	addwf	fsr2l,f,c
  3152   00211C  500A               	movf	(motorLinit@mL+1)^0,w,c
  3153   00211E  22DA               	addwfc	fsr2h,f,c
  3154   002120  0EAA               	movlw	170
  3155   002122  6EDE               	movwf	postinc2,c
  3156   002124  0E0F               	movlw	15
  3157   002126  6EDD               	movwf	postdec2,c
  3158   002128                     
  3159                           ;dc_motor.c: 84:     mL->negDutyHighByte = (unsigned char *) (&CCPR2H);
  3160   002128  EE20 F007          	lfsr	2,7
  3161   00212C  5009               	movf	motorLinit@mL^0,w,c
  3162   00212E  26D9               	addwf	fsr2l,f,c
  3163   002130  500A               	movf	(motorLinit@mL+1)^0,w,c
  3164   002132  22DA               	addwfc	fsr2h,f,c
  3165   002134  0EA6               	movlw	166
  3166   002136  6EDE               	movwf	postinc2,c
  3167   002138  0E0F               	movlw	15
  3168   00213A  6EDD               	movwf	postdec2,c
  3169   00213C                     
  3170                           ;dc_motor.c: 85:     mL->PWMperiod = 200;
  3171   00213C  EE20 F003          	lfsr	2,3
  3172   002140  5009               	movf	motorLinit@mL^0,w,c
  3173   002142  26D9               	addwf	fsr2l,f,c
  3174   002144  500A               	movf	(motorLinit@mL+1)^0,w,c
  3175   002146  22DA               	addwfc	fsr2h,f,c
  3176   002148  0EC8               	movlw	200
  3177   00214A  6EDE               	movwf	postinc2,c
  3178   00214C  0E00               	movlw	0
  3179   00214E  6EDD               	movwf	postdec2,c
  3180   002150  0012               	return		;funcret
  3181   002152                     __end_of_motorLinit:
  3182                           	callstack 0
  3183                           
  3184 ;; *************** function _initDCmotorsPWM *****************
  3185 ;; Defined at:
  3186 ;;		line 5 in file "dc_motor.c"
  3187 ;; Parameters:    Size  Location     Type
  3188 ;;  PWMperiod       2    8[COMRAM] unsigned int 
  3189 ;; Auto vars:     Size  Location     Type
  3190 ;;		None
  3191 ;; Return value:  Size  Location     Type
  3192 ;;                  1    wreg      void 
  3193 ;; Registers used:
  3194 ;;		wreg, status,2
  3195 ;; Tracked objects:
  3196 ;;		On entry : 0/0
  3197 ;;		On exit  : 0/0
  3198 ;;		Unchanged: 0/0
  3199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3200 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3203 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3204 ;;Total ram usage:        2 bytes
  3205 ;; Hardware stack levels used: 1
  3206 ;; Hardware stack levels required when called: 6
  3207 ;; This function calls:
  3208 ;;		Nothing
  3209 ;; This function is called by:
  3210 ;;		_main
  3211 ;; This function uses a non-reentrant model
  3212 ;;
  3213                           
  3214                           	psect	text11
  3215   001EA6                     __ptext11:
  3216                           	callstack 0
  3217   001EA6                     _initDCmotorsPWM:
  3218                           	callstack 24
  3219   001EA6                     
  3220                           ;dc_motor.c: 9:     RE2PPS=0x05;
  3221   001EA6  0E05               	movlw	5
  3222   001EA8  010E               	movlb	14	; () banked
  3223   001EAA  6F74               	movwf	116,b	;volatile
  3224                           
  3225                           ;dc_motor.c: 10:     RE4PPS=0x06;
  3226   001EAC  0E06               	movlw	6
  3227   001EAE  6F76               	movwf	118,b	;volatile
  3228                           
  3229                           ;dc_motor.c: 11:     RC7PPS=0x07;
  3230   001EB0  0E07               	movlw	7
  3231   001EB2  6F69               	movwf	105,b	;volatile
  3232                           
  3233                           ;dc_motor.c: 12:     RG6PPS=0x08;
  3234   001EB4  0E08               	movlw	8
  3235   001EB6  6F88               	movwf	136,b	;volatile
  3236                           
  3237                           ;dc_motor.c: 15:     T2CONbits.CKPS=0b0011;
  3238   001EB8  50BD               	movf	189,w,c	;volatile
  3239   001EBA  0B8F               	andlw	-113
  3240   001EBC  0930               	iorlw	48
  3241   001EBE  6EBD               	movwf	189,c	;volatile
  3242                           
  3243                           ;dc_motor.c: 16:     T2HLTbits.MODE=0b00000;
  3244   001EC0  0EE0               	movlw	-32
  3245   001EC2  16BE               	andwf	190,f,c	;volatile
  3246                           
  3247                           ;dc_motor.c: 17:     T2CLKCONbits.CS=0b0001;
  3248   001EC4  50BF               	movf	191,w,c	;volatile
  3249   001EC6  0BF0               	andlw	-16
  3250   001EC8  0901               	iorlw	1
  3251   001ECA  6EBF               	movwf	191,c	;volatile
  3252                           
  3253                           ;dc_motor.c: 21:     T2PR=200;
  3254   001ECC  0EC8               	movlw	200
  3255   001ECE  6EBC               	movwf	188,c	;volatile
  3256   001ED0                     
  3257                           ; BSR set to: 14
  3258                           ;dc_motor.c: 22:     T2CONbits.ON=1;
  3259   001ED0  8EBD               	bsf	189,7,c	;volatile
  3260                           
  3261                           ;dc_motor.c: 26:     CCPR1H=0;
  3262   001ED2  0E00               	movlw	0
  3263   001ED4  6EAA               	movwf	170,c	;volatile
  3264                           
  3265                           ;dc_motor.c: 27:     CCPR2H=0;
  3266   001ED6  0E00               	movlw	0
  3267   001ED8  6EA6               	movwf	166,c	;volatile
  3268                           
  3269                           ;dc_motor.c: 28:     CCPR3H=0;
  3270   001EDA  0E00               	movlw	0
  3271   001EDC  010F               	movlb	15	; () banked
  3272   001EDE  6F25               	movwf	37,b	;volatile
  3273                           
  3274                           ;dc_motor.c: 29:     CCPR4H=0;
  3275   001EE0  0E00               	movlw	0
  3276   001EE2  6F21               	movwf	33,b	;volatile
  3277                           
  3278                           ;dc_motor.c: 32:     CCPTMRS0bits.C1TSEL=0;
  3279   001EE4  0EFC               	movlw	-4
  3280   001EE6  16AD               	andwf	173,f,c	;volatile
  3281                           
  3282                           ;dc_motor.c: 33:     CCPTMRS0bits.C2TSEL=0;
  3283   001EE8  0EF3               	movlw	-13
  3284   001EEA  16AD               	andwf	173,f,c	;volatile
  3285                           
  3286                           ;dc_motor.c: 34:     CCPTMRS0bits.C3TSEL=0;
  3287   001EEC  0ECF               	movlw	-49
  3288   001EEE  16AD               	andwf	173,f,c	;volatile
  3289                           
  3290                           ;dc_motor.c: 35:     CCPTMRS0bits.C4TSEL=0;
  3291   001EF0  0E3F               	movlw	-193
  3292   001EF2  16AD               	andwf	173,f,c	;volatile
  3293   001EF4                     
  3294                           ; BSR set to: 15
  3295                           ;dc_motor.c: 38:     CCP1CONbits.FMT=1;
  3296   001EF4  88AB               	bsf	171,4,c	;volatile
  3297                           
  3298                           ;dc_motor.c: 39:     CCP1CONbits.CCP1MODE=0b1100;
  3299   001EF6  50AB               	movf	171,w,c	;volatile
  3300   001EF8  0BF0               	andlw	-16
  3301   001EFA  090C               	iorlw	12
  3302   001EFC  6EAB               	movwf	171,c	;volatile
  3303   001EFE                     
  3304                           ; BSR set to: 15
  3305                           ;dc_motor.c: 40:     CCP1CONbits.EN=1;
  3306   001EFE  8EAB               	bsf	171,7,c	;volatile
  3307   001F00                     
  3308                           ; BSR set to: 15
  3309                           ;dc_motor.c: 42:     CCP2CONbits.FMT=1;
  3310   001F00  88A7               	bsf	167,4,c	;volatile
  3311                           
  3312                           ;dc_motor.c: 43:     CCP2CONbits.CCP2MODE=0b1100;
  3313   001F02  50A7               	movf	167,w,c	;volatile
  3314   001F04  0BF0               	andlw	-16
  3315   001F06  090C               	iorlw	12
  3316   001F08  6EA7               	movwf	167,c	;volatile
  3317   001F0A                     
  3318                           ; BSR set to: 15
  3319                           ;dc_motor.c: 44:     CCP2CONbits.EN=1;
  3320   001F0A  8EA7               	bsf	167,7,c	;volatile
  3321   001F0C                     
  3322                           ; BSR set to: 15
  3323                           ;dc_motor.c: 46:     CCP3CONbits.FMT=1;
  3324   001F0C  8926               	bsf	38,4,b	;volatile
  3325                           
  3326                           ;dc_motor.c: 47:     CCP3CONbits.CCP3MODE=0b1100;
  3327   001F0E  5126               	movf	38,w,b	;volatile
  3328   001F10  0BF0               	andlw	-16
  3329   001F12  090C               	iorlw	12
  3330   001F14  6F26               	movwf	38,b	;volatile
  3331   001F16                     
  3332                           ; BSR set to: 15
  3333                           ;dc_motor.c: 48:     CCP3CONbits.EN=1;
  3334   001F16  8F26               	bsf	38,7,b	;volatile
  3335   001F18                     
  3336                           ; BSR set to: 15
  3337                           ;dc_motor.c: 50:     CCP4CONbits.FMT=1;
  3338   001F18  8922               	bsf	34,4,b	;volatile
  3339                           
  3340                           ;dc_motor.c: 51:     CCP4CONbits.CCP4MODE=0b1100;
  3341   001F1A  5122               	movf	34,w,b	;volatile
  3342   001F1C  0BF0               	andlw	-16
  3343   001F1E  090C               	iorlw	12
  3344   001F20  6F22               	movwf	34,b	;volatile
  3345   001F22                     
  3346                           ; BSR set to: 15
  3347                           ;dc_motor.c: 52:     CCP4CONbits.EN=1;
  3348   001F22  8F22               	bsf	34,7,b	;volatile
  3349   001F24                     
  3350                           ; BSR set to: 15
  3351   001F24  0012               	return		;funcret
  3352   001F26                     __end_of_initDCmotorsPWM:
  3353                           	callstack 0
  3354                           
  3355 ;; *************** function _fullSpeedAhead *****************
  3356 ;; Defined at:
  3357 ;;		line 167 in file "dc_motor.c"
  3358 ;; Parameters:    Size  Location     Type
  3359 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  3360 ;;		 -> main@mL(9), 
  3361 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  3362 ;;		 -> main@mR(9), 
  3363 ;; Auto vars:     Size  Location     Type
  3364 ;;		None
  3365 ;; Return value:  Size  Location     Type
  3366 ;;                  1    wreg      void 
  3367 ;; Registers used:
  3368 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3369 ;; Tracked objects:
  3370 ;;		On entry : 0/0
  3371 ;;		On exit  : 0/0
  3372 ;;		Unchanged: 0/0
  3373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3374 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3376 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3377 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3378 ;;Total ram usage:        5 bytes
  3379 ;; Hardware stack levels used: 1
  3380 ;; Hardware stack levels required when called: 8
  3381 ;; This function calls:
  3382 ;;		_setMotorPWM
  3383 ;; This function is called by:
  3384 ;;		_main
  3385 ;; This function uses a non-reentrant model
  3386 ;;
  3387                           
  3388                           	psect	text12
  3389   001DBC                     __ptext12:
  3390                           	callstack 0
  3391   001DBC                     _fullSpeedAhead:
  3392                           	callstack 22
  3393   001DBC                     
  3394                           ;dc_motor.c: 167: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 168: {;dc_
      +                          motor.c: 169:     mL->power = 5;
  3395   001DBC  C01C  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3396   001DC0  C01D  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3397   001DC4  0E05               	movlw	5
  3398   001DC6  6EDF               	movwf	indf2,c
  3399                           
  3400                           ;dc_motor.c: 170:     mR->power = 5;
  3401   001DC8  C01E  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3402   001DCC  C01F  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3403   001DD0  0E05               	movlw	5
  3404   001DD2  6EDF               	movwf	indf2,c
  3405   001DD4                     
  3406                           ;dc_motor.c: 171:     mR->direction = 1;
  3407   001DD4  EE20 F001          	lfsr	2,1
  3408   001DD8  501E               	movf	fullSpeedAhead@mR^0,w,c
  3409   001DDA  26D9               	addwf	fsr2l,f,c
  3410   001DDC  501F               	movf	(fullSpeedAhead@mR+1)^0,w,c
  3411   001DDE  22DA               	addwfc	fsr2h,f,c
  3412   001DE0  0E01               	movlw	1
  3413   001DE2  6EDF               	movwf	indf2,c
  3414   001DE4                     
  3415                           ;dc_motor.c: 172:     mL->direction = 1;
  3416   001DE4  EE20 F001          	lfsr	2,1
  3417   001DE8  501C               	movf	fullSpeedAhead@mL^0,w,c
  3418   001DEA  26D9               	addwf	fsr2l,f,c
  3419   001DEC  501D               	movf	(fullSpeedAhead@mL+1)^0,w,c
  3420   001DEE  22DA               	addwfc	fsr2h,f,c
  3421   001DF0  0E01               	movlw	1
  3422   001DF2  6EDF               	movwf	indf2,c
  3423   001DF4                     
  3424                           ;dc_motor.c: 173:     mL->brakemode = 1;
  3425   001DF4  EE20 F002          	lfsr	2,2
  3426   001DF8  501C               	movf	fullSpeedAhead@mL^0,w,c
  3427   001DFA  26D9               	addwf	fsr2l,f,c
  3428   001DFC  501D               	movf	(fullSpeedAhead@mL+1)^0,w,c
  3429   001DFE  22DA               	addwfc	fsr2h,f,c
  3430   001E00  0E01               	movlw	1
  3431   001E02  6EDF               	movwf	indf2,c
  3432   001E04                     
  3433                           ;dc_motor.c: 174:     mR->brakemode = 1;
  3434   001E04  EE20 F002          	lfsr	2,2
  3435   001E08  501E               	movf	fullSpeedAhead@mR^0,w,c
  3436   001E0A  26D9               	addwf	fsr2l,f,c
  3437   001E0C  501F               	movf	(fullSpeedAhead@mR+1)^0,w,c
  3438   001E0E  22DA               	addwfc	fsr2h,f,c
  3439   001E10  0E01               	movlw	1
  3440   001E12  6EDF               	movwf	indf2,c
  3441                           
  3442                           ;dc_motor.c: 175:     while (mL->power <= 20 && mR->power <=20)
  3443   001E14  EF22  F00F         	goto	l2600
  3444   001E18                     l2594:
  3445                           
  3446                           ;dc_motor.c: 176:     {;dc_motor.c: 177:         mL->power++;
  3447   001E18  C01C  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3448   001E1C  C01D  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3449   001E20  2ADF               	incf	indf2,f,c
  3450                           
  3451                           ;dc_motor.c: 178:         mR->power++;
  3452   001E22  C01E  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3453   001E26  C01F  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3454   001E2A  2ADF               	incf	indf2,f,c
  3455   001E2C                     
  3456                           ;dc_motor.c: 180:         setMotorPWM(mL);
  3457   001E2C  C01C  F016         	movff	fullSpeedAhead@mL,setMotorPWM@m
  3458   001E30  C01D  F017         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  3459   001E34  EC32  F00D         	call	_setMotorPWM	;wreg free
  3460   001E38                     
  3461                           ;dc_motor.c: 181:         setMotorPWM(mR);
  3462   001E38  C01E  F016         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3463   001E3C  C01F  F017         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  3464   001E40  EC32  F00D         	call	_setMotorPWM	;wreg free
  3465   001E44                     l2600:
  3466                           
  3467                           ;dc_motor.c: 175:     while (mL->power <= 20 && mR->power <=20)
  3468   001E44  C01C  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3469   001E48  C01D  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3470   001E4C  0E15               	movlw	21
  3471   001E4E  60DF               	cpfslt	indf2,c
  3472   001E50  EF2C  F00F         	goto	u1341
  3473   001E54  EF2E  F00F         	goto	u1340
  3474   001E58                     u1341:
  3475   001E58  EF3A  F00F         	goto	l2604
  3476   001E5C                     u1340:
  3477   001E5C  C01E  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3478   001E60  C01F  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3479   001E64  0E14               	movlw	20
  3480   001E66  64DF               	cpfsgt	indf2,c
  3481   001E68  EF38  F00F         	goto	u1351
  3482   001E6C  EF3A  F00F         	goto	u1350
  3483   001E70                     u1351:
  3484   001E70  EF0C  F00F         	goto	l2594
  3485   001E74                     u1350:
  3486   001E74                     l2604:
  3487                           
  3488                           ;dc_motor.c: 183:     mL->power = 20;
  3489   001E74  C01C  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3490   001E78  C01D  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3491   001E7C  0E14               	movlw	20
  3492   001E7E  6EDF               	movwf	indf2,c
  3493                           
  3494                           ;dc_motor.c: 184:     mR->power = 20;
  3495   001E80  C01E  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3496   001E84  C01F  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3497   001E88  0E14               	movlw	20
  3498   001E8A  6EDF               	movwf	indf2,c
  3499   001E8C                     
  3500                           ;dc_motor.c: 185:     setMotorPWM(mL);
  3501   001E8C  C01C  F016         	movff	fullSpeedAhead@mL,setMotorPWM@m
  3502   001E90  C01D  F017         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  3503   001E94  EC32  F00D         	call	_setMotorPWM	;wreg free
  3504   001E98                     
  3505                           ;dc_motor.c: 186:     setMotorPWM(mR);
  3506   001E98  C01E  F016         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3507   001E9C  C01F  F017         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  3508   001EA0  EC32  F00D         	call	_setMotorPWM	;wreg free
  3509   001EA4  0012               	return		;funcret
  3510   001EA6                     __end_of_fullSpeedAhead:
  3511                           	callstack 0
  3512                           
  3513 ;; *************** function _setMotorPWM *****************
  3514 ;; Defined at:
  3515 ;;		line 56 in file "dc_motor.c"
  3516 ;; Parameters:    Size  Location     Type
  3517 ;;  m               2   21[COMRAM] PTR struct DC_motor
  3518 ;;		 -> main@mR(9), main@mL(9), 
  3519 ;; Auto vars:     Size  Location     Type
  3520 ;;  negDuty         1   26[COMRAM] unsigned char 
  3521 ;;  posDuty         1   25[COMRAM] unsigned char 
  3522 ;; Return value:  Size  Location     Type
  3523 ;;                  1    wreg      void 
  3524 ;; Registers used:
  3525 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3526 ;; Tracked objects:
  3527 ;;		On entry : 0/0
  3528 ;;		On exit  : 0/0
  3529 ;;		Unchanged: 0/0
  3530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3531 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3532 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3533 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3534 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3535 ;;Total ram usage:        6 bytes
  3536 ;; Hardware stack levels used: 1
  3537 ;; Hardware stack levels required when called: 7
  3538 ;; This function calls:
  3539 ;;		___lwdiv
  3540 ;;		___wmul
  3541 ;; This function is called by:
  3542 ;;		_norm_stop
  3543 ;;		_turnLeft
  3544 ;;		_turnRight
  3545 ;;		_fullSpeedAhead
  3546 ;;		_reverse
  3547 ;;		_stop
  3548 ;;		_uturn
  3549 ;; This function uses a non-reentrant model
  3550 ;;
  3551                           
  3552                           	psect	text13
  3553   001A64                     __ptext13:
  3554                           	callstack 0
  3555   001A64                     _setMotorPWM:
  3556                           	callstack 22
  3557   001A64                     
  3558                           ;dc_motor.c: 56: void setMotorPWM(DC_motor *m);dc_motor.c: 57: {;dc_motor.c: 58:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 60:     if(m->brakemode) {
  3559   001A64  EE20 F002          	lfsr	2,2
  3560   001A68  5016               	movf	setMotorPWM@m^0,w,c
  3561   001A6A  26D9               	addwf	fsr2l,f,c
  3562   001A6C  5017               	movf	(setMotorPWM@m+1)^0,w,c
  3563   001A6E  22DA               	addwfc	fsr2h,f,c
  3564   001A70  50DF               	movf	indf2,w,c
  3565   001A72  B4D8               	btfsc	status,2,c
  3566   001A74  EF3E  F00D         	goto	u851
  3567   001A78  EF40  F00D         	goto	u850
  3568   001A7C                     u851:
  3569   001A7C  EF74  F00D         	goto	l2108
  3570   001A80                     u850:
  3571   001A80                     
  3572                           ;dc_motor.c: 61:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  3573   001A80  C016  FFD9         	movff	setMotorPWM@m,fsr2l
  3574   001A84  C017  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3575   001A88  50DF               	movf	indf2,w,c
  3576   001A8A  6E18               	movwf	??_setMotorPWM^0,c
  3577   001A8C  5018               	movf	??_setMotorPWM^0,w,c
  3578   001A8E  6E09               	movwf	___wmul@multiplier^0,c
  3579   001A90  6A0A               	clrf	(___wmul@multiplier+1)^0,c
  3580   001A92  EE20 F003          	lfsr	2,3
  3581   001A96  5016               	movf	setMotorPWM@m^0,w,c
  3582   001A98  26D9               	addwf	fsr2l,f,c
  3583   001A9A  5017               	movf	(setMotorPWM@m+1)^0,w,c
  3584   001A9C  22DA               	addwfc	fsr2h,f,c
  3585   001A9E  CFDE F00B          	movff	postinc2,___wmul@multiplicand
  3586   001AA2  CFDD F00C          	movff	postdec2,___wmul@multiplicand+1
  3587   001AA6  EC61  F012         	call	___wmul	;wreg free
  3588   001AAA  C009  F00F         	movff	?___wmul,___lwdiv@dividend
  3589   001AAE  C00A  F010         	movff	?___wmul+1,___lwdiv@dividend+1
  3590   001AB2  0E00               	movlw	0
  3591   001AB4  6E12               	movwf	(___lwdiv@divisor+1)^0,c
  3592   001AB6  0E64               	movlw	100
  3593   001AB8  6E11               	movwf	___lwdiv@divisor^0,c
  3594   001ABA  EC93  F00F         	call	___lwdiv	;wreg free
  3595   001ABE  EE20 F003          	lfsr	2,3
  3596   001AC2  5016               	movf	setMotorPWM@m^0,w,c
  3597   001AC4  26D9               	addwf	fsr2l,f,c
  3598   001AC6  5017               	movf	(setMotorPWM@m+1)^0,w,c
  3599   001AC8  22DA               	addwfc	fsr2h,f,c
  3600   001ACA  50DF               	movf	indf2,w,c
  3601   001ACC  6E19               	movwf	(??_setMotorPWM+1)^0,c
  3602   001ACE  500F               	movf	?___lwdiv^0,w,c
  3603   001AD0  5C19               	subwf	(??_setMotorPWM+1)^0,w,c
  3604   001AD2  6E1A               	movwf	setMotorPWM@posDuty^0,c
  3605   001AD4                     
  3606                           ;dc_motor.c: 62:         negDuty=m->PWMperiod;
  3607   001AD4  EE20 F003          	lfsr	2,3
  3608   001AD8  5016               	movf	setMotorPWM@m^0,w,c
  3609   001ADA  26D9               	addwf	fsr2l,f,c
  3610   001ADC  5017               	movf	(setMotorPWM@m+1)^0,w,c
  3611   001ADE  22DA               	addwfc	fsr2h,f,c
  3612   001AE0  50DF               	movf	indf2,w,c
  3613   001AE2  6E1B               	movwf	setMotorPWM@negDuty^0,c
  3614                           
  3615                           ;dc_motor.c: 63:     }
  3616   001AE4  EF97  F00D         	goto	l2112
  3617   001AE8                     l2108:
  3618                           
  3619                           ;dc_motor.c: 65:         posDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  3620   001AE8  C016  FFD9         	movff	setMotorPWM@m,fsr2l
  3621   001AEC  C017  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3622   001AF0  50DF               	movf	indf2,w,c
  3623   001AF2  6E18               	movwf	??_setMotorPWM^0,c
  3624   001AF4  5018               	movf	??_setMotorPWM^0,w,c
  3625   001AF6  6E09               	movwf	___wmul@multiplier^0,c
  3626   001AF8  6A0A               	clrf	(___wmul@multiplier+1)^0,c
  3627   001AFA  EE20 F003          	lfsr	2,3
  3628   001AFE  5016               	movf	setMotorPWM@m^0,w,c
  3629   001B00  26D9               	addwf	fsr2l,f,c
  3630   001B02  5017               	movf	(setMotorPWM@m+1)^0,w,c
  3631   001B04  22DA               	addwfc	fsr2h,f,c
  3632   001B06  CFDE F00B          	movff	postinc2,___wmul@multiplicand
  3633   001B0A  CFDD F00C          	movff	postdec2,___wmul@multiplicand+1
  3634   001B0E  EC61  F012         	call	___wmul	;wreg free
  3635   001B12  C009  F00F         	movff	?___wmul,___lwdiv@dividend
  3636   001B16  C00A  F010         	movff	?___wmul+1,___lwdiv@dividend+1
  3637   001B1A  0E00               	movlw	0
  3638   001B1C  6E12               	movwf	(___lwdiv@divisor+1)^0,c
  3639   001B1E  0E64               	movlw	100
  3640   001B20  6E11               	movwf	___lwdiv@divisor^0,c
  3641   001B22  EC93  F00F         	call	___lwdiv	;wreg free
  3642   001B26  500F               	movf	?___lwdiv^0,w,c
  3643   001B28  6E1A               	movwf	setMotorPWM@posDuty^0,c
  3644   001B2A                     
  3645                           ;dc_motor.c: 66:         negDuty=0;
  3646   001B2A  0E00               	movlw	0
  3647   001B2C  6E1B               	movwf	setMotorPWM@negDuty^0,c
  3648   001B2E                     l2112:
  3649                           
  3650                           ;dc_motor.c: 69:     if (m->direction) {
  3651   001B2E  EE20 F001          	lfsr	2,1
  3652   001B32  5016               	movf	setMotorPWM@m^0,w,c
  3653   001B34  26D9               	addwf	fsr2l,f,c
  3654   001B36  5017               	movf	(setMotorPWM@m+1)^0,w,c
  3655   001B38  22DA               	addwfc	fsr2h,f,c
  3656   001B3A  50DF               	movf	indf2,w,c
  3657   001B3C  B4D8               	btfsc	status,2,c
  3658   001B3E  EFA3  F00D         	goto	u861
  3659   001B42  EFA5  F00D         	goto	u860
  3660   001B46                     u861:
  3661   001B46  EFC7  F00D         	goto	l2116
  3662   001B4A                     u860:
  3663   001B4A                     
  3664                           ;dc_motor.c: 70:         *(m->posDutyHighByte)=posDuty;
  3665   001B4A  EE20 F005          	lfsr	2,5
  3666   001B4E  5016               	movf	setMotorPWM@m^0,w,c
  3667   001B50  26D9               	addwf	fsr2l,f,c
  3668   001B52  5017               	movf	(setMotorPWM@m+1)^0,w,c
  3669   001B54  22DA               	addwfc	fsr2h,f,c
  3670   001B56  CFDE F018          	movff	postinc2,??_setMotorPWM
  3671   001B5A  CFDD F019          	movff	postdec2,??_setMotorPWM+1
  3672   001B5E  C018  FFD9         	movff	??_setMotorPWM,fsr2l
  3673   001B62  C019  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3674   001B66  C01A  FFDF         	movff	setMotorPWM@posDuty,indf2
  3675                           
  3676                           ;dc_motor.c: 71:         *(m->negDutyHighByte)=negDuty;
  3677   001B6A  EE20 F007          	lfsr	2,7
  3678   001B6E  5016               	movf	setMotorPWM@m^0,w,c
  3679   001B70  26D9               	addwf	fsr2l,f,c
  3680   001B72  5017               	movf	(setMotorPWM@m+1)^0,w,c
  3681   001B74  22DA               	addwfc	fsr2h,f,c
  3682   001B76  CFDE F018          	movff	postinc2,??_setMotorPWM
  3683   001B7A  CFDD F019          	movff	postdec2,??_setMotorPWM+1
  3684   001B7E  C018  FFD9         	movff	??_setMotorPWM,fsr2l
  3685   001B82  C019  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3686   001B86  C01B  FFDF         	movff	setMotorPWM@negDuty,indf2
  3687                           
  3688                           ;dc_motor.c: 72:     } else {
  3689   001B8A  EFE7  F00D         	goto	l521
  3690   001B8E                     l2116:
  3691                           
  3692                           ;dc_motor.c: 73:         *(m->posDutyHighByte)=negDuty;
  3693   001B8E  EE20 F005          	lfsr	2,5
  3694   001B92  5016               	movf	setMotorPWM@m^0,w,c
  3695   001B94  26D9               	addwf	fsr2l,f,c
  3696   001B96  5017               	movf	(setMotorPWM@m+1)^0,w,c
  3697   001B98  22DA               	addwfc	fsr2h,f,c
  3698   001B9A  CFDE F018          	movff	postinc2,??_setMotorPWM
  3699   001B9E  CFDD F019          	movff	postdec2,??_setMotorPWM+1
  3700   001BA2  C018  FFD9         	movff	??_setMotorPWM,fsr2l
  3701   001BA6  C019  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3702   001BAA  C01B  FFDF         	movff	setMotorPWM@negDuty,indf2
  3703                           
  3704                           ;dc_motor.c: 74:         *(m->negDutyHighByte)=posDuty;
  3705   001BAE  EE20 F007          	lfsr	2,7
  3706   001BB2  5016               	movf	setMotorPWM@m^0,w,c
  3707   001BB4  26D9               	addwf	fsr2l,f,c
  3708   001BB6  5017               	movf	(setMotorPWM@m+1)^0,w,c
  3709   001BB8  22DA               	addwfc	fsr2h,f,c
  3710   001BBA  CFDE F018          	movff	postinc2,??_setMotorPWM
  3711   001BBE  CFDD F019          	movff	postdec2,??_setMotorPWM+1
  3712   001BC2  C018  FFD9         	movff	??_setMotorPWM,fsr2l
  3713   001BC6  C019  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3714   001BCA  C01A  FFDF         	movff	setMotorPWM@posDuty,indf2
  3715   001BCE                     l521:
  3716   001BCE  0012               	return		;funcret
  3717   001BD0                     __end_of_setMotorPWM:
  3718                           	callstack 0
  3719                           
  3720 ;; *************** function ___wmul *****************
  3721 ;; Defined at:
  3722 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  3723 ;; Parameters:    Size  Location     Type
  3724 ;;  multiplier      2    8[COMRAM] unsigned int 
  3725 ;;  multiplicand    2   10[COMRAM] unsigned int 
  3726 ;; Auto vars:     Size  Location     Type
  3727 ;;  product         2   12[COMRAM] unsigned int 
  3728 ;; Return value:  Size  Location     Type
  3729 ;;                  2    8[COMRAM] unsigned int 
  3730 ;; Registers used:
  3731 ;;		wreg, status,2, status,0, prodl, prodh
  3732 ;; Tracked objects:
  3733 ;;		On entry : 0/0
  3734 ;;		On exit  : 0/0
  3735 ;;		Unchanged: 0/0
  3736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3737 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3738 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3740 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3741 ;;Total ram usage:        6 bytes
  3742 ;; Hardware stack levels used: 1
  3743 ;; Hardware stack levels required when called: 6
  3744 ;; This function calls:
  3745 ;;		Nothing
  3746 ;; This function is called by:
  3747 ;;		_setMotorPWM
  3748 ;; This function uses a non-reentrant model
  3749 ;;
  3750                           
  3751                           	psect	text14
  3752   0024C2                     __ptext14:
  3753                           	callstack 0
  3754   0024C2                     ___wmul:
  3755                           	callstack 22
  3756   0024C2  5009               	movf	___wmul@multiplier^0,w,c
  3757   0024C4  020B               	mulwf	___wmul@multiplicand^0,c
  3758   0024C6  CFF3 F00D          	movff	prodl,___wmul@product
  3759   0024CA  CFF4 F00E          	movff	prodh,___wmul@product+1
  3760   0024CE  5009               	movf	___wmul@multiplier^0,w,c
  3761   0024D0  020C               	mulwf	(___wmul@multiplicand+1)^0,c
  3762   0024D2  50F3               	movf	243,w,c
  3763   0024D4  260E               	addwf	(___wmul@product+1)^0,f,c
  3764   0024D6  500A               	movf	(___wmul@multiplier+1)^0,w,c
  3765   0024D8  020B               	mulwf	___wmul@multiplicand^0,c
  3766   0024DA  50F3               	movf	243,w,c
  3767   0024DC  260E               	addwf	(___wmul@product+1)^0,f,c
  3768   0024DE  C00D  F009         	movff	___wmul@product,?___wmul
  3769   0024E2  C00E  F00A         	movff	___wmul@product+1,?___wmul+1
  3770   0024E6  0012               	return		;funcret
  3771   0024E8                     __end_of___wmul:
  3772                           	callstack 0
  3773                           
  3774 ;; *************** function ___lwdiv *****************
  3775 ;; Defined at:
  3776 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  3777 ;; Parameters:    Size  Location     Type
  3778 ;;  dividend        2   14[COMRAM] unsigned int 
  3779 ;;  divisor         2   16[COMRAM] unsigned int 
  3780 ;; Auto vars:     Size  Location     Type
  3781 ;;  quotient        2   18[COMRAM] unsigned int 
  3782 ;;  counter         1   20[COMRAM] unsigned char 
  3783 ;; Return value:  Size  Location     Type
  3784 ;;                  2   14[COMRAM] unsigned int 
  3785 ;; Registers used:
  3786 ;;		wreg, status,2, status,0
  3787 ;; Tracked objects:
  3788 ;;		On entry : 0/0
  3789 ;;		On exit  : 0/0
  3790 ;;		Unchanged: 0/0
  3791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3792 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3793 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3795 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3796 ;;Total ram usage:        7 bytes
  3797 ;; Hardware stack levels used: 1
  3798 ;; Hardware stack levels required when called: 6
  3799 ;; This function calls:
  3800 ;;		Nothing
  3801 ;; This function is called by:
  3802 ;;		_setMotorPWM
  3803 ;;		_color_normalise
  3804 ;; This function uses a non-reentrant model
  3805 ;;
  3806                           
  3807                           	psect	text15
  3808   001F26                     __ptext15:
  3809                           	callstack 0
  3810   001F26                     ___lwdiv:
  3811                           	callstack 22
  3812   001F26  0E00               	movlw	0
  3813   001F28  6E14               	movwf	(___lwdiv@quotient+1)^0,c
  3814   001F2A  0E00               	movlw	0
  3815   001F2C  6E13               	movwf	___lwdiv@quotient^0,c
  3816   001F2E  5011               	movf	___lwdiv@divisor^0,w,c
  3817   001F30  1012               	iorwf	(___lwdiv@divisor+1)^0,w,c
  3818   001F32  B4D8               	btfsc	status,2,c
  3819   001F34  EF9E  F00F         	goto	u801
  3820   001F38  EFA0  F00F         	goto	u800
  3821   001F3C                     u801:
  3822   001F3C  EFC8  F00F         	goto	l1057
  3823   001F40                     u800:
  3824   001F40  0E01               	movlw	1
  3825   001F42  6E15               	movwf	___lwdiv@counter^0,c
  3826   001F44  EFA8  F00F         	goto	l2046
  3827   001F48                     l2044:
  3828   001F48  90D8               	bcf	status,0,c
  3829   001F4A  3611               	rlcf	___lwdiv@divisor^0,f,c
  3830   001F4C  3612               	rlcf	(___lwdiv@divisor+1)^0,f,c
  3831   001F4E  2A15               	incf	___lwdiv@counter^0,f,c
  3832   001F50                     l2046:
  3833   001F50  AE12               	btfss	(___lwdiv@divisor+1)^0,7,c
  3834   001F52  EFAD  F00F         	goto	u811
  3835   001F56  EFAF  F00F         	goto	u810
  3836   001F5A                     u811:
  3837   001F5A  EFA4  F00F         	goto	l2044
  3838   001F5E                     u810:
  3839   001F5E                     l2048:
  3840   001F5E  90D8               	bcf	status,0,c
  3841   001F60  3613               	rlcf	___lwdiv@quotient^0,f,c
  3842   001F62  3614               	rlcf	(___lwdiv@quotient+1)^0,f,c
  3843   001F64  5011               	movf	___lwdiv@divisor^0,w,c
  3844   001F66  5C0F               	subwf	___lwdiv@dividend^0,w,c
  3845   001F68  5012               	movf	(___lwdiv@divisor+1)^0,w,c
  3846   001F6A  5810               	subwfb	(___lwdiv@dividend+1)^0,w,c
  3847   001F6C  A0D8               	btfss	status,0,c
  3848   001F6E  EFBB  F00F         	goto	u821
  3849   001F72  EFBD  F00F         	goto	u820
  3850   001F76                     u821:
  3851   001F76  EFC2  F00F         	goto	l2056
  3852   001F7A                     u820:
  3853   001F7A  5011               	movf	___lwdiv@divisor^0,w,c
  3854   001F7C  5E0F               	subwf	___lwdiv@dividend^0,f,c
  3855   001F7E  5012               	movf	(___lwdiv@divisor+1)^0,w,c
  3856   001F80  5A10               	subwfb	(___lwdiv@dividend+1)^0,f,c
  3857   001F82  8013               	bsf	___lwdiv@quotient^0,0,c
  3858   001F84                     l2056:
  3859   001F84  90D8               	bcf	status,0,c
  3860   001F86  3212               	rrcf	(___lwdiv@divisor+1)^0,f,c
  3861   001F88  3211               	rrcf	___lwdiv@divisor^0,f,c
  3862   001F8A  2E15               	decfsz	___lwdiv@counter^0,f,c
  3863   001F8C  EFAF  F00F         	goto	l2048
  3864   001F90                     l1057:
  3865   001F90  C013  F00F         	movff	___lwdiv@quotient,?___lwdiv
  3866   001F94  C014  F010         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3867   001F98  0012               	return		;funcret
  3868   001F9A                     __end_of___lwdiv:
  3869                           	callstack 0
  3870                           
  3871 ;; *************** function _color_read_RGBC *****************
  3872 ;; Defined at:
  3873 ;;		line 94 in file "color.c"
  3874 ;; Parameters:    Size  Location     Type
  3875 ;;  temp            2   19[COMRAM] PTR struct RGBC_val
  3876 ;;		 -> main@RGBC(14), 
  3877 ;; Auto vars:     Size  Location     Type
  3878 ;;		None
  3879 ;; Return value:  Size  Location     Type
  3880 ;;                  1    wreg      void 
  3881 ;; Registers used:
  3882 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3883 ;; Tracked objects:
  3884 ;;		On entry : 0/0
  3885 ;;		On exit  : 0/0
  3886 ;;		Unchanged: 0/0
  3887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3888 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3891 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3892 ;;Total ram usage:        2 bytes
  3893 ;; Hardware stack levels used: 1
  3894 ;; Hardware stack levels required when called: 9
  3895 ;; This function calls:
  3896 ;;		_color_read_Blue
  3897 ;;		_color_read_Clear
  3898 ;;		_color_read_Green
  3899 ;;		_color_read_Red
  3900 ;; This function is called by:
  3901 ;;		_main
  3902 ;; This function uses a non-reentrant model
  3903 ;;
  3904                           
  3905                           	psect	text16
  3906   002152                     __ptext16:
  3907                           	callstack 0
  3908   002152                     _color_read_RGBC:
  3909                           	callstack 21
  3910   002152                     
  3911                           ;color.c: 95:     temp->R = color_read_Red();
  3912   002152  ECD8  F010         	call	_color_read_Red	;wreg free
  3913   002156  C014  FFD9         	movff	color_read_RGBC@temp,fsr2l
  3914   00215A  C015  FFDA         	movff	color_read_RGBC@temp+1,fsr2h
  3915   00215E  C00D  FFDE         	movff	?_color_read_Red,postinc2
  3916   002162  C00E  FFDD         	movff	?_color_read_Red+1,postdec2
  3917                           
  3918                           ;color.c: 96:     temp->B = color_read_Blue();
  3919   002166  EC50  F011         	call	_color_read_Blue	;wreg free
  3920   00216A  EE20 F004          	lfsr	2,4
  3921   00216E  5014               	movf	color_read_RGBC@temp^0,w,c
  3922   002170  26D9               	addwf	fsr2l,f,c
  3923   002172  5015               	movf	(color_read_RGBC@temp+1)^0,w,c
  3924   002174  22DA               	addwfc	fsr2h,f,c
  3925   002176  C00D  FFDE         	movff	?_color_read_Blue,postinc2
  3926   00217A  C00E  FFDD         	movff	?_color_read_Blue+1,postdec2
  3927                           
  3928                           ;color.c: 97:     temp->G = color_read_Green();
  3929   00217E  EC00  F011         	call	_color_read_Green	;wreg free
  3930   002182  EE20 F002          	lfsr	2,2
  3931   002186  5014               	movf	color_read_RGBC@temp^0,w,c
  3932   002188  26D9               	addwf	fsr2l,f,c
  3933   00218A  5015               	movf	(color_read_RGBC@temp+1)^0,w,c
  3934   00218C  22DA               	addwfc	fsr2h,f,c
  3935   00218E  C00D  FFDE         	movff	?_color_read_Green,postinc2
  3936   002192  C00E  FFDD         	movff	?_color_read_Green+1,postdec2
  3937                           
  3938                           ;color.c: 98:     temp->C = color_read_Clear();
  3939   002196  EC28  F011         	call	_color_read_Clear	;wreg free
  3940   00219A  EE20 F006          	lfsr	2,6
  3941   00219E  5014               	movf	color_read_RGBC@temp^0,w,c
  3942   0021A0  26D9               	addwf	fsr2l,f,c
  3943   0021A2  5015               	movf	(color_read_RGBC@temp+1)^0,w,c
  3944   0021A4  22DA               	addwfc	fsr2h,f,c
  3945   0021A6  C00D  FFDE         	movff	?_color_read_Clear,postinc2
  3946   0021AA  C00E  FFDD         	movff	?_color_read_Clear+1,postdec2
  3947   0021AE  0012               	return		;funcret
  3948   0021B0                     __end_of_color_read_RGBC:
  3949                           	callstack 0
  3950                           
  3951 ;; *************** function _color_read_Red *****************
  3952 ;; Defined at:
  3953 ;;		line 35 in file "color.c"
  3954 ;; Parameters:    Size  Location     Type
  3955 ;;		None
  3956 ;; Auto vars:     Size  Location     Type
  3957 ;;  tmp             2   17[COMRAM] unsigned int 
  3958 ;; Return value:  Size  Location     Type
  3959 ;;                  2   12[COMRAM] unsigned int 
  3960 ;; Registers used:
  3961 ;;		wreg, status,2, status,0, cstack
  3962 ;; Tracked objects:
  3963 ;;		On entry : 0/0
  3964 ;;		On exit  : 0/0
  3965 ;;		Unchanged: 0/0
  3966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3967 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3968 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3969 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3970 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3971 ;;Total ram usage:        7 bytes
  3972 ;; Hardware stack levels used: 1
  3973 ;; Hardware stack levels required when called: 8
  3974 ;; This function calls:
  3975 ;;		_I2C_2_Master_Read
  3976 ;;		_I2C_2_Master_RepStart
  3977 ;;		_I2C_2_Master_Start
  3978 ;;		_I2C_2_Master_Stop
  3979 ;;		_I2C_2_Master_Write
  3980 ;; This function is called by:
  3981 ;;		_color_read_RGBC
  3982 ;; This function uses a non-reentrant model
  3983 ;;
  3984                           
  3985                           	psect	text17
  3986   0021B0                     __ptext17:
  3987                           	callstack 0
  3988   0021B0                     _color_read_Red:
  3989                           	callstack 21
  3990   0021B0                     
  3991                           ;color.c: 37:  unsigned int tmp;;color.c: 38:  I2C_2_Master_Start();
  3992   0021B0  ECE6  F012         	call	_I2C_2_Master_Start	;wreg free
  3993                           
  3994                           ;color.c: 39:  I2C_2_Master_Write(0x52 | 0x00);
  3995   0021B4  0E52               	movlw	82
  3996   0021B6  ECCA  F012         	call	_I2C_2_Master_Write
  3997                           
  3998                           ;color.c: 40:  I2C_2_Master_Write(0xA0 | 0x16);
  3999   0021BA  0EB6               	movlw	182
  4000   0021BC  ECCA  F012         	call	_I2C_2_Master_Write
  4001                           
  4002                           ;color.c: 41:  I2C_2_Master_RepStart();
  4003   0021C0  ECDC  F012         	call	_I2C_2_Master_RepStart	;wreg free
  4004                           
  4005                           ;color.c: 42:  I2C_2_Master_Write(0x52 | 0x01);
  4006   0021C4  0E53               	movlw	83
  4007   0021C6  ECCA  F012         	call	_I2C_2_Master_Write
  4008                           
  4009                           ;color.c: 43:  tmp=I2C_2_Master_Read(1);
  4010   0021CA  0E01               	movlw	1
  4011   0021CC  EC78  F011         	call	_I2C_2_Master_Read
  4012   0021D0  6E0F               	movwf	??_color_read_Red^0,c
  4013   0021D2  500F               	movf	??_color_read_Red^0,w,c
  4014   0021D4  6E12               	movwf	color_read_Red@tmp^0,c
  4015   0021D6  6A13               	clrf	(color_read_Red@tmp+1)^0,c
  4016                           
  4017                           ;color.c: 44:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  4018   0021D8  0E00               	movlw	0
  4019   0021DA  EC78  F011         	call	_I2C_2_Master_Read
  4020   0021DE  6E0F               	movwf	??_color_read_Red^0,c
  4021   0021E0  500F               	movf	??_color_read_Red^0,w,c
  4022   0021E2  6E11               	movwf	(??_color_read_Red+2)^0,c
  4023   0021E4  6A10               	clrf	(??_color_read_Red+1)^0,c
  4024   0021E6  5012               	movf	color_read_Red@tmp^0,w,c
  4025   0021E8  1010               	iorwf	(??_color_read_Red+1)^0,w,c
  4026   0021EA  6E12               	movwf	color_read_Red@tmp^0,c
  4027   0021EC  5013               	movf	(color_read_Red@tmp+1)^0,w,c
  4028   0021EE  1011               	iorwf	(??_color_read_Red+2)^0,w,c
  4029   0021F0  6E13               	movwf	(color_read_Red@tmp+1)^0,c
  4030                           
  4031                           ;color.c: 45:  I2C_2_Master_Stop();
  4032   0021F2  ECE1  F012         	call	_I2C_2_Master_Stop	;wreg free
  4033   0021F6                     
  4034                           ;color.c: 46:  return tmp;
  4035   0021F6  C012  F00D         	movff	color_read_Red@tmp,?_color_read_Red
  4036   0021FA  C013  F00E         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  4037   0021FE  0012               	return		;funcret
  4038   002200                     __end_of_color_read_Red:
  4039                           	callstack 0
  4040                           
  4041 ;; *************** function _color_read_Green *****************
  4042 ;; Defined at:
  4043 ;;		line 49 in file "color.c"
  4044 ;; Parameters:    Size  Location     Type
  4045 ;;		None
  4046 ;; Auto vars:     Size  Location     Type
  4047 ;;  tmp             2   17[COMRAM] unsigned int 
  4048 ;; Return value:  Size  Location     Type
  4049 ;;                  2   12[COMRAM] unsigned int 
  4050 ;; Registers used:
  4051 ;;		wreg, status,2, status,0, cstack
  4052 ;; Tracked objects:
  4053 ;;		On entry : 0/0
  4054 ;;		On exit  : 0/0
  4055 ;;		Unchanged: 0/0
  4056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4057 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4058 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4059 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4060 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4061 ;;Total ram usage:        7 bytes
  4062 ;; Hardware stack levels used: 1
  4063 ;; Hardware stack levels required when called: 8
  4064 ;; This function calls:
  4065 ;;		_I2C_2_Master_Read
  4066 ;;		_I2C_2_Master_RepStart
  4067 ;;		_I2C_2_Master_Start
  4068 ;;		_I2C_2_Master_Stop
  4069 ;;		_I2C_2_Master_Write
  4070 ;; This function is called by:
  4071 ;;		_color_read_RGBC
  4072 ;; This function uses a non-reentrant model
  4073 ;;
  4074                           
  4075                           	psect	text18
  4076   002200                     __ptext18:
  4077                           	callstack 0
  4078   002200                     _color_read_Green:
  4079                           	callstack 21
  4080   002200                     
  4081                           ;color.c: 51:  unsigned int tmp;;color.c: 52:  I2C_2_Master_Start();
  4082   002200  ECE6  F012         	call	_I2C_2_Master_Start	;wreg free
  4083                           
  4084                           ;color.c: 53:  I2C_2_Master_Write(0x52 | 0x00);
  4085   002204  0E52               	movlw	82
  4086   002206  ECCA  F012         	call	_I2C_2_Master_Write
  4087                           
  4088                           ;color.c: 54:  I2C_2_Master_Write(0xA0 | 0x18);
  4089   00220A  0EB8               	movlw	184
  4090   00220C  ECCA  F012         	call	_I2C_2_Master_Write
  4091                           
  4092                           ;color.c: 55:  I2C_2_Master_RepStart();
  4093   002210  ECDC  F012         	call	_I2C_2_Master_RepStart	;wreg free
  4094                           
  4095                           ;color.c: 56:  I2C_2_Master_Write(0x52 | 0x01);
  4096   002214  0E53               	movlw	83
  4097   002216  ECCA  F012         	call	_I2C_2_Master_Write
  4098                           
  4099                           ;color.c: 57:  tmp=I2C_2_Master_Read(1);
  4100   00221A  0E01               	movlw	1
  4101   00221C  EC78  F011         	call	_I2C_2_Master_Read
  4102   002220  6E0F               	movwf	??_color_read_Green^0,c
  4103   002222  500F               	movf	??_color_read_Green^0,w,c
  4104   002224  6E12               	movwf	color_read_Green@tmp^0,c
  4105   002226  6A13               	clrf	(color_read_Green@tmp+1)^0,c
  4106                           
  4107                           ;color.c: 58:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  4108   002228  0E00               	movlw	0
  4109   00222A  EC78  F011         	call	_I2C_2_Master_Read
  4110   00222E  6E0F               	movwf	??_color_read_Green^0,c
  4111   002230  500F               	movf	??_color_read_Green^0,w,c
  4112   002232  6E11               	movwf	(??_color_read_Green+2)^0,c
  4113   002234  6A10               	clrf	(??_color_read_Green+1)^0,c
  4114   002236  5012               	movf	color_read_Green@tmp^0,w,c
  4115   002238  1010               	iorwf	(??_color_read_Green+1)^0,w,c
  4116   00223A  6E12               	movwf	color_read_Green@tmp^0,c
  4117   00223C  5013               	movf	(color_read_Green@tmp+1)^0,w,c
  4118   00223E  1011               	iorwf	(??_color_read_Green+2)^0,w,c
  4119   002240  6E13               	movwf	(color_read_Green@tmp+1)^0,c
  4120                           
  4121                           ;color.c: 59:  I2C_2_Master_Stop();
  4122   002242  ECE1  F012         	call	_I2C_2_Master_Stop	;wreg free
  4123   002246                     
  4124                           ;color.c: 60:  return tmp;
  4125   002246  C012  F00D         	movff	color_read_Green@tmp,?_color_read_Green
  4126   00224A  C013  F00E         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  4127   00224E  0012               	return		;funcret
  4128   002250                     __end_of_color_read_Green:
  4129                           	callstack 0
  4130                           
  4131 ;; *************** function _color_read_Clear *****************
  4132 ;; Defined at:
  4133 ;;		line 77 in file "color.c"
  4134 ;; Parameters:    Size  Location     Type
  4135 ;;		None
  4136 ;; Auto vars:     Size  Location     Type
  4137 ;;  tmp             2   17[COMRAM] unsigned int 
  4138 ;; Return value:  Size  Location     Type
  4139 ;;                  2   12[COMRAM] unsigned int 
  4140 ;; Registers used:
  4141 ;;		wreg, status,2, status,0, cstack
  4142 ;; Tracked objects:
  4143 ;;		On entry : 0/0
  4144 ;;		On exit  : 0/0
  4145 ;;		Unchanged: 0/0
  4146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4147 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4148 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4149 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4150 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4151 ;;Total ram usage:        7 bytes
  4152 ;; Hardware stack levels used: 1
  4153 ;; Hardware stack levels required when called: 8
  4154 ;; This function calls:
  4155 ;;		_I2C_2_Master_Read
  4156 ;;		_I2C_2_Master_RepStart
  4157 ;;		_I2C_2_Master_Start
  4158 ;;		_I2C_2_Master_Stop
  4159 ;;		_I2C_2_Master_Write
  4160 ;; This function is called by:
  4161 ;;		_color_read_RGBC
  4162 ;; This function uses a non-reentrant model
  4163 ;;
  4164                           
  4165                           	psect	text19
  4166   002250                     __ptext19:
  4167                           	callstack 0
  4168   002250                     _color_read_Clear:
  4169                           	callstack 21
  4170   002250                     
  4171                           ;color.c: 79:  unsigned int tmp;;color.c: 80:  I2C_2_Master_Start();
  4172   002250  ECE6  F012         	call	_I2C_2_Master_Start	;wreg free
  4173                           
  4174                           ;color.c: 81:  I2C_2_Master_Write(0x52 | 0x00);
  4175   002254  0E52               	movlw	82
  4176   002256  ECCA  F012         	call	_I2C_2_Master_Write
  4177                           
  4178                           ;color.c: 82:  I2C_2_Master_Write(0xA0 | 0x14);
  4179   00225A  0EB4               	movlw	180
  4180   00225C  ECCA  F012         	call	_I2C_2_Master_Write
  4181                           
  4182                           ;color.c: 83:  I2C_2_Master_RepStart();
  4183   002260  ECDC  F012         	call	_I2C_2_Master_RepStart	;wreg free
  4184                           
  4185                           ;color.c: 84:  I2C_2_Master_Write(0x52 | 0x01);
  4186   002264  0E53               	movlw	83
  4187   002266  ECCA  F012         	call	_I2C_2_Master_Write
  4188                           
  4189                           ;color.c: 85:  tmp=I2C_2_Master_Read(1);
  4190   00226A  0E01               	movlw	1
  4191   00226C  EC78  F011         	call	_I2C_2_Master_Read
  4192   002270  6E0F               	movwf	??_color_read_Clear^0,c
  4193   002272  500F               	movf	??_color_read_Clear^0,w,c
  4194   002274  6E12               	movwf	color_read_Clear@tmp^0,c
  4195   002276  6A13               	clrf	(color_read_Clear@tmp+1)^0,c
  4196                           
  4197                           ;color.c: 86:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  4198   002278  0E00               	movlw	0
  4199   00227A  EC78  F011         	call	_I2C_2_Master_Read
  4200   00227E  6E0F               	movwf	??_color_read_Clear^0,c
  4201   002280  500F               	movf	??_color_read_Clear^0,w,c
  4202   002282  6E11               	movwf	(??_color_read_Clear+2)^0,c
  4203   002284  6A10               	clrf	(??_color_read_Clear+1)^0,c
  4204   002286  5012               	movf	color_read_Clear@tmp^0,w,c
  4205   002288  1010               	iorwf	(??_color_read_Clear+1)^0,w,c
  4206   00228A  6E12               	movwf	color_read_Clear@tmp^0,c
  4207   00228C  5013               	movf	(color_read_Clear@tmp+1)^0,w,c
  4208   00228E  1011               	iorwf	(??_color_read_Clear+2)^0,w,c
  4209   002290  6E13               	movwf	(color_read_Clear@tmp+1)^0,c
  4210                           
  4211                           ;color.c: 87:  I2C_2_Master_Stop();
  4212   002292  ECE1  F012         	call	_I2C_2_Master_Stop	;wreg free
  4213   002296                     
  4214                           ;color.c: 88:  return tmp;
  4215   002296  C012  F00D         	movff	color_read_Clear@tmp,?_color_read_Clear
  4216   00229A  C013  F00E         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  4217   00229E  0012               	return		;funcret
  4218   0022A0                     __end_of_color_read_Clear:
  4219                           	callstack 0
  4220                           
  4221 ;; *************** function _color_read_Blue *****************
  4222 ;; Defined at:
  4223 ;;		line 63 in file "color.c"
  4224 ;; Parameters:    Size  Location     Type
  4225 ;;		None
  4226 ;; Auto vars:     Size  Location     Type
  4227 ;;  tmp             2   17[COMRAM] unsigned int 
  4228 ;; Return value:  Size  Location     Type
  4229 ;;                  2   12[COMRAM] unsigned int 
  4230 ;; Registers used:
  4231 ;;		wreg, status,2, status,0, cstack
  4232 ;; Tracked objects:
  4233 ;;		On entry : 0/0
  4234 ;;		On exit  : 0/0
  4235 ;;		Unchanged: 0/0
  4236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4237 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4238 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4239 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4240 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4241 ;;Total ram usage:        7 bytes
  4242 ;; Hardware stack levels used: 1
  4243 ;; Hardware stack levels required when called: 8
  4244 ;; This function calls:
  4245 ;;		_I2C_2_Master_Read
  4246 ;;		_I2C_2_Master_RepStart
  4247 ;;		_I2C_2_Master_Start
  4248 ;;		_I2C_2_Master_Stop
  4249 ;;		_I2C_2_Master_Write
  4250 ;; This function is called by:
  4251 ;;		_color_read_RGBC
  4252 ;; This function uses a non-reentrant model
  4253 ;;
  4254                           
  4255                           	psect	text20
  4256   0022A0                     __ptext20:
  4257                           	callstack 0
  4258   0022A0                     _color_read_Blue:
  4259                           	callstack 21
  4260   0022A0                     
  4261                           ;color.c: 65:  unsigned int tmp;;color.c: 66:  I2C_2_Master_Start();
  4262   0022A0  ECE6  F012         	call	_I2C_2_Master_Start	;wreg free
  4263                           
  4264                           ;color.c: 67:  I2C_2_Master_Write(0x52 | 0x00);
  4265   0022A4  0E52               	movlw	82
  4266   0022A6  ECCA  F012         	call	_I2C_2_Master_Write
  4267                           
  4268                           ;color.c: 68:  I2C_2_Master_Write(0xA0 | 0x1A);
  4269   0022AA  0EBA               	movlw	186
  4270   0022AC  ECCA  F012         	call	_I2C_2_Master_Write
  4271                           
  4272                           ;color.c: 69:  I2C_2_Master_RepStart();
  4273   0022B0  ECDC  F012         	call	_I2C_2_Master_RepStart	;wreg free
  4274                           
  4275                           ;color.c: 70:  I2C_2_Master_Write(0x52 | 0x01);
  4276   0022B4  0E53               	movlw	83
  4277   0022B6  ECCA  F012         	call	_I2C_2_Master_Write
  4278                           
  4279                           ;color.c: 71:  tmp=I2C_2_Master_Read(1);
  4280   0022BA  0E01               	movlw	1
  4281   0022BC  EC78  F011         	call	_I2C_2_Master_Read
  4282   0022C0  6E0F               	movwf	??_color_read_Blue^0,c
  4283   0022C2  500F               	movf	??_color_read_Blue^0,w,c
  4284   0022C4  6E12               	movwf	color_read_Blue@tmp^0,c
  4285   0022C6  6A13               	clrf	(color_read_Blue@tmp+1)^0,c
  4286                           
  4287                           ;color.c: 72:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  4288   0022C8  0E00               	movlw	0
  4289   0022CA  EC78  F011         	call	_I2C_2_Master_Read
  4290   0022CE  6E0F               	movwf	??_color_read_Blue^0,c
  4291   0022D0  500F               	movf	??_color_read_Blue^0,w,c
  4292   0022D2  6E11               	movwf	(??_color_read_Blue+2)^0,c
  4293   0022D4  6A10               	clrf	(??_color_read_Blue+1)^0,c
  4294   0022D6  5012               	movf	color_read_Blue@tmp^0,w,c
  4295   0022D8  1010               	iorwf	(??_color_read_Blue+1)^0,w,c
  4296   0022DA  6E12               	movwf	color_read_Blue@tmp^0,c
  4297   0022DC  5013               	movf	(color_read_Blue@tmp+1)^0,w,c
  4298   0022DE  1011               	iorwf	(??_color_read_Blue+2)^0,w,c
  4299   0022E0  6E13               	movwf	(color_read_Blue@tmp+1)^0,c
  4300                           
  4301                           ;color.c: 73:  I2C_2_Master_Stop();
  4302   0022E2  ECE1  F012         	call	_I2C_2_Master_Stop	;wreg free
  4303   0022E6                     
  4304                           ;color.c: 74:  return tmp;
  4305   0022E6  C012  F00D         	movff	color_read_Blue@tmp,?_color_read_Blue
  4306   0022EA  C013  F00E         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  4307   0022EE  0012               	return		;funcret
  4308   0022F0                     __end_of_color_read_Blue:
  4309                           	callstack 0
  4310                           
  4311 ;; *************** function _I2C_2_Master_RepStart *****************
  4312 ;; Defined at:
  4313 ;;		line 33 in file "i2c.c"
  4314 ;; Parameters:    Size  Location     Type
  4315 ;;		None
  4316 ;; Auto vars:     Size  Location     Type
  4317 ;;		None
  4318 ;; Return value:  Size  Location     Type
  4319 ;;                  1    wreg      void 
  4320 ;; Registers used:
  4321 ;;		wreg, status,2, status,0, cstack
  4322 ;; Tracked objects:
  4323 ;;		On entry : 0/0
  4324 ;;		On exit  : 0/0
  4325 ;;		Unchanged: 0/0
  4326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4331 ;;Total ram usage:        0 bytes
  4332 ;; Hardware stack levels used: 1
  4333 ;; Hardware stack levels required when called: 7
  4334 ;; This function calls:
  4335 ;;		_I2C_2_Master_Idle
  4336 ;; This function is called by:
  4337 ;;		_color_read_Red
  4338 ;;		_color_read_Green
  4339 ;;		_color_read_Blue
  4340 ;;		_color_read_Clear
  4341 ;; This function uses a non-reentrant model
  4342 ;;
  4343                           
  4344                           	psect	text21
  4345   0025B8                     __ptext21:
  4346                           	callstack 0
  4347   0025B8                     _I2C_2_Master_RepStart:
  4348                           	callstack 21
  4349   0025B8                     
  4350                           ;i2c.c: 35:   I2C_2_Master_Idle();
  4351   0025B8  EC39  F012         	call	_I2C_2_Master_Idle	;wreg free
  4352   0025BC                     
  4353                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  4354   0025BC  010E               	movlb	14	; () banked
  4355   0025BE  83DA               	bsf	218,1,b	;volatile
  4356   0025C0                     
  4357                           ; BSR set to: 14
  4358   0025C0  0012               	return		;funcret
  4359   0025C2                     __end_of_I2C_2_Master_RepStart:
  4360                           	callstack 0
  4361                           
  4362 ;; *************** function _I2C_2_Master_Read *****************
  4363 ;; Defined at:
  4364 ;;		line 51 in file "i2c.c"
  4365 ;; Parameters:    Size  Location     Type
  4366 ;;  ack             1    wreg     unsigned char 
  4367 ;; Auto vars:     Size  Location     Type
  4368 ;;  ack             1   10[COMRAM] unsigned char 
  4369 ;;  tmp             1   11[COMRAM] unsigned char 
  4370 ;; Return value:  Size  Location     Type
  4371 ;;                  1    wreg      unsigned char 
  4372 ;; Registers used:
  4373 ;;		wreg, status,2, status,0, cstack
  4374 ;; Tracked objects:
  4375 ;;		On entry : 0/0
  4376 ;;		On exit  : 0/0
  4377 ;;		Unchanged: 0/0
  4378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4380 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4381 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4382 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4383 ;;Total ram usage:        3 bytes
  4384 ;; Hardware stack levels used: 1
  4385 ;; Hardware stack levels required when called: 7
  4386 ;; This function calls:
  4387 ;;		_I2C_2_Master_Idle
  4388 ;; This function is called by:
  4389 ;;		_color_read_Red
  4390 ;;		_color_read_Green
  4391 ;;		_color_read_Blue
  4392 ;;		_color_read_Clear
  4393 ;; This function uses a non-reentrant model
  4394 ;;
  4395                           
  4396                           	psect	text22
  4397   0022F0                     __ptext22:
  4398                           	callstack 0
  4399   0022F0                     _I2C_2_Master_Read:
  4400                           	callstack 21
  4401                           
  4402                           ; BSR set to: 14
  4403                           ;incstack = 0
  4404                           ;I2C_2_Master_Read@ack stored from wreg
  4405   0022F0  6E0B               	movwf	I2C_2_Master_Read@ack^0,c
  4406   0022F2                     
  4407                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  4408   0022F2  EC39  F012         	call	_I2C_2_Master_Idle	;wreg free
  4409   0022F6                     
  4410                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  4411   0022F6  010E               	movlb	14	; () banked
  4412   0022F8  87DA               	bsf	218,3,b	;volatile
  4413                           
  4414                           ;i2c.c: 56:   I2C_2_Master_Idle();
  4415   0022FA  EC39  F012         	call	_I2C_2_Master_Idle	;wreg free
  4416   0022FE                     
  4417                           ;i2c.c: 57:   tmp = SSP2BUF;
  4418   0022FE  CED5 F00C          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  4419                           
  4420                           ;i2c.c: 58:   I2C_2_Master_Idle();
  4421   002302  EC39  F012         	call	_I2C_2_Master_Idle	;wreg free
  4422   002306                     
  4423                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  4424   002306  500B               	movf	I2C_2_Master_Read@ack^0,w,c
  4425   002308  B4D8               	btfsc	status,2,c
  4426   00230A  EF89  F011         	goto	u831
  4427   00230E  EF8D  F011         	goto	u830
  4428   002312                     u831:
  4429   002312  6A0A               	clrf	??_I2C_2_Master_Read^0,c
  4430   002314  2A0A               	incf	??_I2C_2_Master_Read^0,f,c
  4431   002316  EF8E  F011         	goto	u848
  4432   00231A                     u830:
  4433   00231A  6A0A               	clrf	??_I2C_2_Master_Read^0,c
  4434   00231C                     u848:
  4435   00231C  3A0A               	swapf	??_I2C_2_Master_Read^0,f,c
  4436   00231E  460A               	rlncf	??_I2C_2_Master_Read^0,f,c
  4437   002320  010E               	movlb	14	; () banked
  4438   002322  51DA               	movf	218,w,b	;volatile
  4439   002324  180A               	xorwf	??_I2C_2_Master_Read^0,w,c
  4440   002326  0BDF               	andlw	-33
  4441   002328  180A               	xorwf	??_I2C_2_Master_Read^0,w,c
  4442   00232A  6FDA               	movwf	218,b	;volatile
  4443   00232C                     
  4444                           ; BSR set to: 14
  4445                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  4446   00232C  89DA               	bsf	218,4,b	;volatile
  4447   00232E                     
  4448                           ; BSR set to: 14
  4449                           ;i2c.c: 61:   return tmp;
  4450   00232E  500C               	movf	I2C_2_Master_Read@tmp^0,w,c
  4451   002330                     
  4452                           ; BSR set to: 14
  4453   002330  0012               	return		;funcret
  4454   002332                     __end_of_I2C_2_Master_Read:
  4455                           	callstack 0
  4456                           
  4457 ;; *************** function _color_click_init *****************
  4458 ;; Defined at:
  4459 ;;		line 11 in file "color.c"
  4460 ;; Parameters:    Size  Location     Type
  4461 ;;		None
  4462 ;; Auto vars:     Size  Location     Type
  4463 ;;		None
  4464 ;; Return value:  Size  Location     Type
  4465 ;;                  1    wreg      void 
  4466 ;; Registers used:
  4467 ;;		wreg, status,2, status,0, cstack
  4468 ;; Tracked objects:
  4469 ;;		On entry : 0/0
  4470 ;;		On exit  : 0/0
  4471 ;;		Unchanged: 0/0
  4472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4475 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4476 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4477 ;;Total ram usage:        1 bytes
  4478 ;; Hardware stack levels used: 1
  4479 ;; Hardware stack levels required when called: 9
  4480 ;; This function calls:
  4481 ;;		_I2C_2_Master_Init
  4482 ;;		_color_writetoaddr
  4483 ;; This function is called by:
  4484 ;;		_main
  4485 ;; This function uses a non-reentrant model
  4486 ;;
  4487                           
  4488                           	psect	text23
  4489   002332                     __ptext23:
  4490                           	callstack 0
  4491   002332                     _color_click_init:
  4492                           	callstack 21
  4493   002332                     
  4494                           ;color.c: 14:     I2C_2_Master_Init();
  4495   002332  ECFA  F011         	call	_I2C_2_Master_Init	;wreg free
  4496   002336                     
  4497                           ;color.c: 17:   color_writetoaddr(0x00, 0x01);
  4498   002336  0E01               	movlw	1
  4499   002338  6E0B               	movwf	color_writetoaddr@value^0,c
  4500   00233A  0E00               	movlw	0
  4501   00233C  EC74  F012         	call	_color_writetoaddr
  4502   002340                     
  4503                           ;color.c: 18:     _delay((unsigned long)((3)*(64000000/4000.0)));
  4504   002340  0E3F               	movlw	63
  4505   002342  6E0D               	movwf	??_color_click_init^0,c
  4506   002344  0E55               	movlw	85
  4507   002346                     u1817:
  4508   002346  2EE8               	decfsz	wreg,f,c
  4509   002348  D7FE               	bra	u1817
  4510   00234A  2E0D               	decfsz	??_color_click_init^0,f,c
  4511   00234C  D7FC               	bra	u1817
  4512   00234E  F000               	nop	
  4513   002350                     
  4514                           ;color.c: 21:  color_writetoaddr(0x00, 0x03);
  4515   002350  0E03               	movlw	3
  4516   002352  6E0B               	movwf	color_writetoaddr@value^0,c
  4517   002354  0E00               	movlw	0
  4518   002356  EC74  F012         	call	_color_writetoaddr
  4519   00235A                     
  4520                           ;color.c: 24:  color_writetoaddr(0x01, 0xD5);
  4521   00235A  0ED5               	movlw	213
  4522   00235C  6E0B               	movwf	color_writetoaddr@value^0,c
  4523   00235E  0E01               	movlw	1
  4524   002360  EC74  F012         	call	_color_writetoaddr
  4525   002364  0012               	return		;funcret
  4526   002366                     __end_of_color_click_init:
  4527                           	callstack 0
  4528                           
  4529 ;; *************** function _I2C_2_Master_Init *****************
  4530 ;; Defined at:
  4531 ;;		line 4 in file "i2c.c"
  4532 ;; Parameters:    Size  Location     Type
  4533 ;;		None
  4534 ;; Auto vars:     Size  Location     Type
  4535 ;;		None
  4536 ;; Return value:  Size  Location     Type
  4537 ;;                  1    wreg      void 
  4538 ;; Registers used:
  4539 ;;		wreg, status,2
  4540 ;; Tracked objects:
  4541 ;;		On entry : 0/0
  4542 ;;		On exit  : 0/0
  4543 ;;		Unchanged: 0/0
  4544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4549 ;;Total ram usage:        0 bytes
  4550 ;; Hardware stack levels used: 1
  4551 ;; Hardware stack levels required when called: 6
  4552 ;; This function calls:
  4553 ;;		Nothing
  4554 ;; This function is called by:
  4555 ;;		_color_click_init
  4556 ;; This function uses a non-reentrant model
  4557 ;;
  4558                           
  4559                           	psect	text24
  4560   0023F4                     __ptext24:
  4561                           	callstack 0
  4562   0023F4                     _I2C_2_Master_Init:
  4563                           	callstack 23
  4564   0023F4                     
  4565                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  4566   0023F4  010E               	movlb	14	; () banked
  4567   0023F6  51D9               	movf	217,w,b	;volatile
  4568   0023F8  0BF0               	andlw	-16
  4569   0023FA  0908               	iorlw	8
  4570   0023FC  6FD9               	movwf	217,b	;volatile
  4571   0023FE                     
  4572                           ; BSR set to: 14
  4573                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  4574   0023FE  8BD9               	bsf	217,5,b	;volatile
  4575                           
  4576                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  4577   002400  0E9F               	movlw	159
  4578   002402  6FD6               	movwf	214,b	;volatile
  4579   002404                     
  4580                           ; BSR set to: 14
  4581                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  4582   002404  8A84               	bsf	132,5,c	;volatile
  4583   002406                     
  4584                           ; BSR set to: 14
  4585                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  4586   002406  8C84               	bsf	132,6,c	;volatile
  4587   002408                     
  4588                           ; BSR set to: 14
  4589                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  4590   002408  9BA7               	bcf	167,5,b	;volatile
  4591   00240A                     
  4592                           ; BSR set to: 14
  4593                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  4594   00240A  9DA7               	bcf	167,6,b	;volatile
  4595                           
  4596                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  4597   00240C  0E1D               	movlw	29
  4598   00240E  6F1D               	movwf	29,b	;volatile
  4599                           
  4600                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  4601   002410  0E1E               	movlw	30
  4602   002412  6F1C               	movwf	28,b	;volatile
  4603                           
  4604                           ;i2c.c: 18:   RD5PPS=0x1C;
  4605   002414  0E1C               	movlw	28
  4606   002416  6F6F               	movwf	111,b	;volatile
  4607                           
  4608                           ;i2c.c: 19:   RD6PPS=0x1B;
  4609   002418  0E1B               	movlw	27
  4610   00241A  6F70               	movwf	112,b	;volatile
  4611   00241C                     
  4612                           ; BSR set to: 14
  4613   00241C  0012               	return		;funcret
  4614   00241E                     __end_of_I2C_2_Master_Init:
  4615                           	callstack 0
  4616                           
  4617 ;; *************** function _Interrupts_init *****************
  4618 ;; Defined at:
  4619 ;;		line 10 in file "interrupts.c"
  4620 ;; Parameters:    Size  Location     Type
  4621 ;;		None
  4622 ;; Auto vars:     Size  Location     Type
  4623 ;;		None
  4624 ;; Return value:  Size  Location     Type
  4625 ;;                  1    wreg      void 
  4626 ;; Registers used:
  4627 ;;		None
  4628 ;; Tracked objects:
  4629 ;;		On entry : 0/0
  4630 ;;		On exit  : 0/0
  4631 ;;		Unchanged: 0/0
  4632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4636 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4637 ;;Total ram usage:        0 bytes
  4638 ;; Hardware stack levels used: 1
  4639 ;; Hardware stack levels required when called: 6
  4640 ;; This function calls:
  4641 ;;		Nothing
  4642 ;; This function is called by:
  4643 ;;		_main
  4644 ;; This function uses a non-reentrant model
  4645 ;;
  4646                           
  4647                           	psect	text25
  4648   002572                     __ptext25:
  4649                           	callstack 0
  4650   002572                     _Interrupts_init:
  4651                           	callstack 24
  4652   002572                     
  4653                           ;interrupts.c: 15:     TRISBbits.TRISB0=1;
  4654   002572  8082               	bsf	130,0,c	;volatile
  4655                           
  4656                           ;interrupts.c: 17:     ANSELBbits.ANSELB0=0;
  4657   002574  010E               	movlb	14	; () banked
  4658   002576  919A               	bcf	154,0,b	;volatile
  4659                           
  4660                           ;interrupts.c: 18:     PIR0bits.INT0IF = 0;
  4661   002578  9133               	bcf	51,0,b	;volatile
  4662                           
  4663                           ;interrupts.c: 19:     PIE0bits.INT0IE = 1;
  4664   00257A  8129               	bsf	41,0,b	;volatile
  4665                           
  4666                           ;interrupts.c: 20:     IPR0bits.INT0IP = 1;
  4667   00257C  811F               	bsf	31,0,b	;volatile
  4668                           
  4669                           ;interrupts.c: 21:     INTCONbits.INT0EDG=0;
  4670   00257E  90F2               	bcf	242,0,c	;volatile
  4671                           
  4672                           ;interrupts.c: 23:     INTCONbits.IPEN=1;
  4673   002580  8AF2               	bsf	242,5,c	;volatile
  4674                           
  4675                           ;interrupts.c: 24:     INTCONbits.PEIE=1;
  4676   002582  8CF2               	bsf	242,6,c	;volatile
  4677                           
  4678                           ;interrupts.c: 25:     INTCONbits.GIE=1;
  4679   002584  8EF2               	bsf	242,7,c	;volatile
  4680   002586                     
  4681                           ; BSR set to: 14
  4682   002586  0012               	return		;funcret
  4683   002588                     __end_of_Interrupts_init:
  4684                           	callstack 0
  4685                           
  4686 ;; *************** function _Color_Interrupts_threshold *****************
  4687 ;; Defined at:
  4688 ;;		line 38 in file "interrupts.c"
  4689 ;; Parameters:    Size  Location     Type
  4690 ;;  upperThresho    2   12[COMRAM] unsigned int 
  4691 ;;  lowerThresho    2   14[COMRAM] unsigned int 
  4692 ;; Auto vars:     Size  Location     Type
  4693 ;;		None
  4694 ;; Return value:  Size  Location     Type
  4695 ;;                  1    wreg      void 
  4696 ;; Registers used:
  4697 ;;		wreg, status,2, status,0, cstack
  4698 ;; Tracked objects:
  4699 ;;		On entry : 0/0
  4700 ;;		On exit  : 0/0
  4701 ;;		Unchanged: 0/0
  4702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4703 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4706 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4707 ;;Total ram usage:        4 bytes
  4708 ;; Hardware stack levels used: 1
  4709 ;; Hardware stack levels required when called: 9
  4710 ;; This function calls:
  4711 ;;		_color_writetoaddr
  4712 ;; This function is called by:
  4713 ;;		_main
  4714 ;; This function uses a non-reentrant model
  4715 ;;
  4716                           
  4717                           	psect	text26
  4718   00241E                     __ptext26:
  4719                           	callstack 0
  4720   00241E                     _Color_Interrupts_threshold:
  4721                           	callstack 21
  4722   00241E                     
  4723                           ;interrupts.c: 38: void Color_Interrupts_threshold(unsigned int upperThreshold, unsigned
      +                           int lowerThreshold);interrupts.c: 39: {;interrupts.c: 40:  color_writetoaddr(0x04, lowe
      +                          rThreshold);
  4724   00241E  C00F  F00B         	movff	Color_Interrupts_threshold@lowerThreshold,color_writetoaddr@value
  4725   002422  0E04               	movlw	4
  4726   002424  EC74  F012         	call	_color_writetoaddr
  4727                           
  4728                           ;interrupts.c: 41:     color_writetoaddr(0x05, lowerThreshold>>8);
  4729   002428  5010               	movf	(Color_Interrupts_threshold@lowerThreshold+1)^0,w,c
  4730   00242A  6E0B               	movwf	color_writetoaddr@value^0,c
  4731   00242C  0E05               	movlw	5
  4732   00242E  EC74  F012         	call	_color_writetoaddr
  4733                           
  4734                           ;interrupts.c: 42:     color_writetoaddr(0x06, upperThreshold);
  4735   002432  C00D  F00B         	movff	Color_Interrupts_threshold@upperThreshold,color_writetoaddr@value
  4736   002436  0E06               	movlw	6
  4737   002438  EC74  F012         	call	_color_writetoaddr
  4738                           
  4739                           ;interrupts.c: 43:     color_writetoaddr(0x07, upperThreshold>>8);
  4740   00243C  500E               	movf	(Color_Interrupts_threshold@upperThreshold+1)^0,w,c
  4741   00243E  6E0B               	movwf	color_writetoaddr@value^0,c
  4742   002440  0E07               	movlw	7
  4743   002442  EC74  F012         	call	_color_writetoaddr
  4744   002446  0012               	return		;funcret
  4745   002448                     __end_of_Color_Interrupts_threshold:
  4746                           	callstack 0
  4747                           
  4748 ;; *************** function _Color_Interrupts_init *****************
  4749 ;; Defined at:
  4750 ;;		line 29 in file "interrupts.c"
  4751 ;; Parameters:    Size  Location     Type
  4752 ;;		None
  4753 ;; Auto vars:     Size  Location     Type
  4754 ;;		None
  4755 ;; Return value:  Size  Location     Type
  4756 ;;                  1    wreg      void 
  4757 ;; Registers used:
  4758 ;;		wreg, status,2, status,0, cstack
  4759 ;; Tracked objects:
  4760 ;;		On entry : 0/0
  4761 ;;		On exit  : 0/0
  4762 ;;		Unchanged: 0/0
  4763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4766 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4767 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4768 ;;Total ram usage:        1 bytes
  4769 ;; Hardware stack levels used: 1
  4770 ;; Hardware stack levels required when called: 9
  4771 ;; This function calls:
  4772 ;;		_color_writetoaddr
  4773 ;; This function is called by:
  4774 ;;		_main
  4775 ;; This function uses a non-reentrant model
  4776 ;;
  4777                           
  4778                           	psect	text27
  4779   002528                     __ptext27:
  4780                           	callstack 0
  4781   002528                     _Color_Interrupts_init:
  4782                           	callstack 21
  4783   002528                     
  4784                           ;interrupts.c: 33:    color_writetoaddr(0x00, 0b00010011);
  4785   002528  0E13               	movlw	19
  4786   00252A  6E0B               	movwf	color_writetoaddr@value^0,c
  4787   00252C  0E00               	movlw	0
  4788   00252E  EC74  F012         	call	_color_writetoaddr
  4789   002532                     
  4790                           ;interrupts.c: 34:    _delay((unsigned long)((10)*(64000000/4000.0))) ;
  4791   002532  0ED0               	movlw	208
  4792   002534  6E0D               	movwf	??_Color_Interrupts_init^0,c
  4793   002536  0ECA               	movlw	202
  4794   002538                     u1827:
  4795   002538  2EE8               	decfsz	wreg,f,c
  4796   00253A  D7FE               	bra	u1827
  4797   00253C  2E0D               	decfsz	??_Color_Interrupts_init^0,f,c
  4798   00253E  D7FC               	bra	u1827
  4799   002540  0012               	return		;funcret
  4800   002542                     __end_of_Color_Interrupts_init:
  4801                           	callstack 0
  4802                           
  4803 ;; *************** function _color_writetoaddr *****************
  4804 ;; Defined at:
  4805 ;;		line 27 in file "color.c"
  4806 ;; Parameters:    Size  Location     Type
  4807 ;;  address         1    wreg     unsigned char 
  4808 ;;  value           1   10[COMRAM] unsigned char 
  4809 ;; Auto vars:     Size  Location     Type
  4810 ;;  address         1   11[COMRAM] unsigned char 
  4811 ;; Return value:  Size  Location     Type
  4812 ;;                  1    wreg      void 
  4813 ;; Registers used:
  4814 ;;		wreg, status,2, status,0, cstack
  4815 ;; Tracked objects:
  4816 ;;		On entry : 0/0
  4817 ;;		On exit  : 0/0
  4818 ;;		Unchanged: 0/0
  4819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4820 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4821 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4823 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4824 ;;Total ram usage:        2 bytes
  4825 ;; Hardware stack levels used: 1
  4826 ;; Hardware stack levels required when called: 8
  4827 ;; This function calls:
  4828 ;;		_I2C_2_Master_Start
  4829 ;;		_I2C_2_Master_Stop
  4830 ;;		_I2C_2_Master_Write
  4831 ;; This function is called by:
  4832 ;;		_color_click_init
  4833 ;;		_Color_Interrupts_init
  4834 ;;		_Color_Interrupts_threshold
  4835 ;;		_persistence_register
  4836 ;; This function uses a non-reentrant model
  4837 ;;
  4838                           
  4839                           	psect	text28
  4840   0024E8                     __ptext28:
  4841                           	callstack 0
  4842   0024E8                     _color_writetoaddr:
  4843                           	callstack 21
  4844                           
  4845                           ;incstack = 0
  4846                           ;color_writetoaddr@address stored from wreg
  4847   0024E8  6E0C               	movwf	color_writetoaddr@address^0,c
  4848   0024EA                     
  4849                           ;color.c: 28:     I2C_2_Master_Start();
  4850   0024EA  ECE6  F012         	call	_I2C_2_Master_Start	;wreg free
  4851                           
  4852                           ;color.c: 29:     I2C_2_Master_Write(0x52 | 0x00);
  4853   0024EE  0E52               	movlw	82
  4854   0024F0  ECCA  F012         	call	_I2C_2_Master_Write
  4855                           
  4856                           ;color.c: 30:     I2C_2_Master_Write(0x80 | address);
  4857   0024F4  500C               	movf	color_writetoaddr@address^0,w,c
  4858   0024F6  0980               	iorlw	128
  4859   0024F8  ECCA  F012         	call	_I2C_2_Master_Write
  4860                           
  4861                           ;color.c: 31:     I2C_2_Master_Write(value);
  4862   0024FC  500B               	movf	color_writetoaddr@value^0,w,c
  4863   0024FE  ECCA  F012         	call	_I2C_2_Master_Write
  4864                           
  4865                           ;color.c: 32:     I2C_2_Master_Stop();
  4866   002502  ECE1  F012         	call	_I2C_2_Master_Stop	;wreg free
  4867   002506  0012               	return		;funcret
  4868   002508                     __end_of_color_writetoaddr:
  4869                           	callstack 0
  4870                           
  4871 ;; *************** function _I2C_2_Master_Write *****************
  4872 ;; Defined at:
  4873 ;;		line 45 in file "i2c.c"
  4874 ;; Parameters:    Size  Location     Type
  4875 ;;  data_byte       1    wreg     unsigned char 
  4876 ;; Auto vars:     Size  Location     Type
  4877 ;;  data_byte       1    9[COMRAM] unsigned char 
  4878 ;; Return value:  Size  Location     Type
  4879 ;;                  1    wreg      void 
  4880 ;; Registers used:
  4881 ;;		wreg, status,2, status,0, cstack
  4882 ;; Tracked objects:
  4883 ;;		On entry : 0/0
  4884 ;;		On exit  : 0/0
  4885 ;;		Unchanged: 0/0
  4886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4888 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4890 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4891 ;;Total ram usage:        1 bytes
  4892 ;; Hardware stack levels used: 1
  4893 ;; Hardware stack levels required when called: 7
  4894 ;; This function calls:
  4895 ;;		_I2C_2_Master_Idle
  4896 ;; This function is called by:
  4897 ;;		_color_writetoaddr
  4898 ;;		_color_read_Red
  4899 ;;		_color_read_Green
  4900 ;;		_color_read_Blue
  4901 ;;		_color_read_Clear
  4902 ;; This function uses a non-reentrant model
  4903 ;;
  4904                           
  4905                           	psect	text29
  4906   002594                     __ptext29:
  4907                           	callstack 0
  4908   002594                     _I2C_2_Master_Write:
  4909                           	callstack 21
  4910                           
  4911                           ;incstack = 0
  4912                           ;I2C_2_Master_Write@data_byte stored from wreg
  4913   002594  6E0A               	movwf	I2C_2_Master_Write@data_byte^0,c
  4914   002596                     
  4915                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  4916   002596  EC39  F012         	call	_I2C_2_Master_Idle	;wreg free
  4917   00259A                     
  4918                           ;i2c.c: 48:   SSP2BUF = data_byte;
  4919   00259A  C00A  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  4920   00259E  0012               	return		;funcret
  4921   0025A0                     __end_of_I2C_2_Master_Write:
  4922                           	callstack 0
  4923                           
  4924 ;; *************** function _I2C_2_Master_Stop *****************
  4925 ;; Defined at:
  4926 ;;		line 39 in file "i2c.c"
  4927 ;; Parameters:    Size  Location     Type
  4928 ;;		None
  4929 ;; Auto vars:     Size  Location     Type
  4930 ;;		None
  4931 ;; Return value:  Size  Location     Type
  4932 ;;                  1    wreg      void 
  4933 ;; Registers used:
  4934 ;;		wreg, status,2, status,0, cstack
  4935 ;; Tracked objects:
  4936 ;;		On entry : 0/0
  4937 ;;		On exit  : 0/0
  4938 ;;		Unchanged: 0/0
  4939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4944 ;;Total ram usage:        0 bytes
  4945 ;; Hardware stack levels used: 1
  4946 ;; Hardware stack levels required when called: 7
  4947 ;; This function calls:
  4948 ;;		_I2C_2_Master_Idle
  4949 ;; This function is called by:
  4950 ;;		_color_writetoaddr
  4951 ;;		_color_read_Red
  4952 ;;		_color_read_Green
  4953 ;;		_color_read_Blue
  4954 ;;		_color_read_Clear
  4955 ;; This function uses a non-reentrant model
  4956 ;;
  4957                           
  4958                           	psect	text30
  4959   0025C2                     __ptext30:
  4960                           	callstack 0
  4961   0025C2                     _I2C_2_Master_Stop:
  4962                           	callstack 21
  4963   0025C2                     
  4964                           ;i2c.c: 41:   I2C_2_Master_Idle();
  4965   0025C2  EC39  F012         	call	_I2C_2_Master_Idle	;wreg free
  4966   0025C6                     
  4967                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  4968   0025C6  010E               	movlb	14	; () banked
  4969   0025C8  85DA               	bsf	218,2,b	;volatile
  4970   0025CA                     
  4971                           ; BSR set to: 14
  4972   0025CA  0012               	return		;funcret
  4973   0025CC                     __end_of_I2C_2_Master_Stop:
  4974                           	callstack 0
  4975                           
  4976 ;; *************** function _I2C_2_Master_Start *****************
  4977 ;; Defined at:
  4978 ;;		line 27 in file "i2c.c"
  4979 ;; Parameters:    Size  Location     Type
  4980 ;;		None
  4981 ;; Auto vars:     Size  Location     Type
  4982 ;;		None
  4983 ;; Return value:  Size  Location     Type
  4984 ;;                  1    wreg      void 
  4985 ;; Registers used:
  4986 ;;		wreg, status,2, status,0, cstack
  4987 ;; Tracked objects:
  4988 ;;		On entry : 0/0
  4989 ;;		On exit  : 0/0
  4990 ;;		Unchanged: 0/0
  4991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4996 ;;Total ram usage:        0 bytes
  4997 ;; Hardware stack levels used: 1
  4998 ;; Hardware stack levels required when called: 7
  4999 ;; This function calls:
  5000 ;;		_I2C_2_Master_Idle
  5001 ;; This function is called by:
  5002 ;;		_color_writetoaddr
  5003 ;;		_color_read_Red
  5004 ;;		_color_read_Green
  5005 ;;		_color_read_Blue
  5006 ;;		_color_read_Clear
  5007 ;; This function uses a non-reentrant model
  5008 ;;
  5009                           
  5010                           	psect	text31
  5011   0025CC                     __ptext31:
  5012                           	callstack 0
  5013   0025CC                     _I2C_2_Master_Start:
  5014                           	callstack 21
  5015   0025CC                     
  5016                           ;i2c.c: 29:   I2C_2_Master_Idle();
  5017   0025CC  EC39  F012         	call	_I2C_2_Master_Idle	;wreg free
  5018   0025D0                     
  5019                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  5020   0025D0  010E               	movlb	14	; () banked
  5021   0025D2  81DA               	bsf	218,0,b	;volatile
  5022   0025D4                     
  5023                           ; BSR set to: 14
  5024   0025D4  0012               	return		;funcret
  5025   0025D6                     __end_of_I2C_2_Master_Start:
  5026                           	callstack 0
  5027                           
  5028 ;; *************** function _I2C_2_Master_Idle *****************
  5029 ;; Defined at:
  5030 ;;		line 22 in file "i2c.c"
  5031 ;; Parameters:    Size  Location     Type
  5032 ;;		None
  5033 ;; Auto vars:     Size  Location     Type
  5034 ;;		None
  5035 ;; Return value:  Size  Location     Type
  5036 ;;                  1    wreg      void 
  5037 ;; Registers used:
  5038 ;;		wreg, status,2, status,0
  5039 ;; Tracked objects:
  5040 ;;		On entry : 0/0
  5041 ;;		On exit  : 0/0
  5042 ;;		Unchanged: 0/0
  5043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5046 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5047 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5048 ;;Total ram usage:        1 bytes
  5049 ;; Hardware stack levels used: 1
  5050 ;; Hardware stack levels required when called: 6
  5051 ;; This function calls:
  5052 ;;		Nothing
  5053 ;; This function is called by:
  5054 ;;		_I2C_2_Master_Start
  5055 ;;		_I2C_2_Master_RepStart
  5056 ;;		_I2C_2_Master_Stop
  5057 ;;		_I2C_2_Master_Write
  5058 ;;		_I2C_2_Master_Read
  5059 ;; This function uses a non-reentrant model
  5060 ;;
  5061                           
  5062                           	psect	text32
  5063   002472                     __ptext32:
  5064                           	callstack 0
  5065   002472                     _I2C_2_Master_Idle:
  5066                           	callstack 21
  5067   002472                     l190:
  5068   002472  010E               	movlb	14	; () banked
  5069   002474  B5D8               	btfsc	216,2,b	;volatile
  5070   002476  EF3F  F012         	goto	u781
  5071   00247A  EF41  F012         	goto	u780
  5072   00247E                     u781:
  5073   00247E  EF39  F012         	goto	l190
  5074   002482                     u780:
  5075   002482                     
  5076                           ; BSR set to: 14
  5077   002482  CEDA F009          	movff	3802,??_I2C_2_Master_Idle	;volatile
  5078   002486  0E1F               	movlw	31
  5079   002488  1609               	andwf	??_I2C_2_Master_Idle^0,f,c
  5080   00248A  A4D8               	btfss	status,2,c
  5081   00248C  EF4A  F012         	goto	u791
  5082   002490  EF4C  F012         	goto	u790
  5083   002494                     u791:
  5084   002494  EF39  F012         	goto	l190
  5085   002498                     u790:
  5086   002498                     
  5087                           ; BSR set to: 14
  5088   002498  0012               	return		;funcret
  5089   00249A                     __end_of_I2C_2_Master_Idle:
  5090                           	callstack 0
  5091                           
  5092 ;; *************** function _HighISR *****************
  5093 ;; Defined at:
  5094 ;;		line 71 in file "interrupts.c"
  5095 ;; Parameters:    Size  Location     Type
  5096 ;;		None
  5097 ;; Auto vars:     Size  Location     Type
  5098 ;;		None
  5099 ;; Return value:  Size  Location     Type
  5100 ;;                  1    wreg      void 
  5101 ;; Registers used:
  5102 ;;		wreg, status,2, status,0, cstack
  5103 ;; Tracked objects:
  5104 ;;		On entry : 0/0
  5105 ;;		On exit  : 0/0
  5106 ;;		Unchanged: 0/0
  5107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5112 ;;Total ram usage:        0 bytes
  5113 ;; Hardware stack levels used: 1
  5114 ;; Hardware stack levels required when called: 5
  5115 ;; This function calls:
  5116 ;;		_Color_Interrupts_clear
  5117 ;; This function is called by:
  5118 ;;		Interrupt level 2
  5119 ;; This function uses a non-reentrant model
  5120 ;;
  5121                           
  5122                           	psect	intcode
  5123   000008                     __pintcode:
  5124                           	callstack 0
  5125   000008                     _HighISR:
  5126                           	callstack 21
  5127                           
  5128                           ; BSR set to: 14
  5129                           ;incstack = 0
  5130   000008  8256               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  5131   00000A                     
  5132                           ;interrupts.c: 74:     if(PIR0bits.INT0IF==1){
  5133   00000A  010E               	movlb	14	; () banked
  5134   00000C  A133               	btfss	51,0,b	;volatile
  5135   00000E  EF0B  F000         	goto	i2u140_41
  5136   000012  EF0D  F000         	goto	i2u140_40
  5137   000016                     i2u140_41:
  5138   000016  EF17  F000         	goto	i2l439
  5139   00001A                     i2u140_40:
  5140   00001A                     
  5141                           ; BSR set to: 14
  5142                           ;interrupts.c: 75:         LATDbits.LATD7 = 1;
  5143   00001A  8E7C               	bsf	124,7,c	;volatile
  5144   00001C                     
  5145                           ; BSR set to: 14
  5146                           ;interrupts.c: 76:         interrupt_flag = 1;
  5147   00001C  0E00               	movlw	0
  5148   00001E  0100               	movlb	0	; () banked
  5149   000020  6F9D               	movwf	(_interrupt_flag+1)& (0+255),b
  5150   000022  0E01               	movlw	1
  5151   000024  6F9C               	movwf	_interrupt_flag& (0+255),b
  5152   000026                     
  5153                           ; BSR set to: 0
  5154                           ;interrupts.c: 78:         Color_Interrupts_clear();
  5155   000026  ECCC  F011         	call	_Color_Interrupts_clear	;wreg free
  5156   00002A                     
  5157                           ;interrupts.c: 79:         PIR0bits.INT0IF = 0;
  5158   00002A  010E               	movlb	14	; () banked
  5159   00002C  9133               	bcf	51,0,b	;volatile
  5160   00002E                     i2l439:
  5161                           
  5162                           ; BSR set to: 14
  5163   00002E  9256               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  5164   000030  0011               	retfie		f
  5165   000032                     __end_of_HighISR:
  5166                           	callstack 0
  5167                           
  5168 ;; *************** function _Color_Interrupts_clear *****************
  5169 ;; Defined at:
  5170 ;;		line 51 in file "interrupts.c"
  5171 ;; Parameters:    Size  Location     Type
  5172 ;;		None
  5173 ;; Auto vars:     Size  Location     Type
  5174 ;;		None
  5175 ;; Return value:  Size  Location     Type
  5176 ;;                  1    wreg      void 
  5177 ;; Registers used:
  5178 ;;		wreg, status,2, status,0, cstack
  5179 ;; Tracked objects:
  5180 ;;		On entry : 0/0
  5181 ;;		On exit  : 0/0
  5182 ;;		Unchanged: 0/0
  5183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5187 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5188 ;;Total ram usage:        0 bytes
  5189 ;; Hardware stack levels used: 1
  5190 ;; Hardware stack levels required when called: 4
  5191 ;; This function calls:
  5192 ;;		i2_Color_Interrupts_init
  5193 ;;		i2_Color_Interrupts_threshold
  5194 ;;		i2_I2C_2_Master_Start
  5195 ;;		i2_I2C_2_Master_Stop
  5196 ;;		i2_I2C_2_Master_Write
  5197 ;;		i2_persistence_register
  5198 ;; This function is called by:
  5199 ;;		_HighISR
  5200 ;; This function uses a non-reentrant model
  5201 ;;
  5202                           
  5203                           	psect	text34
  5204   002398                     __ptext34:
  5205                           	callstack 0
  5206   002398                     _Color_Interrupts_clear:
  5207                           	callstack 21
  5208   002398                     
  5209                           ;interrupts.c: 55:     I2C_2_Master_Start();
  5210   002398  ECF0  F012         	call	i2_I2C_2_Master_Start	;wreg free
  5211                           
  5212                           ;interrupts.c: 56:     I2C_2_Master_Write(0x52 | 0x00);
  5213   00239C  0E52               	movlw	82
  5214   00239E  ECD6  F012         	call	i2_I2C_2_Master_Write
  5215                           
  5216                           ;interrupts.c: 57:     I2C_2_Master_Write(0b11100110);
  5217   0023A2  0EE6               	movlw	230
  5218   0023A4  ECD6  F012         	call	i2_I2C_2_Master_Write
  5219                           
  5220                           ;interrupts.c: 58:     I2C_2_Master_Stop();
  5221   0023A8  ECEB  F012         	call	i2_I2C_2_Master_Stop	;wreg free
  5222                           
  5223                           ;interrupts.c: 61:     Color_Interrupts_init();
  5224   0023AC  ECA1  F012         	call	i2_Color_Interrupts_init	;wreg free
  5225                           
  5226                           ;interrupts.c: 62:     persistence_register();
  5227   0023B0  ECD0  F012         	call	i2_persistence_register	;wreg free
  5228                           
  5229                           ;interrupts.c: 63:     Color_Interrupts_threshold(5000, 0);
  5230   0023B4  0E13               	movlw	19
  5231   0023B6  6E06               	movwf	(i2Color_Interrupts_threshold@upperThreshold+1)^0,c
  5232   0023B8  0E88               	movlw	136
  5233   0023BA  6E05               	movwf	i2Color_Interrupts_threshold@upperThreshold^0,c
  5234   0023BC  0E00               	movlw	0
  5235   0023BE  6E08               	movwf	(i2Color_Interrupts_threshold@lowerThreshold+1)^0,c
  5236   0023C0  0E00               	movlw	0
  5237   0023C2  6E07               	movwf	i2Color_Interrupts_threshold@lowerThreshold^0,c
  5238   0023C4  EC24  F012         	call	i2_Color_Interrupts_threshold	;wreg free
  5239   0023C8  0012               	return		;funcret
  5240   0023CA                     __end_of_Color_Interrupts_clear:
  5241                           	callstack 0
  5242                           
  5243 ;; *************** function i2_persistence_register *****************
  5244 ;; Defined at:
  5245 ;;		line 46 in file "interrupts.c"
  5246 ;; Parameters:    Size  Location     Type
  5247 ;;		None
  5248 ;; Auto vars:     Size  Location     Type
  5249 ;;		None
  5250 ;; Return value:  Size  Location     Type
  5251 ;;                  1    wreg      void 
  5252 ;; Registers used:
  5253 ;;		wreg, status,2, status,0, cstack
  5254 ;; Tracked objects:
  5255 ;;		On entry : 0/0
  5256 ;;		On exit  : 0/0
  5257 ;;		Unchanged: 0/0
  5258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5263 ;;Total ram usage:        0 bytes
  5264 ;; Hardware stack levels used: 1
  5265 ;; Hardware stack levels required when called: 3
  5266 ;; This function calls:
  5267 ;;		i2_color_writetoaddr
  5268 ;; This function is called by:
  5269 ;;		_Color_Interrupts_clear
  5270 ;; This function uses a non-reentrant model
  5271 ;;
  5272                           
  5273                           	psect	text35
  5274   0025A0                     __ptext35:
  5275                           	callstack 0
  5276   0025A0                     i2_persistence_register:
  5277                           	callstack 21
  5278   0025A0                     
  5279                           ;interrupts.c: 48:  color_writetoaddr(0x0C, 0b010);
  5280   0025A0  0E02               	movlw	2
  5281   0025A2  6E03               	movwf	i2color_writetoaddr@value^0,c
  5282   0025A4  0E0C               	movlw	12
  5283   0025A6  EC84  F012         	call	i2_color_writetoaddr
  5284   0025AA  0012               	return		;funcret
  5285   0025AC                     __end_ofi2_persistence_register:
  5286                           	callstack 0
  5287                           
  5288 ;; *************** function i2_Color_Interrupts_threshold *****************
  5289 ;; Defined at:
  5290 ;;		line 38 in file "interrupts.c"
  5291 ;; Parameters:    Size  Location     Type
  5292 ;;  upperThresho    2    4[COMRAM] unsigned int 
  5293 ;;  lowerThresho    2    6[COMRAM] unsigned int 
  5294 ;; Auto vars:     Size  Location     Type
  5295 ;;		None
  5296 ;; Return value:  Size  Location     Type
  5297 ;;                  1    wreg      void 
  5298 ;; Registers used:
  5299 ;;		wreg, status,2, status,0, cstack
  5300 ;; Tracked objects:
  5301 ;;		On entry : 0/0
  5302 ;;		On exit  : 0/0
  5303 ;;		Unchanged: 0/0
  5304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5305 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5308 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5309 ;;Total ram usage:        4 bytes
  5310 ;; Hardware stack levels used: 1
  5311 ;; Hardware stack levels required when called: 3
  5312 ;; This function calls:
  5313 ;;		i2_color_writetoaddr
  5314 ;; This function is called by:
  5315 ;;		_Color_Interrupts_clear
  5316 ;; This function uses a non-reentrant model
  5317 ;;
  5318                           
  5319                           	psect	text36
  5320   002448                     __ptext36:
  5321                           	callstack 0
  5322   002448                     i2_Color_Interrupts_threshold:
  5323                           	callstack 21
  5324   002448                     
  5325                           ;interrupts.c: 38: void Color_Interrupts_threshold(unsigned int upperThreshold, unsigned
      +                           int lowerThreshold);interrupts.c: 39: {;interrupts.c: 40:  color_writetoaddr(0x04, lowe
      +                          rThreshold);
  5326   002448  C007  F003         	movff	i2Color_Interrupts_threshold@lowerThreshold,i2color_writetoaddr@value
  5327   00244C  0E04               	movlw	4
  5328   00244E  EC84  F012         	call	i2_color_writetoaddr
  5329                           
  5330                           ;interrupts.c: 41:     color_writetoaddr(0x05, lowerThreshold>>8);
  5331   002452  5008               	movf	(i2Color_Interrupts_threshold@lowerThreshold+1)^0,w,c
  5332   002454  6E03               	movwf	i2color_writetoaddr@value^0,c
  5333   002456  0E05               	movlw	5
  5334   002458  EC84  F012         	call	i2_color_writetoaddr
  5335                           
  5336                           ;interrupts.c: 42:     color_writetoaddr(0x06, upperThreshold);
  5337   00245C  C005  F003         	movff	i2Color_Interrupts_threshold@upperThreshold,i2color_writetoaddr@value
  5338   002460  0E06               	movlw	6
  5339   002462  EC84  F012         	call	i2_color_writetoaddr
  5340                           
  5341                           ;interrupts.c: 43:     color_writetoaddr(0x07, upperThreshold>>8);
  5342   002466  5006               	movf	(i2Color_Interrupts_threshold@upperThreshold+1)^0,w,c
  5343   002468  6E03               	movwf	i2color_writetoaddr@value^0,c
  5344   00246A  0E07               	movlw	7
  5345   00246C  EC84  F012         	call	i2_color_writetoaddr
  5346   002470  0012               	return		;funcret
  5347   002472                     __end_ofi2_Color_Interrupts_threshold:
  5348                           	callstack 0
  5349                           
  5350 ;; *************** function i2_Color_Interrupts_init *****************
  5351 ;; Defined at:
  5352 ;;		line 29 in file "interrupts.c"
  5353 ;; Parameters:    Size  Location     Type
  5354 ;;		None
  5355 ;; Auto vars:     Size  Location     Type
  5356 ;;		None
  5357 ;; Return value:  Size  Location     Type
  5358 ;;                  1    wreg      void 
  5359 ;; Registers used:
  5360 ;;		wreg, status,2, status,0, cstack
  5361 ;; Tracked objects:
  5362 ;;		On entry : 0/0
  5363 ;;		On exit  : 0/0
  5364 ;;		Unchanged: 0/0
  5365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5368 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5369 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5370 ;;Total ram usage:        1 bytes
  5371 ;; Hardware stack levels used: 1
  5372 ;; Hardware stack levels required when called: 3
  5373 ;; This function calls:
  5374 ;;		i2_color_writetoaddr
  5375 ;; This function is called by:
  5376 ;;		_Color_Interrupts_clear
  5377 ;; This function uses a non-reentrant model
  5378 ;;
  5379                           
  5380                           	psect	text37
  5381   002542                     __ptext37:
  5382                           	callstack 0
  5383   002542                     i2_Color_Interrupts_init:
  5384                           	callstack 21
  5385   002542                     
  5386                           ;interrupts.c: 33:    color_writetoaddr(0x00, 0b00010011);
  5387   002542  0E13               	movlw	19
  5388   002544  6E03               	movwf	i2color_writetoaddr@value^0,c
  5389   002546  0E00               	movlw	0
  5390   002548  EC84  F012         	call	i2_color_writetoaddr
  5391   00254C                     
  5392                           ;interrupts.c: 34:    _delay((unsigned long)((10)*(64000000/4000.0))) ;
  5393   00254C  0ED0               	movlw	208
  5394   00254E  6E05               	movwf	??i2_Color_Interrupts_init^0,c
  5395   002550  0ECA               	movlw	202
  5396   002552                     i2u183_47:
  5397   002552  2EE8               	decfsz	wreg,f,c
  5398   002554  D7FE               	bra	i2u183_47
  5399   002556  2E05               	decfsz	??i2_Color_Interrupts_init^0,f,c
  5400   002558  D7FC               	bra	i2u183_47
  5401   00255A  0012               	return		;funcret
  5402   00255C                     __end_ofi2_Color_Interrupts_init:
  5403                           	callstack 0
  5404                           
  5405 ;; *************** function i2_color_writetoaddr *****************
  5406 ;; Defined at:
  5407 ;;		line 27 in file "color.c"
  5408 ;; Parameters:    Size  Location     Type
  5409 ;;  address         1    wreg     unsigned char 
  5410 ;;  value           1    2[COMRAM] unsigned char 
  5411 ;; Auto vars:     Size  Location     Type
  5412 ;;  address         1    3[COMRAM] unsigned char 
  5413 ;; Return value:  Size  Location     Type
  5414 ;;                  1    wreg      void 
  5415 ;; Registers used:
  5416 ;;		wreg, status,2, status,0, cstack
  5417 ;; Tracked objects:
  5418 ;;		On entry : 0/0
  5419 ;;		On exit  : 0/0
  5420 ;;		Unchanged: 0/0
  5421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5422 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5423 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5425 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5426 ;;Total ram usage:        2 bytes
  5427 ;; Hardware stack levels used: 1
  5428 ;; Hardware stack levels required when called: 2
  5429 ;; This function calls:
  5430 ;;		i2_I2C_2_Master_Start
  5431 ;;		i2_I2C_2_Master_Stop
  5432 ;;		i2_I2C_2_Master_Write
  5433 ;; This function is called by:
  5434 ;;		i2_Color_Interrupts_init
  5435 ;;		i2_Color_Interrupts_threshold
  5436 ;;		i2_persistence_register
  5437 ;; This function uses a non-reentrant model
  5438 ;;
  5439                           
  5440                           	psect	text38
  5441   002508                     __ptext38:
  5442                           	callstack 0
  5443   002508                     i2_color_writetoaddr:
  5444                           	callstack 21
  5445                           
  5446                           ;incstack = 0
  5447                           ;i2color_writetoaddr@address stored from wreg
  5448   002508  6E04               	movwf	i2color_writetoaddr@address^0,c
  5449   00250A                     
  5450                           ;color.c: 28:     I2C_2_Master_Start();
  5451   00250A  ECF0  F012         	call	i2_I2C_2_Master_Start	;wreg free
  5452                           
  5453                           ;color.c: 29:     I2C_2_Master_Write(0x52 | 0x00);
  5454   00250E  0E52               	movlw	82
  5455   002510  ECD6  F012         	call	i2_I2C_2_Master_Write
  5456                           
  5457                           ;color.c: 30:     I2C_2_Master_Write(0x80 | address);
  5458   002514  5004               	movf	i2color_writetoaddr@address^0,w,c
  5459   002516  0980               	iorlw	128
  5460   002518  ECD6  F012         	call	i2_I2C_2_Master_Write
  5461                           
  5462                           ;color.c: 31:     I2C_2_Master_Write(value);
  5463   00251C  5003               	movf	i2color_writetoaddr@value^0,w,c
  5464   00251E  ECD6  F012         	call	i2_I2C_2_Master_Write
  5465                           
  5466                           ;color.c: 32:     I2C_2_Master_Stop();
  5467   002522  ECEB  F012         	call	i2_I2C_2_Master_Stop	;wreg free
  5468   002526  0012               	return		;funcret
  5469   002528                     __end_ofi2_color_writetoaddr:
  5470                           	callstack 0
  5471                           
  5472 ;; *************** function i2_I2C_2_Master_Write *****************
  5473 ;; Defined at:
  5474 ;;		line 45 in file "i2c.c"
  5475 ;; Parameters:    Size  Location     Type
  5476 ;;  data_byte       1    wreg     unsigned char 
  5477 ;; Auto vars:     Size  Location     Type
  5478 ;;  data_byte       1    1[COMRAM] unsigned char 
  5479 ;; Return value:  Size  Location     Type
  5480 ;;                  1    wreg      void 
  5481 ;; Registers used:
  5482 ;;		wreg, status,2, status,0, cstack
  5483 ;; Tracked objects:
  5484 ;;		On entry : 0/0
  5485 ;;		On exit  : 0/0
  5486 ;;		Unchanged: 0/0
  5487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5489 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5491 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5492 ;;Total ram usage:        1 bytes
  5493 ;; Hardware stack levels used: 1
  5494 ;; Hardware stack levels required when called: 1
  5495 ;; This function calls:
  5496 ;;		i2_I2C_2_Master_Idle
  5497 ;; This function is called by:
  5498 ;;		_Color_Interrupts_clear
  5499 ;;		i2_color_writetoaddr
  5500 ;; This function uses a non-reentrant model
  5501 ;;
  5502                           
  5503                           	psect	text39
  5504   0025AC                     __ptext39:
  5505                           	callstack 0
  5506   0025AC                     i2_I2C_2_Master_Write:
  5507                           	callstack 21
  5508                           
  5509                           ;incstack = 0
  5510                           ;i2I2C_2_Master_Write@data_byte stored from wreg
  5511   0025AC  6E02               	movwf	i2I2C_2_Master_Write@data_byte^0,c
  5512   0025AE                     
  5513                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  5514   0025AE  EC4D  F012         	call	i2_I2C_2_Master_Idle	;wreg free
  5515   0025B2                     
  5516                           ;i2c.c: 48:   SSP2BUF = data_byte;
  5517   0025B2  C002  FED5         	movff	i2I2C_2_Master_Write@data_byte,3797	;volatile
  5518   0025B6  0012               	return		;funcret
  5519   0025B8                     __end_ofi2_I2C_2_Master_Write:
  5520                           	callstack 0
  5521                           
  5522 ;; *************** function i2_I2C_2_Master_Stop *****************
  5523 ;; Defined at:
  5524 ;;		line 39 in file "i2c.c"
  5525 ;; Parameters:    Size  Location     Type
  5526 ;;		None
  5527 ;; Auto vars:     Size  Location     Type
  5528 ;;		None
  5529 ;; Return value:  Size  Location     Type
  5530 ;;                  1    wreg      void 
  5531 ;; Registers used:
  5532 ;;		wreg, status,2, status,0, cstack
  5533 ;; Tracked objects:
  5534 ;;		On entry : 0/0
  5535 ;;		On exit  : 0/0
  5536 ;;		Unchanged: 0/0
  5537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5541 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5542 ;;Total ram usage:        0 bytes
  5543 ;; Hardware stack levels used: 1
  5544 ;; Hardware stack levels required when called: 1
  5545 ;; This function calls:
  5546 ;;		i2_I2C_2_Master_Idle
  5547 ;; This function is called by:
  5548 ;;		_Color_Interrupts_clear
  5549 ;;		i2_color_writetoaddr
  5550 ;; This function uses a non-reentrant model
  5551 ;;
  5552                           
  5553                           	psect	text40
  5554   0025D6                     __ptext40:
  5555                           	callstack 0
  5556   0025D6                     i2_I2C_2_Master_Stop:
  5557                           	callstack 21
  5558   0025D6                     
  5559                           ;i2c.c: 41:   I2C_2_Master_Idle();
  5560   0025D6  EC4D  F012         	call	i2_I2C_2_Master_Idle	;wreg free
  5561   0025DA                     
  5562                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  5563   0025DA  010E               	movlb	14	; () banked
  5564   0025DC  85DA               	bsf	218,2,b	;volatile
  5565   0025DE                     
  5566                           ; BSR set to: 14
  5567   0025DE  0012               	return		;funcret
  5568   0025E0                     __end_ofi2_I2C_2_Master_Stop:
  5569                           	callstack 0
  5570                           
  5571 ;; *************** function i2_I2C_2_Master_Start *****************
  5572 ;; Defined at:
  5573 ;;		line 27 in file "i2c.c"
  5574 ;; Parameters:    Size  Location     Type
  5575 ;;		None
  5576 ;; Auto vars:     Size  Location     Type
  5577 ;;		None
  5578 ;; Return value:  Size  Location     Type
  5579 ;;                  1    wreg      void 
  5580 ;; Registers used:
  5581 ;;		wreg, status,2, status,0, cstack
  5582 ;; Tracked objects:
  5583 ;;		On entry : 0/0
  5584 ;;		On exit  : 0/0
  5585 ;;		Unchanged: 0/0
  5586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5591 ;;Total ram usage:        0 bytes
  5592 ;; Hardware stack levels used: 1
  5593 ;; Hardware stack levels required when called: 1
  5594 ;; This function calls:
  5595 ;;		i2_I2C_2_Master_Idle
  5596 ;; This function is called by:
  5597 ;;		_Color_Interrupts_clear
  5598 ;;		i2_color_writetoaddr
  5599 ;; This function uses a non-reentrant model
  5600 ;;
  5601                           
  5602                           	psect	text41
  5603   0025E0                     __ptext41:
  5604                           	callstack 0
  5605   0025E0                     i2_I2C_2_Master_Start:
  5606                           	callstack 21
  5607   0025E0                     
  5608                           ;i2c.c: 29:   I2C_2_Master_Idle();
  5609   0025E0  EC4D  F012         	call	i2_I2C_2_Master_Idle	;wreg free
  5610   0025E4                     
  5611                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  5612   0025E4  010E               	movlb	14	; () banked
  5613   0025E6  81DA               	bsf	218,0,b	;volatile
  5614   0025E8                     
  5615                           ; BSR set to: 14
  5616   0025E8  0012               	return		;funcret
  5617   0025EA                     __end_ofi2_I2C_2_Master_Start:
  5618                           	callstack 0
  5619                           
  5620 ;; *************** function i2_I2C_2_Master_Idle *****************
  5621 ;; Defined at:
  5622 ;;		line 22 in file "i2c.c"
  5623 ;; Parameters:    Size  Location     Type
  5624 ;;		None
  5625 ;; Auto vars:     Size  Location     Type
  5626 ;;		None
  5627 ;; Return value:  Size  Location     Type
  5628 ;;                  1    wreg      void 
  5629 ;; Registers used:
  5630 ;;		wreg, status,2, status,0
  5631 ;; Tracked objects:
  5632 ;;		On entry : 0/0
  5633 ;;		On exit  : 0/0
  5634 ;;		Unchanged: 0/0
  5635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5638 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5639 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5640 ;;Total ram usage:        1 bytes
  5641 ;; Hardware stack levels used: 1
  5642 ;; This function calls:
  5643 ;;		Nothing
  5644 ;; This function is called by:
  5645 ;;		i2_I2C_2_Master_Start
  5646 ;;		i2_I2C_2_Master_Stop
  5647 ;;		i2_I2C_2_Master_Write
  5648 ;; This function uses a non-reentrant model
  5649 ;;
  5650                           
  5651                           	psect	text42
  5652   00249A                     __ptext42:
  5653                           	callstack 0
  5654   00249A                     i2_I2C_2_Master_Idle:
  5655                           	callstack 21
  5656   00249A                     i2l190:
  5657   00249A  010E               	movlb	14	; () banked
  5658   00249C  B5D8               	btfsc	216,2,b	;volatile
  5659   00249E  EF53  F012         	goto	i2u76_41
  5660   0024A2  EF55  F012         	goto	i2u76_40
  5661   0024A6                     i2u76_41:
  5662   0024A6  EF4D  F012         	goto	i2l190
  5663   0024AA                     i2u76_40:
  5664   0024AA                     
  5665                           ; BSR set to: 14
  5666   0024AA  CEDA F001          	movff	3802,??i2_I2C_2_Master_Idle	;volatile
  5667   0024AE  0E1F               	movlw	31
  5668   0024B0  1601               	andwf	??i2_I2C_2_Master_Idle^0,f,c
  5669   0024B2  A4D8               	btfss	status,2,c
  5670   0024B4  EF5E  F012         	goto	i2u77_41
  5671   0024B8  EF60  F012         	goto	i2u77_40
  5672   0024BC                     i2u77_41:
  5673   0024BC  EF4D  F012         	goto	i2l190
  5674   0024C0                     i2u77_40:
  5675   0024C0                     
  5676                           ; BSR set to: 14
  5677   0024C0  0012               	return		;funcret
  5678   0024C2                     __end_ofi2_I2C_2_Master_Idle:
  5679                           	callstack 0
  5680                           
  5681                           	psect	rparam
  5682   000000                     
  5683                           	psect	temp
  5684   000056                     btemp:
  5685                           	callstack 0
  5686   000056                     	ds	1
  5687   000000                     int$flags	set	btemp
  5688   000000                     wtemp8	set	btemp+1
  5689   000000                     ttemp5	set	btemp+1
  5690   000000                     ttemp6	set	btemp+4
  5691   000000                     ttemp7	set	btemp+8
  5692                           
  5693                           	psect	idloc
  5694                           
  5695                           ;Config register IDLOC0 @ 0x200000
  5696                           ;	unspecified, using default values
  5697   200000                     	org	2097152
  5698   200000  0FFF               	dw	4095
  5699                           
  5700                           ;Config register IDLOC1 @ 0x200002
  5701                           ;	unspecified, using default values
  5702   200002                     	org	2097154
  5703   200002  0FFF               	dw	4095
  5704                           
  5705                           ;Config register IDLOC2 @ 0x200004
  5706                           ;	unspecified, using default values
  5707   200004                     	org	2097156
  5708   200004  0FFF               	dw	4095
  5709                           
  5710                           ;Config register IDLOC3 @ 0x200006
  5711                           ;	unspecified, using default values
  5712   200006                     	org	2097158
  5713   200006  0FFF               	dw	4095
  5714                           
  5715                           ;Config register IDLOC4 @ 0x200008
  5716                           ;	unspecified, using default values
  5717   200008                     	org	2097160
  5718   200008  0FFF               	dw	4095
  5719                           
  5720                           ;Config register IDLOC5 @ 0x20000A
  5721                           ;	unspecified, using default values
  5722   20000A                     	org	2097162
  5723   20000A  0FFF               	dw	4095
  5724                           
  5725                           ;Config register IDLOC6 @ 0x20000C
  5726                           ;	unspecified, using default values
  5727   20000C                     	org	2097164
  5728   20000C  0FFF               	dw	4095
  5729                           
  5730                           ;Config register IDLOC7 @ 0x20000E
  5731                           ;	unspecified, using default values
  5732   20000E                     	org	2097166
  5733   20000E  0FFF               	dw	4095
  5734                           
  5735                           	psect	config
  5736                           
  5737                           ;Config register CONFIG1L @ 0x300000
  5738                           ;	External Oscillator mode Selection bits
  5739                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  5740                           ;	Power-up default value for COSC bits
  5741                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  5742   300000                     	org	3145728
  5743   300000  AA                 	db	170
  5744                           
  5745                           ;Config register CONFIG1H @ 0x300001
  5746                           ;	unspecified, using default values
  5747                           ;	Clock Out Enable bit
  5748                           ;	CLKOUTEN = 0x1, unprogrammed default
  5749                           ;	Clock Switch Enable bit
  5750                           ;	CSWEN = 0x1, unprogrammed default
  5751                           ;	Fail-Safe Clock Monitor Enable bit
  5752                           ;	FCMEN = 0x1, unprogrammed default
  5753   300001                     	org	3145729
  5754   300001  FF                 	db	255
  5755                           
  5756                           ;Config register CONFIG2L @ 0x300002
  5757                           ;	unspecified, using default values
  5758                           ;	Master Clear Enable bit
  5759                           ;	MCLRE = 0x1, unprogrammed default
  5760                           ;	Power-up Timer Enable bit
  5761                           ;	PWRTE = 0x1, unprogrammed default
  5762                           ;	Low-power BOR enable bit
  5763                           ;	LPBOREN = 0x1, unprogrammed default
  5764                           ;	Brown-out Reset Enable bits
  5765                           ;	BOREN = 0x3, unprogrammed default
  5766   300002                     	org	3145730
  5767   300002  FF                 	db	255
  5768                           
  5769                           ;Config register CONFIG2H @ 0x300003
  5770                           ;	unspecified, using default values
  5771                           ;	Brown Out Reset Voltage selection bits
  5772                           ;	BORV = 0x3, unprogrammed default
  5773                           ;	ZCD Disable bit
  5774                           ;	ZCD = 0x1, unprogrammed default
  5775                           ;	PPSLOCK bit One-Way Set Enable bit
  5776                           ;	PPS1WAY = 0x1, unprogrammed default
  5777                           ;	Stack Full/Underflow Reset Enable bit
  5778                           ;	STVREN = 0x1, unprogrammed default
  5779                           ;	Debugger Enable bit
  5780                           ;	DEBUG = 0x1, unprogrammed default
  5781                           ;	Extended Instruction Set Enable bit
  5782                           ;	XINST = 0x1, unprogrammed default
  5783   300003                     	org	3145731
  5784   300003  FF                 	db	255
  5785                           
  5786                           ;Config register CONFIG3L @ 0x300004
  5787                           ;	WDT Period Select bits
  5788                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  5789                           ;	WDT operating mode
  5790                           ;	WDTE = OFF, WDT Disabled
  5791   300004                     	org	3145732
  5792   300004  9F                 	db	159
  5793                           
  5794                           ;Config register CONFIG3H @ 0x300005
  5795                           ;	unspecified, using default values
  5796                           ;	WDT Window Select bits
  5797                           ;	WDTCWS = 0x7, unprogrammed default
  5798                           ;	WDT input clock selector
  5799                           ;	WDTCCS = 0x7, unprogrammed default
  5800   300005                     	org	3145733
  5801   300005  FF                 	db	255
  5802                           
  5803                           ;Config register CONFIG4L @ 0x300006
  5804                           ;	unspecified, using default values
  5805                           ;	Write Protection Block 0
  5806                           ;	WRT0 = 0x1, unprogrammed default
  5807                           ;	Write Protection Block 1
  5808                           ;	WRT1 = 0x1, unprogrammed default
  5809                           ;	Write Protection Block 2
  5810                           ;	WRT2 = 0x1, unprogrammed default
  5811                           ;	Write Protection Block 3
  5812                           ;	WRT3 = 0x1, unprogrammed default
  5813                           ;	Write Protection Block 3
  5814                           ;	WRT4 = 0x1, unprogrammed default
  5815                           ;	Write Protection Block 3
  5816                           ;	WRT5 = 0x1, unprogrammed default
  5817                           ;	Write Protection Block 3
  5818                           ;	WRT6 = 0x1, unprogrammed default
  5819                           ;	Write Protection Block 3
  5820                           ;	WRT7 = 0x1, unprogrammed default
  5821   300006                     	org	3145734
  5822   300006  FF                 	db	255
  5823                           
  5824                           ;Config register CONFIG4H @ 0x300007
  5825                           ;	unspecified, using default values
  5826                           ;	Configuration Register Write Protection bit
  5827                           ;	WRTC = 0x1, unprogrammed default
  5828                           ;	Boot Block Write Protection bit
  5829                           ;	WRTB = 0x1, unprogrammed default
  5830                           ;	Data EEPROM Write Protection bit
  5831                           ;	WRTD = 0x1, unprogrammed default
  5832                           ;	Scanner Enable bit
  5833                           ;	SCANE = 0x1, unprogrammed default
  5834                           ;	Low Voltage Programming Enable bit
  5835                           ;	LVP = 0x1, unprogrammed default
  5836   300007                     	org	3145735
  5837   300007  FF                 	db	255
  5838                           
  5839                           ;Config register CONFIG5L @ 0x300008
  5840                           ;	unspecified, using default values
  5841                           ;	UserNVM Program Memory Code Protection bit
  5842                           ;	CP = 0x1, unprogrammed default
  5843                           ;	DataNVM Memory Code Protection bit
  5844                           ;	CPD = 0x1, unprogrammed default
  5845   300008                     	org	3145736
  5846   300008  FF                 	db	255
  5847                           
  5848                           ;Config register CONFIG5H @ 0x300009
  5849                           ;	unspecified, using default values
  5850   300009                     	org	3145737
  5851   300009  FF                 	db	255
  5852                           
  5853                           ;Config register CONFIG6L @ 0x30000A
  5854                           ;	unspecified, using default values
  5855                           ;	Table Read Protection Block 0
  5856                           ;	EBTR0 = 0x1, unprogrammed default
  5857                           ;	Table Read Protection Block 1
  5858                           ;	EBTR1 = 0x1, unprogrammed default
  5859                           ;	Table Read Protection Block 2
  5860                           ;	EBTR2 = 0x1, unprogrammed default
  5861                           ;	Table Read Protection Block 3
  5862                           ;	EBTR3 = 0x1, unprogrammed default
  5863                           ;	Table Read Protection Block 4
  5864                           ;	EBTR4 = 0x1, unprogrammed default
  5865                           ;	Table Read Protection Block 5
  5866                           ;	EBTR5 = 0x1, unprogrammed default
  5867                           ;	Table Read Protection Block 6
  5868                           ;	EBTR6 = 0x1, unprogrammed default
  5869                           ;	Table Read Protection Block 7
  5870                           ;	EBTR7 = 0x1, unprogrammed default
  5871   30000A                     	org	3145738
  5872   30000A  FF                 	db	255
  5873                           
  5874                           ;Config register CONFIG6H @ 0x30000B
  5875                           ;	unspecified, using default values
  5876                           ;	Boot Block Table Read Protection bit
  5877                           ;	EBTRB = 0x1, unprogrammed default
  5878   30000B                     	org	3145739
  5879   30000B  FF                 	db	255
  5880                           tosu	equ	0xFFF
  5881                           tosh	equ	0xFFE
  5882                           tosl	equ	0xFFD
  5883                           stkptr	equ	0xFFC
  5884                           pclatu	equ	0xFFB
  5885                           pclath	equ	0xFFA
  5886                           pcl	equ	0xFF9
  5887                           tblptru	equ	0xFF8
  5888                           tblptrh	equ	0xFF7
  5889                           tblptrl	equ	0xFF6
  5890                           tablat	equ	0xFF5
  5891                           prodh	equ	0xFF4
  5892                           prodl	equ	0xFF3
  5893                           indf0	equ	0xFEF
  5894                           postinc0	equ	0xFEE
  5895                           postdec0	equ	0xFED
  5896                           preinc0	equ	0xFEC
  5897                           plusw0	equ	0xFEB
  5898                           fsr0h	equ	0xFEA
  5899                           fsr0l	equ	0xFE9
  5900                           wreg	equ	0xFE8
  5901                           indf1	equ	0xFE7
  5902                           postinc1	equ	0xFE6
  5903                           postdec1	equ	0xFE5
  5904                           preinc1	equ	0xFE4
  5905                           plusw1	equ	0xFE3
  5906                           fsr1h	equ	0xFE2
  5907                           fsr1l	equ	0xFE1
  5908                           bsr	equ	0xFE0
  5909                           indf2	equ	0xFDF
  5910                           postinc2	equ	0xFDE
  5911                           postdec2	equ	0xFDD
  5912                           preinc2	equ	0xFDC
  5913                           plusw2	equ	0xFDB
  5914                           fsr2h	equ	0xFDA
  5915                           fsr2l	equ	0xFD9
  5916                           status	equ	0xFD8

Data Sizes:
    Strings     18
    Constant    0
    Data        0
    BSS         106
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     56      85
    BANK0           160     32     109
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    vfprintf$2	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf$1	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_1(CODE[18]), 

    vfprintf$0	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    S2523$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2523$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    reverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    reverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    reverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    reverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    reverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    reverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    uturn@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    uturn@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    uturn@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    uturn@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    norm_stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    norm_stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    norm_stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    norm_stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    norm_stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    norm_stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    motorRinit@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    motorRinit@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    motorRinit@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    motorLinit@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    motorLinit@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    motorLinit@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), main@mL(BANK0[9]), 

    mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    S319DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    S319DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    motor_retrace@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    motor_retrace@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    motor_retrace@buggy_path	PTR unsigned char  size(2) Largest target is 15
		 -> buggy_path(BANK0[15]), 

    motor_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    motor_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    motor_response@temp	PTR struct RGBC_val size(2) Largest target is 14
		 -> main@RGBC(BANK0[14]), 

    color_read_RGBC@temp	PTR struct RGBC_val size(2) Largest target is 14
		 -> main@RGBC(BANK0[14]), 


Critical Paths under _main in COMRAM

    _main->_motor_response
    _main->_motor_retrace
    _persistence_register->_color_writetoaddr
    _motor_retrace->_reverse
    _motor_response->_reverse
    _turnRight->_setMotorPWM
    _turnLeft->_setMotorPWM
    _reverse->_setMotorPWM
    _norm_stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_read_RGBC->_color_read_Blue
    _color_read_RGBC->_color_read_Clear
    _color_read_RGBC->_color_read_Green
    _color_read_RGBC->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_click_init->_color_writetoaddr
    _Color_Interrupts_threshold->_color_writetoaddr
    _Color_Interrupts_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    _Color_Interrupts_clear->i2_Color_Interrupts_threshold
    i2_persistence_register->i2_color_writetoaddr
    i2_Color_Interrupts_threshold->i2_color_writetoaddr
    i2_Color_Interrupts_init->i2_color_writetoaddr
    i2_color_writetoaddr->i2_I2C_2_Master_Write
    i2_I2C_2_Master_Write->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Stop->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Start->i2_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               138   138      0   54969
                                             54 COMRAM     2     2      0
                                              0 BANK0     32    32      0
              _Color_Interrupts_init
         _Color_Interrupts_threshold
                    _Interrupts_init
                   _color_click_init
                    _color_read_RGBC
                     _fullSpeedAhead
                    _initDCmotorsPWM
                         _motorLinit
                         _motorRinit
                     _motor_response
                      _motor_retrace
                          _norm_stop
               _persistence_register
                        _tricolorLED
 ---------------------------------------------------------------------------------
 (1) _tricolorLED                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _persistence_register                                 0     0      0     750
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (1) _motor_retrace                                       22    16      6   20092
                                             32 COMRAM    22    16      6
                          _norm_stop
                            _reverse
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _motor_response                                      22    16      6   20400
                                             32 COMRAM    22    16      6
                          _norm_stop
                            _reverse
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            4     0      4    4437
                                             27 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             4     0      4    4133
                                             27 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverse                                              5     1      4    4005
                                             27 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _norm_stop                                            4     0      4    6021
                                             27 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _motorRinit                                           2     0      2     208
                                              8 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _motorLinit                                           2     0      2     208
                                              8 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              8 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       5     1      4    3549
                                             27 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    3045
                                             21 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                              8 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     814
                                             14 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_read_RGBC                                      2     0      2     616
                                             19 COMRAM     2     0      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                             12 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                             12 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     113
                                             12 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                             12 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              9 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     750
                                             12 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Color_Interrupts_threshold                           4     0      4    1090
                                             12 COMRAM     4     0      4
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (1) _Color_Interrupts_init                                1     1      0     750
                                             12 COMRAM     1     1      0
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     750
                                             10 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              9 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              8 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _HighISR                                              0     0      0     828
             _Color_Interrupts_clear
 ---------------------------------------------------------------------------------
 (6) _Color_Interrupts_clear                               0     0      0     828
            i2_Color_Interrupts_init
       i2_Color_Interrupts_threshold
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
             i2_persistence_register
 ---------------------------------------------------------------------------------
 (7) i2_persistence_register                               0     0      0     222
                i2_color_writetoaddr
 ---------------------------------------------------------------------------------
 (7) i2_Color_Interrupts_threshold                         4     0      4     362
                                              4 COMRAM     4     0      4
                i2_color_writetoaddr
 ---------------------------------------------------------------------------------
 (7) i2_Color_Interrupts_init                              1     1      0     222
                                              4 COMRAM     1     1      0
                i2_color_writetoaddr
 ---------------------------------------------------------------------------------
 (8) i2_color_writetoaddr                                  2     1      1     222
                                              2 COMRAM     2     1      1
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Write                                 1     1      0      22
                                              1 COMRAM     1     1      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Stop                                  0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Start                                 0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (10) i2_I2C_2_Master_Idle                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Color_Interrupts_init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _Color_Interrupts_threshold
     _color_writetoaddr
   _Interrupts_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
   _color_read_RGBC
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _fullSpeedAhead
     _setMotorPWM
       ___lwdiv
         ___wmul (ARG)
       ___wmul
   _initDCmotorsPWM
   _motorLinit
   _motorRinit
   _motor_response
     _norm_stop
       _setMotorPWM
     _reverse
       _setMotorPWM
     _turnLeft
       _setMotorPWM
     _turnRight
       _setMotorPWM
   _motor_retrace
     _norm_stop
     _reverse
     _turnLeft
     _turnRight
   _norm_stop
   _persistence_register
     _color_writetoaddr
   _tricolorLED

 _HighISR (ROOT)
   _Color_Interrupts_clear
     i2_Color_Interrupts_init
       i2_color_writetoaddr
         i2_I2C_2_Master_Start
           i2_I2C_2_Master_Idle
         i2_I2C_2_Master_Stop
           i2_I2C_2_Master_Idle
         i2_I2C_2_Master_Write
           i2_I2C_2_Master_Idle
     i2_Color_Interrupts_threshold
       i2_color_writetoaddr
     i2_I2C_2_Master_Start
     i2_I2C_2_Master_Stop
     i2_I2C_2_Master_Write
     i2_persistence_register
       i2_color_writetoaddr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      62        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     20      6D       5       68.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     38      55       1       90.4%
BITBIGSFRlllhhh     52      0       0      40        0.0%
BITBIGSFRlllhhl     37      0       0      42        0.0%
BITBIGSFRlllllh     2D      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      53        0.0%
BITBIGSFRllllll     26      0       0      60        0.0%
BITBIGSFRhlllll     1D      0       0      38        0.0%
BITBIGSFRhlh        1B      0       0      33        0.0%
BITBIGSFRhllh       13      0       0      34        0.0%
BITBIGSFRllllll     11      0       0      47        0.0%
BITBIGSFRllllll     11      0       0      48        0.0%
BITBIGSFRhlllhh      E      0       0      35        0.0%
BITBIGSFRhh          D      0       0      32        0.0%
BITBIGSFRllllll      C      0       0      46        0.0%
BITBIGSFRllllll      9      0       0      57        0.0%
BITBIGSFRlllhll      8      0       0      43        0.0%
BITBIGSFRllllll      6      0       0      59        0.0%
BITBIGSFRllllll      6      0       0      52        0.0%
BITBIGSFRllllll      5      0       0      51        0.0%
BITBIGSFRllllll      5      0       0      55        0.0%
BITBIGSFRllllll      3      0       0      56        0.0%
BITBIGSFRllllll      3      0       0      54        0.0%
BITBIGSFRllllll      3      0       0      50        0.0%
BITBIGSFRlllhhl      2      0       0      41        0.0%
BITBIGSFRhllllh      2      0       0      37        0.0%
BITBIGSFRllh         2      0       0      39        0.0%
BITBIGSFRhlllhl      1      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      49        0.0%
BITBIGSFRllllll      1      0       0      58        0.0%
BITBIGSFRllllh       1      0       0      44        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C2      61        0.0%
DATA                 0      0      C2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sun Dec 11 17:28:13 2022

                            _color_read_Red 21B0                             _color_read_RGBC 2152  
                           _color_read_Blue 22A0                                          l72 2506  
                                        l81 22EE                                          l90 21AE  
                                        l75 21FE                                          l84 229E  
                                        l69 2364                                          l78 224E  
                                        l99 2570                             ??_motor_retrace 0027  
                       ___wmul@multiplicand 000B                            _color_read_Clear 2250  
                          _color_read_Green 2200                           ??_Interrupts_init 0009  
                                       l105 1540                                         l202 25CA  
                                       l205 259E                                         l208 2330  
                                       l160 1A62                                         l421 2586  
                                       l190 2472                                         l430 2592  
                                       l424 2540                                         l193 2498  
                                       l521 1BCE                                         l514 1F24  
                                       l427 2446                                         l187 241C  
                                       l196 25D4                                         l524 2150  
                                       l541 207C                                         l199 25C0  
                                       l527 20E6                                         l544 200A  
                                       l538 2396                                         l555 1EA4  
                                       l563 1CC6                                         l566 24E6  
                                       l558 1C66                                         u800 1F40  
                                       u801 1F3C                                         u810 1F5E  
                                       u811 1F5A                                         u820 1F7A  
                                       u900 0E54                                         u821 1F76  
                                       u901 0E50                                         u830 231A  
                                       u910 0E76                                         u831 2312  
                                       u911 0E72                                         u920 0EF6  
                                       u921 0EF2                                         u850 1A80  
                                       u930 0F1A                                         u851 1A7C  
                                       u931 0F16                                         u780 2482  
                                       u860 1B4A                                         u940 0F3C  
                                       u781 247E                                         u861 1B46  
                                       u941 0F38                                         u790 2498  
                                       u870 1C7E                                         u950 0FBC  
                                       u791 2494                                         u871 1C7A  
                                       u951 0FB8                                         u848 231C  
                                       u880 1C96                                         u960 0FDE  
                                       u881 1C92                                         u961 0FDA  
                                       u970 105E                                         u890 0E32  
                                       u971 105A                                         u891 0E2E  
                                       u980 1080                                         u981 107C  
                                       u990 10A2                                         u991 109E  
                          ??_motor_response 0027                                         _ctr 004D  
            ??i2_Color_Interrupts_threshold 0009                                 _tricolorLED 255C  
                       i2_color_writetoaddr 2508                                         wreg 000FE8  
                                      l2030 2482                                        l2110 1B2A  
                                      l2102 1A64                                        l2120 23F4  
                                      l1064 1F98                                        l2040 1F2E  
                                      l2032 24C2                                        l2112 1B2E  
                                      l2104 1A80                                        l2200 1C18  
                                      l1057 1F90                                        l2130 240A  
                                      l2122 23FE                                        l2050 1F64  
                                      l2042 1F40                                        l2034 24DE  
                                      l2114 1B4A                                        l2106 1AD4  
                                      l2210 1C7E                                        l2202 1C2C  
                                      l2028 2472                                        l2132 24EA  
                                      l2124 2404                                        l2140 2200  
                                      l2052 1F7A                                        l2044 1F48  
                                      l2116 1B8E                                        l2108 1AE8  
                                      l2212 1C96                                        l2204 1C40  
                                      l2300 1062                                        l2126 2406  
                                      l2230 2340                                        l2142 2246  
                                      l2134 21B0                                        l2054 1F82  
                                      l2046 1F50                                        l2038 1F26  
                                      l2214 1CAE                                        l2206 1C4E  
                                      l2310 10F0                                        l2302 1080  
                                      l2072 25CC                                        l2080 25C2  
                                      l2128 2408                                        l2232 2350  
                                      l2152 2250                                        l2136 21F6  
                                      l2056 1F84                                        l2048 1F5E  
                                      l2216 1CBA                                        l2208 1C5A  
                                      l2160 1FB2                                        l2320 1138  
                                      l2312 111C                                        l2304 10A2  
                                      l2240 0E14                                        l2400 1542  
                                      l2074 25D0                                        l2082 25C6  
                                      l2234 235A                                        l2226 2332  
                                      l2090 22F6                                        l2146 22A0  
                                      l2154 2296                                        l2058 1F8A  
                                      l2170 1FFE                                        l2162 1FC2  
                                      l2330 11E0                                        l2322 1150  
                                      l2306 10C4                                        l2242 0E32  
                                      l2410 157A                                        l2402 155E  
                                      l2076 2596                                        l2228 2336  
                                      l2092 22FE                                        l2084 25B8  
                                      l2148 22E6                                        l2236 2152  
                                      l2172 2366                                        l2180 2024  
                                      l2164 1FD2                                        l2340 1270  
                                      l2332 1202                                        l2324 117C  
                                      l2308 10D8                                        l2260 0EF6  
                                      l2252 0E7E                                        l2244 0E54  
                                      l2500 192A                                        l2412 1592  
                                      l2078 259A                                        l2094 2306  
                                      l2086 25BC                                        l2174 237E  
                                      l2190 2070                                        l2182 2034  
                                      l2166 1FE2                                        l2158 1F9A  
                                      l2350 12A4                                        l2334 1224  
                                      l2318 1124                                        l2326 11A0  
                                      l2270 0F3C                                        l2254 0E92  
                                      l2246 0E76                                        l2510 19C4  
                                      l2502 193E                                        l2430 1660  
                                      l2414 15BE                                        l2238 255C  
                                      l2096 232C                                        l2088 22F2  
                                      l2600 1E44                                        l2176 238A  
                                      l2192 1BD0                                        l2184 2044  
                                      l2168 1FF2                                        l2360 1352  
                                      l2352 12D0                                        l2336 1238  
                                      l2328 11BE                                        l2280 0F70  
                                      l2256 0EAA                                        l2520 19F8  
                                      l2504 1956                                        l2440 16AA  
                                      l2424 1608                                        l2432 1684  
                                      l2408 1566                                        l2416 15E2  
                                      l2530 2572                                        l2098 232E  
                                      l2602 1E5C                                        l2194 1BE8  
                                      l2186 2054                                        l2178 200C  
                                      l2370 13BE                                        l2362 1374  
                                      l2346 1278                                        l2338 1246  
                                      l2354 12F4                                        l2282 0F9C  
                                      l2258 0ED6                                        l2266 0EFC  
                                      l2522 1A24                                        l2506 1982  
                                      l2450 1744                                        l2442 16BE  
                                      l2434 16A2                                        l2426 161C  
                                      l2418 1600                                        l2532 2528  
                                      l2604 1E74                                        l2540 1EA6  
                                      l2196 1BF8                                        l2188 2064  
                                      l2380 145C                                        l2372 13D2  
                                      l2364 1396                                        l2356 1312  
                                      l2348 128C                                        l2292 0FE6  
                                      l2276 0F44                                        l2268 0F1A  
                                      l2284 0FC0                                        l2516 19CC  
                                      l2508 19A6                                        l2452 1758  
                                      l2444 16D6                                        l2428 1634  
                                      l2524 1A44                                        l2534 2532  
                                      l2606 1E8C                                        l2550 1F0A  
                                      l2542 1ED0                                        l2198 1C08  
                                      l2390 14C4                                        l2382 147E  
                                      l2374 13EA                                        l2366 139E  
                                      l2358 1330                                        l2294 0FFA  
                                      l2286 0FDE                                        l2278 0F58  
                                      l2526 1A4A                                        l2518 19E0  
                                      l2462 179A                                        l2454 1766  
                                      l2470 1816                                        l2446 1702  
                                      l2630 1CD0                                        l2622 1CC8  
                                      l2536 241E                                        l2608 1E98  
                                      l2552 1F0C                                        l2544 1EF4  
                                      l2560 20E8                                        l2392 14D8  
                                      l2384 149C                                        l2376 1416  
                                      l2296 1012                                        l2528 1A5E  
                                      l2472 1834                                        l2464 17AE  
                                      l2456 1792                                        l2448 1726  
                                      l2640 1D16                                        l2632 1CF0  
                                      l2624 1CCC                                        l2554 1F16  
                                      l2546 1EFE                                        l2570 213C  
                                      l2562 20F4                                        l2394 14F0  
                                      l2386 14A4                                        l2378 143A  
                                      l2298 103E                                        l2490 18E0  
                                      l2474 1848                                        l2466 17C6  
                                      l2538 2588                                        l2650 1D20  
                                      l2642 1D18                                        l2634 1CFC  
                                      l2626 1CCC                                        l2556 1F18  
                                      l2548 1F00                                        l2564 2104  
                                      l2580 20BE                                        l2572 207E  
                                      l2396 151C                                        l2484 1888  
                                      l2476 1856                                        l2492 1904  
                                      l2468 17F2                                        l2660 1D4E  
                                      l2652 1D22                                        l2644 1D1A  
                                      l2636 1D08                                        l2628 1CCC  
                                      l2590 1DF4                                        l2558 1F22  
                                      l2566 2114                                        l2582 20D2  
                                      l2574 208A                                        l2398 153C  
                                      l2494 1922                                        l2486 189C  
                                      l2478 1880                                        l2662 1D62  
                                      l2654 1D24                                        l2646 1D1C  
                                      l2638 1D14                                        l2592 1E04  
                                      l2584 1DBC                                        l2568 2128  
                                      l2576 209A                                        l2488 18B4  
                                      l2672 1D8C                                        l2664 1D7A  
                                      l2656 1D38                                        l2648 1D1E  
                                      l2594 1E18                                        l2586 1DD4  
                                      l2578 20AA                                        l2674 1DA8  
                                      l2666 1D7C                                        l2658 1D3A  
                                      l2596 1E2C                                        l2588 1DE4  
                                      l2676 1DAA                                        l2668 1D88  
                                      l2598 1E38                                        STR_1 0E01  
                                      u1000 10C4                                        u1001 10C0  
                                      u1010 119C                                        u1011 1198  
                                      u1100 1374                                        u1020 11BE  
                                      u1101 1370                                        u1021 11BA  
                                      u1110 1396                                        u1030 11E0  
                                      u1111 1392                                        u1031 11DC  
                                      u1120 13BA                                        u1040 1202  
                                      u1200 15DE                                        u1121 13B6  
                                      u1041 11FE                                        u1201 15DA  
                                      u1130 1436                                        u1050 1224  
                                      u1210 1600                                        u1131 1432  
                                      u1051 1220                                        u1211 15FC  
                                      u1140 145C                                        u1060 12F0  
                                      u1300 19A2                                        u1220 1680  
                                      u1141 1458                                        u1061 12EC  
                                      u1301 199E                                        u1221 167C  
                                      u1150 147E                                        u1070 1312  
                                      u1310 19C4                                        u1230 16A2  
                                      u1151 147A                                        u1071 130E  
                                      u1311 19C0                                        u1231 169E  
                                      u1160 149C                                        u1080 1330  
                                      u1320 1A44                                        u1240 1722  
                                      u1161 1498                                        u1081 132C  
                                      u1321 1A40                                        u1241 171E  
                                      u1170 14C0                                        u1090 1352  
                                      u1330 1A5E                                        u1250 1744  
                                      u1171 14BC                                        u1091 134E  
                                      u1331 1A5A                                        u1251 1740  
                                      u1340 1E5C                                        u1180 153C  
                                      u1260 1812                                        u1341 1E58  
                                      u1181 1538                                        u1261 180E  
                                      u1350 1E74                                        u1270 1834  
                                      u1190 155E                                        u1351 1E70  
                                      u1271 1830                                        u1191 155A  
                                      u1280 1900                                _BAUD4CONbits 000EE9  
                                      u1281 18FC                                        u1290 1922  
                                      u1370 1D4E                                        u1291 191E  
                                      u1507 175E                                        u1371 1D4A  
                                      u1517 1784                                        u1437 1D6C  
                                      u1607 19EA                                        u1527 17B8  
                                      u1447 1584                                        u1617 1A16  
                                      u1537 17E4                                        u1457 15B0  
                                      _T2PR 000FBC                                        u1707 1142  
                                      u1627 0E9C                                        u1547 184E  
                                      u1467 1626                                        u1717 116E  
                                      u1637 0EC8                                        u1557 1874  
                                      u1477 1652                                        u1807 1C46  
                                      u1727 123E                                        u1647 0F62  
                                      u1567 18A6                                        u1487 16C8  
                                      u1817 2346                                        u1737 1264  
                                      u1657 0F8E                                        u1577 18D2  
                                      u1497 16F4                                        u1827 2538  
                                      u1747 1296                                        u1667 1004  
                                      u1587 1948                                        u1757 12C2  
                                      u1677 1030                                        u1597 1974  
                                      u1767 13DC                                        u1687 10E2  
                                      u1777 1408                                        u1697 110E  
                                      u1787 14E2                                        u1797 150E  
                                      i2l72 2526                                        _main 1CC8  
                                      fsr2h 000FDA                                        indf2 000FDF  
                                      fsr2l 000FD9                                        btemp 0056  
                                      prodh 000FF4                                        prodl 000FF3  
                                      start 0032                        ?i2_color_writetoaddr 0003  
                    __end_of_color_read_Red 2200                             __end_of_HighISR 0032  
                              ___param_bank 000000                                       ?_main 0001  
                           __end_of___lwdiv 1F9A                                       i2l202 25DE  
                                     i2l205 25B6                                       i2l190 249A  
                                     i2l430 25AA                                       i2l424 255A  
                                     i2l193 24C0                                       i2l433 23C8  
                                     i2l427 2470                                       i2l196 25E8  
                                     i2l439 002E                                       _TMR0H 000FD4  
                                     _TMR0L 000FD3                  __end_of_I2C_2_Master_Start 25D6  
                __end_of_I2C_2_Master_Write 25A0                       _Color_Interrupts_init 2528  
                           __end_of_reverse 1CC8                                       ttemp5 0057  
                                     ttemp6 005A                                       ttemp7 005E  
                                     status 000FD8                                       wtemp8 0057  
                   __end_of_color_read_RGBC 21B0                       ??i2_color_writetoaddr 0004  
                   __end_of_color_read_Blue 22F0                       _I2C_2_Master_RepStart 25B8  
                           ?_color_read_Red 000D                             __initialization 23CA  
                              __end_of_main 1DBC                 ?_Color_Interrupts_threshold 000D  
                                    ??_main 0037                               __activetblptr 000001  
                              ?_setMotorPWM 0016                                      _CCPR1H 000FAA  
                                    _CCPR2H 000FA6                                      _CCPR3H 000F25  
                                    _CCPR4H 000F21                                      _RC0PPS 000E62  
                                    _RC4REG 000EE3                                      _RE2PPS 000E74  
                                    _RC7PPS 000E69                                      _RD5PPS 000E6F  
                                    _RE4PPS 000E76                                      _RD6PPS 000E70  
                                    i2l2024 249A                                      i2l2026 24AA  
                                    i2l2060 25E0                                      i2l2220 254C  
                                    i2l2062 25E4                                      i2l2070 25B2  
                                    i2l2118 250A                                      i2l2222 2448  
                                    i2l2064 25D6                                      i2l2224 25A0  
                                    i2l2066 25DA                                      i2l2218 2542  
                                    i2l2068 25AE                                      i2l2700 001C  
                                    i2l2702 0026                                      i2l2704 002A  
                                    i2l2618 2398                                      i2l2696 000A  
                                    i2l2698 001A                                      _RG6PPS 000E88  
                                 ??_HighISR 0009                    __end_of_color_click_init 2366  
                                    _RX4PPS 000E15                                      _TX4REG 000EE4  
  Color_Interrupts_threshold@lowerThreshold 000F  i2Color_Interrupts_threshold@lowerThreshold 0007  
              __end_of_persistence_register 2594                                _CCPTMRS0bits 000FAD  
                                    ___wmul 24C2                                   ??___lwdiv 0013  
                                    clear_0 23D0                                      clear_1 23DC  
                                    isa$std 000001                                      main@mL 00BB  
                                    main@mR 00C4                     ?i2_persistence_register 0001  
                    _Color_Interrupts_clear 2398                                __mediumconst 0000  
                                    tblptrh 000FF7                                      tblptru 000FF8  
                                 ??_reverse 0020    Color_Interrupts_threshold@upperThreshold 000D  
i2Color_Interrupts_threshold@upperThreshold 0005                           ??_initDCmotorsPWM 000B  
                i2color_writetoaddr@address 0004                      ?_Color_Interrupts_init 0001  
                          __end_of_turnLeft 207E                                  __accesstop 0060  
                   __end_of__initialization 23E2                    __end_of_color_read_Clear 22A0  
                  __end_of_color_read_Green 2250                      ?_I2C_2_Master_RepStart 0001  
                             ___rparam_used 000001                            ?_color_read_RGBC 0014  
                          ?_color_read_Blue 000D                             _Interrupts_init 2572  
                        motor_retrace@j_500 0033                          motor_retrace@j_501 0035  
                        motor_retrace@j_496 002B                          motor_retrace@j_497 002D  
                        motor_retrace@j_498 002F                          motor_retrace@j_499 0031  
                            __pcstackCOMRAM 0001              __end_ofi2_persistence_register 25AC  
                              ?_tricolorLED 0001                     i2_Color_Interrupts_init 2542  
                                __pbssBANK0 0060                           _color_writetoaddr 24E8  
                              _T2CLKCONbits 000FBF                            motor_response@mL 0023  
                          motor_response@mR 0025                          ?_color_writetoaddr 000B  
                                   ?___wmul 0009                          motor_response@temp 0021  
                     __end_of_motor_retrace 1A64                         ??_color_writetoaddr 000C  
                                   _SP4BRGH 000EE6                                     _SP4BRGL 000EE5  
                                   i2u76_40 24AA                                     i2u76_41 24A6  
                                   i2u77_40 24C0                                     i2u77_41 24BC  
                                   _SSP2ADD 000ED6                                     _SSP2BUF 000ED5  
                      _persistence_register 2588                                  _buggy_path 009E  
                   __end_of_Interrupts_init 2588                      color_writetoaddr@value 000B  
                          ??_color_read_Red 000F                                     _HighISR 0008  
                 __end_of_color_writetoaddr 2508                          _I2C_2_Master_Start 25CC  
                       i2_I2C_2_Master_Idle 249A                          _I2C_2_Master_Write 2594  
                                   __Hparam 0000                         i2_I2C_2_Master_Stop 25D6  
                                   __Lparam 0000                           color_read_Red@tmp 0012  
                       ?_I2C_2_Master_Start 0001                                     ___lwdiv 1F26  
                       ?_I2C_2_Master_Write 0001                                __psmallconst 0E00  
                                   __pcinit 23CA                                     __ramtop 0E00  
                                 ?_turnLeft 001C                                     __ptext0 1CC8  
                                   __ptext1 255C                                     __ptext2 2588  
                                   __ptext3 1542                                     __ptext4 0E14  
                                   __ptext5 1F9A                                     __ptext6 200C  
                                   __ptext7 1BD0                                     __ptext8 2366  
                                   __ptext9 207E                        ?i2_I2C_2_Master_Idle 0001  
                                 _T2CONbits 000FBD                        ?i2_I2C_2_Master_Stop 0001  
                                 _T2HLTbits 000FBE                   ??i2_Color_Interrupts_init 0005  
                                   _reverse 1BD0                               _RxBufWriteCnt 0055  
                     ?_persistence_register 0001                        ??_I2C_2_Master_Start 000A  
                      ??_I2C_2_Master_Write 000A                        end_of_initialization 23E2  
               __end_ofi2_color_writetoaddr 2528                           ?_color_click_init 0001  
                         __end_of_norm_stop 2398                          ??_color_click_init 000D  
                               norm_stop@mL 001C                                 norm_stop@mR 001E  
                                   postdec2 000FDD                                  _motorLinit 20E8  
                                   postinc0 000FEE                                     postinc2 000FDE  
                                _motorRinit 207E                               _interrupt_ctr 004F  
                   ?_Color_Interrupts_clear 0001                             _initDCmotorsPWM 1EA6  
                                ??_turnLeft 0020                         color_read_RGBC@temp 0014  
                        setMotorPWM@negDuty 001B                       ??i2_I2C_2_Master_Idle 0001  
                         __end_of_turnRight 200C                       ??i2_I2C_2_Master_Stop 0002  
                   ??_Color_Interrupts_init 000D                                   _TRISAbits 000F81  
                        setMotorPWM@posDuty 001A                                   _TRISBbits 000F82  
                                 _TRISCbits 000F83                                   _TRISDbits 000F84  
                                 _TRISEbits 000F85                                   _TRISFbits 000F86  
                                 _TRISGbits 000F87                                   _TRISHbits 000F88  
                          fullSpeedAhead@mL 001C                            fullSpeedAhead@mR 001E  
                  color_writetoaddr@address 000C                     ??_I2C_2_Master_RepStart 000A  
                          ?_Interrupts_init 0001                                 _CCP1CONbits 000FAB  
                         ?_color_read_Clear 000D                                _EUSART4RXbuf 0039  
                              _EUSART4TXbuf 0060                                 _CCP2CONbits 000FA7  
                         ?_color_read_Green 000D                                 _CCP3CONbits 000F26  
                               _CCP4CONbits 000F22                          ??_color_read_Clear 000F  
                        ??_color_read_Green 000F              __end_of_Color_Interrupts_clear 23CA  
                            _fullSpeedAhead 1DBC                              __end_of___wmul 24E8  
                       color_read_Clear@tmp 0012                         start_initialization 23CA  
                    ??_persistence_register 000D                               _TxBufWriteCnt 0053  
                       color_read_Green@tmp 0012                     __end_of_initDCmotorsPWM 1F26  
                    __end_of_fullSpeedAhead 1EA6                                 ?_motorLinit 0009  
                                  ??___wmul 000D                                 ?_motorRinit 0009  
             i2I2C_2_Master_Write@data_byte 0002                __end_ofi2_I2C_2_Master_Start 25EA  
              __end_ofi2_I2C_2_Master_Write 25B8                                 __pbssCOMRAM 0039  
                             __pcstackBANK0 00AD                              _motor_response 0E14  
                                  ?_HighISR 0001                             motor_retrace@mL 0023  
                           motor_retrace@mR 0025                            ___lwdiv@dividend 000F  
                           motor_response@j 0029                             ?_fullSpeedAhead 001C  
                                 __pintcode 0008                                    ?___lwdiv 000F  
              ??_Color_Interrupts_threshold 0011                        I2C_2_Master_Read@ack 000B  
                       motor_response@j_490 0035                         motor_response@j_485 002B  
                       motor_response@j_486 002D                         motor_response@j_487 002F  
                       motor_response@j_488 0031                         motor_response@j_489 0033  
                      I2C_2_Master_Read@tmp 000C                                 __smallconst 0E00  
                         _I2C_2_Master_Idle 2472                           _I2C_2_Master_Init 23F4  
                         _I2C_2_Master_Read 22F0                           _I2C_2_Master_Stop 25C2  
                              _RxBufReadCnt 0054                                    ?_reverse 001C  
                        ?_I2C_2_Master_Idle 0001                          ?_I2C_2_Master_Init 0001  
                        ?_I2C_2_Master_Read 0001                               ??_setMotorPWM 0018  
                        ?_I2C_2_Master_Stop 0001                            ___lwdiv@quotient 0013  
                    __end_of_motor_response 1542                    initDCmotorsPWM@PWMperiod 0009  
                       ??_I2C_2_Master_Idle 0009                         ??_I2C_2_Master_Init 0009  
                       ??_I2C_2_Master_Read 000A                              ___wmul@product 000D  
                                  _LATAbits 000F79                         ??_I2C_2_Master_Stop 000A  
                                  _LATDbits 000F7C                                    _LATEbits 000F7D  
                                  _LATFbits 000F7E                                    _LATGbits 000F7F  
                                  _LATHbits 000F80                                    _IPR0bits 000E1F  
                                  _PIE0bits 000E29                                    _PIE4bits 000E2D  
                                  i2u140_40 001A                                    i2u140_41 0016  
                               turnRight@mL 001C                                 turnRight@mR 001E  
                                  _PIR0bits 000E33                                    i2u183_47 2552  
                                  _PIR4bits 000E37                    ??i2_persistence_register 0005  
                          ?_initDCmotorsPWM 0009                                   _norm_stop 2366  
                                  _SSP2CON2 000EDA                                    _SSP2STAT 000ED8  
                 __end_of_I2C_2_Master_Idle 249A                   __end_of_I2C_2_Master_Init 241E  
                 __end_of_I2C_2_Master_Read 2332                           ___wmul@multiplier 0009  
                 __end_of_I2C_2_Master_Stop 25CC                                setMotorPWM@m 0016  
               I2C_2_Master_Write@data_byte 000A                           ??_color_read_RGBC 0016  
                         ??_color_read_Blue 000F                                _TxBufReadCnt 0052  
                  i2color_writetoaddr@value 0003                                   _turnRight 1F9A  
             __end_of_Color_Interrupts_init 2542                             ?_motor_response 0021  
             __end_of_I2C_2_Master_RepStart 25C2                          color_read_Blue@tmp 0012  
                       __end_of_setMotorPWM 1BD0                        i2_I2C_2_Master_Start 25E0  
                      i2_I2C_2_Master_Write 25AC                                    __Hrparam 0000  
                   motor_retrace@buggy_path 0021                                    __Lrparam 0000  
                              __Lsmallconst 0E00                                  ?_norm_stop 001C  
      __end_ofi2_Color_Interrupts_threshold 2472                i2_Color_Interrupts_threshold 2448  
               __end_ofi2_I2C_2_Master_Idle 24C2                 __end_ofi2_I2C_2_Master_Stop 25E0  
                  ?i2_Color_Interrupts_init 0001                                  _ANSELBbits 000E9A  
                                _ANSELDbits 000EA7                               _motor_retrace 1542  
                             ??_tricolorLED 0009                                  _T0CON0bits 000FD5  
                                _T0CON1bits 000FD6                              motor_retrace@j 0029  
                           ___lwdiv@divisor 0011                             ___lwdiv@counter 0015  
                                ?_turnRight 001C                                    __ptext10 20E8  
                                  __ptext11 1EA6                                    __ptext20 22A0  
                                  __ptext12 1DBC                                    __ptext21 25B8  
                                  __ptext13 1A64                                    __ptext30 25C2  
                                  __ptext22 22F0                                    __ptext14 24C2  
                                  __ptext31 25CC                                    __ptext23 2332  
                                  __ptext15 1F26                                    __ptext40 25D6  
                                  __ptext32 2472                                    __ptext24 23F4  
                                  __ptext16 2152                                    __ptext41 25E0  
                                  __ptext25 2572                                    __ptext17 21B0  
                                  __ptext42 249A                                    __ptext34 2398  
                                  __ptext26 241E                                    __ptext18 2200  
                                  __ptext35 25A0                                    __ptext27 2528  
                                  __ptext19 2250                                    __ptext36 2448  
                                  __ptext28 24E8                                    __ptext37 2542  
                                  __ptext29 2594                                    __ptext38 2508  
                                  __ptext39 25AC                                _SSP2CON1bits 000ED9  
                              _SSP2CON2bits 000EDA                                  turnLeft@mL 001C  
                                turnLeft@mR 001E                       ?i2_I2C_2_Master_Start 0001  
                     ?i2_I2C_2_Master_Write 0001                                   reverse@mL 001C  
                                 reverse@mR 001E                                    isa$xinst 000000  
                              ??_motorLinit 000B                                ??_motorRinit 000B  
                                _RC4STAbits 000EE7                                    main@RGBC 00AD  
                                  int$flags 0056          __end_of_Color_Interrupts_threshold 2448  
             ?i2_Color_Interrupts_threshold 0005                  _Color_Interrupts_threshold 241E  
                                  _turnLeft 200C                              ?_motor_retrace 0021  
                                _INTCONbits 000FF2                                 _setMotorPWM 1A64  
                              motorLinit@mL 0009                         __end_of_tricolorLED 2572  
                                  intlevel2 0000                                _motor_return 0051  
                        __end_of_motorLinit 2152                          __end_of_motorRinit 20E8  
                              motorRinit@mR 0009                            ??_fullSpeedAhead 0020  
                               ??_norm_stop 0020             __end_ofi2_Color_Interrupts_init 255C  
                          _color_click_init 2332                                  _SSP2DATPPS 000E1D  
                                _SSP2CLKPPS 000E1C                              _interrupt_flag 009C  
                    i2_persistence_register 25A0                                 ??_turnRight 0020  
                                _TX4STAbits 000EE8                      ??i2_I2C_2_Master_Start 0002  
                    ??i2_I2C_2_Master_Write 0002                    ??_Color_Interrupts_clear 0009  
