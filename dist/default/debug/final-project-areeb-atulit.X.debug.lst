

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Tue Dec 06 11:51:18 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    42                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    43                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    44                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    45   000000                     
    46                           ; Generated 06/04/2022 GMT
    47                           ; 
    48                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution. Publication is not required when
    62                           ;        this file is used in an embedded application.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC18F67K40 Definitions
    78                           ; 
    79                           ; SFR Addresses
    80   000000                     _TX4REG	set	3812
    81   000000                     _RC4STAbits	set	3815
    82   000000                     _SP4BRGH	set	3814
    83   000000                     _TRISCbits	set	3971
    84   000000                     _LATHbits	set	3968
    85   000000                     _TRISBbits	set	3970
    86   000000                     _TRISDbits	set	3972
    87   000000                     _TRISEbits	set	3973
    88   000000                     _TRISFbits	set	3974
    89   000000                     _TRISAbits	set	3969
    90   000000                     _SSP2CON2bits	set	3802
    91   000000                     _RX4PPS	set	3605
    92   000000                     _SSP2CLKPPS	set	3612
    93   000000                     _SSP2DATPPS	set	3613
    94   000000                     _ANSELDbits	set	3751
    95   000000                     _SSP2ADD	set	3798
    96   000000                     _SSP2CON1bits	set	3801
    97   000000                     _LATAbits	set	3961
    98   000000                     _LATGbits	set	3967
    99   000000                     _TRISGbits	set	3975
   100   000000                     _T2PR	set	4028
   101   000000                     _T2CONbits	set	4029
   102   000000                     _TMR0L	set	4051
   103   000000                     _TMR0H	set	4052
   104   000000                     _T0CON0bits	set	4053
   105   000000                     _T0CON1bits	set	4054
   106   000000                     _INTCONbits	set	4082
   107   000000                     _TRISHbits	set	3976
   108   000000                     _CCPR2H	set	4006
   109   000000                     _CCPR1H	set	4010
   110   000000                     _LATDbits	set	3964
   111   000000                     _LATEbits	set	3965
   112   000000                     _LATFbits	set	3966
   113   000000                     _RC4REG	set	3811
   114   000000                     _SP4BRGL	set	3813
   115   000000                     _TX4STAbits	set	3816
   116   000000                     _BAUD4CONbits	set	3817
   117   000000                     _SSP2CON2	set	3802
   118   000000                     _SSP2STAT	set	3800
   119   000000                     _SSP2BUF	set	3797
   120   000000                     _IPR0bits	set	3615
   121   000000                     _PIE0bits	set	3625
   122   000000                     _PIE4bits	set	3629
   123   000000                     _RC0PPS	set	3682
   124   000000                     _RD5PPS	set	3695
   125   000000                     _RE2PPS	set	3700
   126   000000                     _ANSELBbits	set	3738
   127   000000                     _RD6PPS	set	3696
   128   000000                     _RC7PPS	set	3689
   129   000000                     _CCPR4H	set	3873
   130   000000                     _CCPR3H	set	3877
   131   000000                     _PIR0bits	set	3635
   132   000000                     _PIR4bits	set	3639
   133   000000                     _RE4PPS	set	3702
   134   000000                     _RG6PPS	set	3720
   135   000000                     _T2CLKCONbits	set	4031
   136   000000                     _T2HLTbits	set	4030
   137   000000                     _CCP1CONbits	set	4011
   138   000000                     _CCPTMRS0bits	set	4013
   139   000000                     _CCP2CONbits	set	4007
   140   000000                     _CCP3CONbits	set	3878
   141   000000                     _CCP4CONbits	set	3874
   142                           
   143                           	psect	smallconst
   144   000E00                     __psmallconst:
   145                           	callstack 0
   146   000E00  00                 	db	0
   147   000E01                     
   148                           ; BSR set to: 14
   149   000E01  52                 	db	82	;'R'
   150   000E02  47                 	db	71	;'G'
   151   000E03  42                 	db	66	;'B'
   152   000E04  43                 	db	67	;'C'
   153   000E05  3A                 	db	58	;':'
   154   000E06  25                 	db	37
   155   000E07  69                 	db	105	;'i'
   156   000E08  20                 	db	32
   157   000E09  25                 	db	37
   158   000E0A  69                 	db	105	;'i'
   159   000E0B  20                 	db	32
   160   000E0C  25                 	db	37
   161   000E0D  69                 	db	105	;'i'
   162   000E0E  20                 	db	32
   163   000E0F  25                 	db	37
   164   000E10  69                 	db	105	;'i'
   165   000E11  0A                 	db	10
   166   000E12  00                 	db	0
   167   000E13  00                 	db	0	; dummy byte at the end
   168   000000                     
   169                           ; #config settings
   170                           
   171                           	psect	cinit
   172   001660                     __pcinit:
   173                           	callstack 0
   174   001660                     start_initialization:
   175                           	callstack 0
   176   001660                     __initialization:
   177                           	callstack 0
   178                           
   179                           ; Clear objects allocated to BANK0 (60 bytes)
   180   001660  EE00  F060         	lfsr	0,__pbssBANK0
   181   001664  0E3C               	movlw	60
   182   001666                     clear_0:
   183   001666  6AEE               	clrf	postinc0,c
   184   001668  06E8               	decf	wreg,f,c
   185   00166A  E1FD               	bnz	clear_0
   186                           
   187                           ; Clear objects allocated to COMRAM (26 bytes)
   188   00166C  EE00  F038         	lfsr	0,__pbssCOMRAM
   189   001670  0E1A               	movlw	26
   190   001672                     clear_1:
   191   001672  6AEE               	clrf	postinc0,c
   192   001674  06E8               	decf	wreg,f,c
   193   001676  E1FD               	bnz	clear_1
   194   001678                     end_of_initialization:
   195                           	callstack 0
   196   001678                     __end_of__initialization:
   197                           	callstack 0
   198   001678  9052               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   199   00167A  9252               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   200   00167C  0E00               	movlw	low (__Lsmallconst shr (0+16))
   201   00167E  6EF8               	movwf	tblptru,c
   202   001680  0E0E               	movlw	high __Lsmallconst
   203   001682  6EF7               	movwf	tblptrh,c
   204   001684  0100               	movlb	0
   205   001686  EFC0  F007         	goto	_main	;jump to C main() function
   206                           
   207                           	psect	bssCOMRAM
   208   000038                     __pbssCOMRAM:
   209                           	callstack 0
   210   000038                     _EUSART4RXbuf:
   211                           	callstack 0
   212   000038                     	ds	20
   213   00004C                     _interrupt_flag:
   214                           	callstack 0
   215   00004C                     	ds	2
   216   00004E                     _TxBufReadCnt:
   217                           	callstack 0
   218   00004E                     	ds	1
   219   00004F                     _TxBufWriteCnt:
   220                           	callstack 0
   221   00004F                     	ds	1
   222   000050                     _RxBufReadCnt:
   223                           	callstack 0
   224   000050                     	ds	1
   225   000051                     _RxBufWriteCnt:
   226                           	callstack 0
   227   000051                     	ds	1
   228                           
   229                           	psect	bssBANK0
   230   000060                     __pbssBANK0:
   231                           	callstack 0
   232   000060                     _EUSART4TXbuf:
   233                           	callstack 0
   234   000060                     	ds	60
   235                           
   236                           	psect	cstackCOMRAM
   237   000001                     __pcstackCOMRAM:
   238                           	callstack 0
   239   000001                     ??_HighISR:
   240                           
   241                           ; 1 bytes @ 0x0
   242   000001                     	ds	1
   243   000002                     ??_I2C_2_Master_Idle:
   244   000002                     ?___wmul:
   245                           	callstack 0
   246   000002                     initDCmotorsPWM@PWMperiod:
   247                           	callstack 0
   248   000002                     motorLinit@mL:
   249                           	callstack 0
   250   000002                     motorRinit@mR:
   251                           	callstack 0
   252   000002                     ___wmul@multiplier:
   253                           	callstack 0
   254                           
   255                           ; 2 bytes @ 0x1
   256   000002                     	ds	1
   257   000003                     ??_I2C_2_Master_Read:
   258   000003                     I2C_2_Master_Write@data_byte:
   259                           	callstack 0
   260                           
   261                           ; 1 bytes @ 0x2
   262   000003                     	ds	1
   263   000004                     color_writetoaddr@value:
   264                           	callstack 0
   265   000004                     I2C_2_Master_Read@ack:
   266                           	callstack 0
   267   000004                     ___wmul@multiplicand:
   268                           	callstack 0
   269                           
   270                           ; 2 bytes @ 0x3
   271   000004                     	ds	1
   272   000005                     color_writetoaddr@address:
   273                           	callstack 0
   274   000005                     I2C_2_Master_Read@tmp:
   275                           	callstack 0
   276                           
   277                           ; 1 bytes @ 0x4
   278   000005                     	ds	1
   279   000006                     ??_Color_Interrupts_init:
   280   000006                     ??_color_click_init:
   281   000006                     ?_color_read_Red:
   282                           	callstack 0
   283   000006                     ?_color_read_Green:
   284                           	callstack 0
   285   000006                     ?_color_read_Blue:
   286                           	callstack 0
   287   000006                     ?_color_read_Clear:
   288                           	callstack 0
   289   000006                     Color_Interrupts_threshold@upperThreshold:
   290                           	callstack 0
   291   000006                     ___wmul@product:
   292                           	callstack 0
   293                           
   294                           ; 2 bytes @ 0x5
   295   000006                     	ds	2
   296   000008                     ??_color_read_Red:
   297   000008                     ??_color_read_Green:
   298   000008                     ??_color_read_Blue:
   299   000008                     ??_color_read_Clear:
   300   000008                     ?___lwdiv:
   301                           	callstack 0
   302   000008                     Color_Interrupts_threshold@lowerThreshold:
   303                           	callstack 0
   304   000008                     ___lwdiv@dividend:
   305                           	callstack 0
   306                           
   307                           ; 2 bytes @ 0x7
   308   000008                     	ds	2
   309   00000A                     ___lwdiv@divisor:
   310                           	callstack 0
   311                           
   312                           ; 2 bytes @ 0x9
   313   00000A                     	ds	1
   314   00000B                     color_read_Red@tmp:
   315                           	callstack 0
   316   00000B                     color_read_Green@tmp:
   317                           	callstack 0
   318   00000B                     color_read_Blue@tmp:
   319                           	callstack 0
   320   00000B                     color_read_Clear@tmp:
   321                           	callstack 0
   322                           
   323                           ; 2 bytes @ 0xA
   324   00000B                     	ds	1
   325   00000C                     ___lwdiv@quotient:
   326                           	callstack 0
   327                           
   328                           ; 2 bytes @ 0xB
   329   00000C                     	ds	1
   330   00000D                     color_read_RGBC@temp:
   331                           	callstack 0
   332                           
   333                           ; 2 bytes @ 0xC
   334   00000D                     	ds	1
   335   00000E                     ___lwdiv@counter:
   336                           	callstack 0
   337                           
   338                           ; 1 bytes @ 0xD
   339   00000E                     	ds	1
   340   00000F                     setMotorPWM@m:
   341                           	callstack 0
   342                           
   343                           ; 2 bytes @ 0xE
   344   00000F                     	ds	2
   345   000011                     ??_setMotorPWM:
   346                           
   347                           ; 1 bytes @ 0x10
   348   000011                     	ds	2
   349   000013                     setMotorPWM@posDuty:
   350                           	callstack 0
   351                           
   352                           ; 1 bytes @ 0x12
   353   000013                     	ds	1
   354   000014                     setMotorPWM@negDuty:
   355                           	callstack 0
   356                           
   357                           ; 1 bytes @ 0x13
   358   000014                     	ds	1
   359   000015                     norm_stop@mL:
   360                           	callstack 0
   361   000015                     turnRight@mL:
   362                           	callstack 0
   363   000015                     fullSpeedAhead@mL:
   364                           	callstack 0
   365                           
   366                           ; 2 bytes @ 0x14
   367   000015                     	ds	2
   368   000017                     norm_stop@mR:
   369                           	callstack 0
   370   000017                     turnRight@mR:
   371                           	callstack 0
   372   000017                     fullSpeedAhead@mR:
   373                           	callstack 0
   374                           
   375                           ; 2 bytes @ 0x16
   376   000017                     	ds	2
   377   000019                     ??_fullSpeedAhead:
   378   000019                     
   379                           ; 1 bytes @ 0x18
   380   000019                     	ds	1
   381   00001A                     ??_main:
   382                           
   383                           ; 1 bytes @ 0x19
   384   00001A                     	ds	2
   385   00001C                     main@lowerThreshold:
   386                           	callstack 0
   387                           
   388                           ; 2 bytes @ 0x1B
   389   00001C                     	ds	2
   390   00001E                     main@RGBC:
   391                           	callstack 0
   392                           
   393                           ; 8 bytes @ 0x1D
   394   00001E                     	ds	8
   395   000026                     main@mL:
   396                           	callstack 0
   397                           
   398                           ; 9 bytes @ 0x25
   399   000026                     	ds	9
   400   00002F                     main@mR:
   401                           	callstack 0
   402                           
   403                           ; 9 bytes @ 0x2E
   404   00002F                     	ds	9
   405                           
   406 ;;
   407 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   408 ;;
   409 ;; *************** function _main *****************
   410 ;; Defined at:
   411 ;;		line 73 in file "main.c"
   412 ;; Parameters:    Size  Location     Type
   413 ;;		None
   414 ;; Auto vars:     Size  Location     Type
   415 ;;  mR              9   46[COMRAM] struct DC_motor
   416 ;;  mL              9   37[COMRAM] struct DC_motor
   417 ;;  RGBC            8   29[COMRAM] struct RGBC_val
   418 ;;  lowerThresho    2   27[COMRAM] unsigned int 
   419 ;;  upperThresho    2    0        unsigned int 
   420 ;; Return value:  Size  Location     Type
   421 ;;                  1    wreg      void 
   422 ;; Registers used:
   423 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   424 ;; Tracked objects:
   425 ;;		On entry : 0/0
   426 ;;		On exit  : 0/0
   427 ;;		Unchanged: 0/0
   428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   430 ;;      Locals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   431 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   432 ;;      Totals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   433 ;;Total ram usage:       30 bytes
   434 ;; Hardware stack levels required when called: 5
   435 ;; This function calls:
   436 ;;		_Color_Interrupts_clear
   437 ;;		_Color_Interrupts_init
   438 ;;		_Color_Interrupts_threshold
   439 ;;		_Interrupts_init
   440 ;;		_color_click_init
   441 ;;		_color_read_RGBC
   442 ;;		_fullSpeedAhead
   443 ;;		_initDCmotorsPWM
   444 ;;		_motorLinit
   445 ;;		_motorRinit
   446 ;;		_norm_stop
   447 ;;		_persistence_register
   448 ;;		_turnRight
   449 ;; This function is called by:
   450 ;;		Startup code after reset
   451 ;; This function uses a non-reentrant model
   452 ;;
   453                           
   454                           	psect	text0
   455   000F80                     __ptext0:
   456                           	callstack 0
   457   000F80                     _main:
   458                           	callstack 26
   459   000F80                     
   460                           ;main.c: 74:     TRISHbits.TRISH3 = 0;
   461   000F80  9688               	bcf	136,3,c	;volatile
   462                           
   463                           ;main.c: 75:     TRISBbits.TRISB0 = 1;
   464   000F82  8082               	bsf	130,0,c	;volatile
   465                           
   466                           ;main.c: 76:     ANSELBbits.ANSELB0 = 0;
   467   000F84  010E               	movlb	14	; () banked
   468   000F86  919A               	bcf	154,0,b	;volatile
   469                           
   470                           ;main.c: 77:     LATHbits.LATH3 = 0;
   471   000F88  9680               	bcf	128,3,c	;volatile
   472   000F8A                     
   473                           ; BSR set to: 14
   474                           ;main.c: 81:     unsigned int lowerThreshold = 0;
   475   000F8A  0E00               	movlw	0
   476   000F8C  6E1D               	movwf	(main@lowerThreshold+1)^0,c
   477   000F8E  0E00               	movlw	0
   478   000F90  6E1C               	movwf	main@lowerThreshold^0,c
   479   000F92                     
   480                           ; BSR set to: 14
   481                           ;main.c: 83:     color_click_init();
   482   000F92  ECFD  F00A         	call	_color_click_init	;wreg free
   483   000F96                     
   484                           ;main.c: 84:     Color_Interrupts_threshold(upperThreshold, lowerThreshold);
   485   000F96  0E27               	movlw	39
   486   000F98  6E07               	movwf	(Color_Interrupts_threshold@upperThreshold+1)^0,c
   487   000F9A  0E10               	movlw	16
   488   000F9C  6E06               	movwf	Color_Interrupts_threshold@upperThreshold^0,c
   489   000F9E  0E00               	movlw	0
   490   000FA0  6E09               	movwf	(Color_Interrupts_threshold@lowerThreshold+1)^0,c
   491   000FA2  0E00               	movlw	0
   492   000FA4  6E08               	movwf	Color_Interrupts_threshold@lowerThreshold^0,c
   493   000FA6  EC5A  F00B         	call	_Color_Interrupts_threshold	;wreg free
   494   000FAA                     
   495                           ;main.c: 85:     persistence_register();
   496   000FAA  ECCA  F00B         	call	_persistence_register	;wreg free
   497   000FAE                     
   498                           ;main.c: 86:     Color_Interrupts_init();
   499   000FAE  ECA6  F00B         	call	_Color_Interrupts_init	;wreg free
   500   000FB2                     
   501                           ;main.c: 88:     Interrupts_init();
   502   000FB2  ECC0  F00B         	call	_Interrupts_init	;wreg free
   503                           
   504                           ;main.c: 90:     initDCmotorsPWM(200);
   505   000FB6  0E00               	movlw	0
   506   000FB8  6E03               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   507   000FBA  0EC8               	movlw	200
   508   000FBC  6E02               	movwf	initDCmotorsPWM@PWMperiod^0,c
   509   000FBE  ECF0  F008         	call	_initDCmotorsPWM	;wreg free
   510   000FC2                     
   511                           ;main.c: 91:     TRISEbits.TRISE2 = 0;
   512   000FC2  9485               	bcf	133,2,c	;volatile
   513   000FC4                     
   514                           ;main.c: 92:     TRISEbits.TRISE4 = 0;
   515   000FC4  9885               	bcf	133,4,c	;volatile
   516   000FC6                     
   517                           ;main.c: 93:     TRISCbits.TRISC7 = 0;
   518   000FC6  9E83               	bcf	131,7,c	;volatile
   519   000FC8                     
   520                           ;main.c: 94:     TRISGbits.TRISG6 = 0;
   521   000FC8  9C87               	bcf	135,6,c	;volatile
   522   000FCA                     
   523                           ;main.c: 95:     DC_motor mL, mR;;main.c: 96:     motorLinit(&mL);
   524   000FCA  0E26               	movlw	low main@mL
   525   000FCC  6E02               	movwf	motorLinit@mL^0,c
   526   000FCE  0E00               	movlw	high main@mL
   527   000FD0  6E03               	movwf	(motorLinit@mL+1)^0,c
   528   000FD2  ECD8  F009         	call	_motorLinit	;wreg free
   529   000FD6                     
   530                           ;main.c: 97:     motorRinit(&mR);
   531   000FD6  0E2F               	movlw	low main@mR
   532   000FD8  6E02               	movwf	motorRinit@mR^0,c
   533   000FDA  0E00               	movlw	high main@mR
   534   000FDC  6E03               	movwf	(motorRinit@mR+1)^0,c
   535   000FDE  ECA3  F009         	call	_motorRinit	;wreg free
   536   000FE2                     l1774:
   537                           
   538                           ;main.c: 100:         color_read_RGBC(&RGBC);
   539   000FE2  0E1E               	movlw	low main@RGBC
   540   000FE4  6E0D               	movwf	color_read_RGBC@temp^0,c
   541   000FE6  0E00               	movlw	high main@RGBC
   542   000FE8  6E0E               	movwf	(color_read_RGBC@temp+1)^0,c
   543   000FEA  EC0D  F00A         	call	_color_read_RGBC	;wreg free
   544   000FEE                     
   545                           ;main.c: 103:         fullSpeedAhead(&mL, &mR);
   546   000FEE  0E26               	movlw	low main@mL
   547   000FF0  6E15               	movwf	fullSpeedAhead@mL^0,c
   548   000FF2  0E00               	movlw	high main@mL
   549   000FF4  6E16               	movwf	(fullSpeedAhead@mL+1)^0,c
   550   000FF6  0E2F               	movlw	low main@mR
   551   000FF8  6E17               	movwf	fullSpeedAhead@mR^0,c
   552   000FFA  0E00               	movlw	high main@mR
   553   000FFC  6E18               	movwf	(fullSpeedAhead@mR+1)^0,c
   554   000FFE  EC74  F008         	call	_fullSpeedAhead	;wreg free
   555   001002                     
   556                           ;main.c: 104:         _delay((unsigned long)((1000)*(64000000/4000.0)));
   557   001002  0E52               	movlw	82
   558   001004  6E1B               	movwf	(??_main+1)^0,c
   559   001006  0E2B               	movlw	43
   560   001008  6E1A               	movwf	??_main^0,c
   561   00100A  0E00               	movlw	0
   562   00100C                     u507:
   563   00100C  2EE8               	decfsz	wreg,f,c
   564   00100E  D7FE               	bra	u507
   565   001010  2E1A               	decfsz	??_main^0,f,c
   566   001012  D7FC               	bra	u507
   567   001014  2E1B               	decfsz	(??_main+1)^0,f,c
   568   001016  D7FA               	bra	u507
   569   001018  D000               	nop2	
   570   00101A                     
   571                           ;main.c: 109:         if (interrupt_flag == 1) {
   572   00101A  044C               	decf	_interrupt_flag^0,w,c
   573   00101C  104D               	iorwf	(_interrupt_flag+1)^0,w,c
   574   00101E  A4D8               	btfss	status,2,c
   575   001020  EF14  F008         	goto	u411
   576   001024  EF16  F008         	goto	u410
   577   001028                     u411:
   578   001028  EF5A  F008         	goto	l1796
   579   00102C                     u410:
   580   00102C                     
   581                           ;main.c: 110:             LATHbits.LATH3 = !LATHbits.LATH3;
   582   00102C  A680               	btfss	128,3,c	;volatile
   583   00102E  EF1B  F008         	goto	u421
   584   001032  EF1F  F008         	goto	u420
   585   001036                     u421:
   586   001036  6A1A               	clrf	??_main^0,c
   587   001038  2A1A               	incf	??_main^0,f,c
   588   00103A  EF20  F008         	goto	u438
   589   00103E                     u420:
   590   00103E  6A1A               	clrf	??_main^0,c
   591   001040                     u438:
   592   001040  461A               	rlncf	??_main^0,f,c
   593   001042  461A               	rlncf	??_main^0,f,c
   594   001044  461A               	rlncf	??_main^0,f,c
   595   001046  5080               	movf	128,w,c	;volatile
   596   001048  181A               	xorwf	??_main^0,w,c
   597   00104A  0BF7               	andlw	-9
   598   00104C  181A               	xorwf	??_main^0,w,c
   599   00104E  6E80               	movwf	128,c	;volatile
   600   001050                     
   601                           ;main.c: 111:             norm_stop(&mL, &mR);
   602   001050  0E26               	movlw	low main@mL
   603   001052  6E15               	movwf	norm_stop@mL^0,c
   604   001054  0E00               	movlw	high main@mL
   605   001056  6E16               	movwf	(norm_stop@mL+1)^0,c
   606   001058  0E2F               	movlw	low main@mR
   607   00105A  6E17               	movwf	norm_stop@mR^0,c
   608   00105C  0E00               	movlw	high main@mR
   609   00105E  6E18               	movwf	(norm_stop@mR+1)^0,c
   610   001060  EC17  F00B         	call	_norm_stop	;wreg free
   611   001064                     
   612                           ;main.c: 112:             _delay((unsigned long)((500)*(64000000/4000.0)));
   613   001064  0E29               	movlw	41
   614   001066  6E1B               	movwf	(??_main+1)^0,c
   615   001068  0E96               	movlw	150
   616   00106A  6E1A               	movwf	??_main^0,c
   617   00106C  0E7F               	movlw	127
   618   00106E                     u517:
   619   00106E  2EE8               	decfsz	wreg,f,c
   620   001070  D7FE               	bra	u517
   621   001072  2E1A               	decfsz	??_main^0,f,c
   622   001074  D7FC               	bra	u517
   623   001076  2E1B               	decfsz	(??_main+1)^0,f,c
   624   001078  D7FA               	bra	u517
   625   00107A  F000               	nop	
   626   00107C                     
   627                           ;main.c: 113:             turnRight(&mL, &mR);
   628   00107C  0E26               	movlw	low main@mL
   629   00107E  6E15               	movwf	turnRight@mL^0,c
   630   001080  0E00               	movlw	high main@mL
   631   001082  6E16               	movwf	(turnRight@mL+1)^0,c
   632   001084  0E2F               	movlw	low main@mR
   633   001086  6E17               	movwf	turnRight@mR^0,c
   634   001088  0E00               	movlw	high main@mR
   635   00108A  6E18               	movwf	(turnRight@mR+1)^0,c
   636   00108C  EC6A  F009         	call	_turnRight	;wreg free
   637   001090                     
   638                           ;main.c: 114:             _delay((unsigned long)((500)*(64000000/4000.0)));
   639   001090  0E29               	movlw	41
   640   001092  6E1B               	movwf	(??_main+1)^0,c
   641   001094  0E96               	movlw	150
   642   001096  6E1A               	movwf	??_main^0,c
   643   001098  0E7F               	movlw	127
   644   00109A                     u527:
   645   00109A  2EE8               	decfsz	wreg,f,c
   646   00109C  D7FE               	bra	u527
   647   00109E  2E1A               	decfsz	??_main^0,f,c
   648   0010A0  D7FC               	bra	u527
   649   0010A2  2E1B               	decfsz	(??_main+1)^0,f,c
   650   0010A4  D7FA               	bra	u527
   651   0010A6  F000               	nop	
   652   0010A8                     
   653                           ;main.c: 115:             interrupt_flag = 0;
   654   0010A8  0E00               	movlw	0
   655   0010AA  6E4D               	movwf	(_interrupt_flag+1)^0,c
   656   0010AC  0E00               	movlw	0
   657   0010AE  6E4C               	movwf	_interrupt_flag^0,c
   658   0010B0                     
   659                           ;main.c: 116:             Color_Interrupts_clear();
   660   0010B0  ECB5  F00B         	call	_Color_Interrupts_clear	;wreg free
   661   0010B4                     l1796:
   662                           
   663                           ;main.c: 118:         norm_stop(&mL, &mR);
   664   0010B4  0E26               	movlw	low main@mL
   665   0010B6  6E15               	movwf	norm_stop@mL^0,c
   666   0010B8  0E00               	movlw	high main@mL
   667   0010BA  6E16               	movwf	(norm_stop@mL+1)^0,c
   668   0010BC  0E2F               	movlw	low main@mR
   669   0010BE  6E17               	movwf	norm_stop@mR^0,c
   670   0010C0  0E00               	movlw	high main@mR
   671   0010C2  6E18               	movwf	(norm_stop@mR+1)^0,c
   672   0010C4  EC17  F00B         	call	_norm_stop	;wreg free
   673   0010C8                     
   674                           ;main.c: 119:         _delay((unsigned long)((500)*(64000000/4000.0)));
   675   0010C8  0E29               	movlw	41
   676   0010CA  6E1B               	movwf	(??_main+1)^0,c
   677   0010CC  0E96               	movlw	150
   678   0010CE  6E1A               	movwf	??_main^0,c
   679   0010D0  0E7F               	movlw	127
   680   0010D2                     u537:
   681   0010D2  2EE8               	decfsz	wreg,f,c
   682   0010D4  D7FE               	bra	u537
   683   0010D6  2E1A               	decfsz	??_main^0,f,c
   684   0010D8  D7FC               	bra	u537
   685   0010DA  2E1B               	decfsz	(??_main+1)^0,f,c
   686   0010DC  D7FA               	bra	u537
   687   0010DE  F000               	nop	
   688   0010E0  EFF1  F007         	goto	l1774
   689   0010E4  EF26  F000         	goto	start
   690   0010E8                     __end_of_main:
   691                           	callstack 0
   692                           
   693 ;; *************** function _turnRight *****************
   694 ;; Defined at:
   695 ;;		line 144 in file "dc_motor.c"
   696 ;; Parameters:    Size  Location     Type
   697 ;;  mL              2   20[COMRAM] PTR struct DC_motor
   698 ;;		 -> main@mL(9), 
   699 ;;  mR              2   22[COMRAM] PTR struct DC_motor
   700 ;;		 -> main@mR(9), 
   701 ;; Auto vars:     Size  Location     Type
   702 ;;		None
   703 ;; Return value:  Size  Location     Type
   704 ;;                  1    wreg      void 
   705 ;; Registers used:
   706 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   707 ;; Tracked objects:
   708 ;;		On entry : 0/0
   709 ;;		On exit  : 0/0
   710 ;;		Unchanged: 0/0
   711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   712 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   715 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   716 ;;Total ram usage:        4 bytes
   717 ;; Hardware stack levels used: 1
   718 ;; Hardware stack levels required when called: 3
   719 ;; This function calls:
   720 ;;		_setMotorPWM
   721 ;; This function is called by:
   722 ;;		_main
   723 ;; This function uses a non-reentrant model
   724 ;;
   725                           
   726                           	psect	text1
   727   0012D4                     __ptext1:
   728                           	callstack 0
   729   0012D4                     _turnRight:
   730                           	callstack 27
   731   0012D4                     
   732                           ;dc_motor.c: 144: void turnRight(DC_motor *mL, DC_motor *mR);dc_motor.c: 145: {;dc_motor
      +                          .c: 146:     mL->power = 50;
   733   0012D4  C015  FFD9         	movff	turnRight@mL,fsr2l
   734   0012D8  C016  FFDA         	movff	turnRight@mL+1,fsr2h
   735   0012DC  0E32               	movlw	50
   736   0012DE  6EDF               	movwf	indf2,c
   737                           
   738                           ;dc_motor.c: 147:     mR->power = 50;
   739   0012E0  C017  FFD9         	movff	turnRight@mR,fsr2l
   740   0012E4  C018  FFDA         	movff	turnRight@mR+1,fsr2h
   741   0012E8  0E32               	movlw	50
   742   0012EA  6EDF               	movwf	indf2,c
   743   0012EC                     
   744                           ;dc_motor.c: 148:     mL->brakemode = 1;
   745   0012EC  EE20 F002          	lfsr	2,2
   746   0012F0  5015               	movf	turnRight@mL^0,w,c
   747   0012F2  26D9               	addwf	fsr2l,f,c
   748   0012F4  5016               	movf	(turnRight@mL+1)^0,w,c
   749   0012F6  22DA               	addwfc	fsr2h,f,c
   750   0012F8  0E01               	movlw	1
   751   0012FA  6EDF               	movwf	indf2,c
   752   0012FC                     
   753                           ;dc_motor.c: 149:     mR->brakemode = 1;
   754   0012FC  EE20 F002          	lfsr	2,2
   755   001300  5017               	movf	turnRight@mR^0,w,c
   756   001302  26D9               	addwf	fsr2l,f,c
   757   001304  5018               	movf	(turnRight@mR+1)^0,w,c
   758   001306  22DA               	addwfc	fsr2h,f,c
   759   001308  0E01               	movlw	1
   760   00130A  6EDF               	movwf	indf2,c
   761   00130C                     
   762                           ;dc_motor.c: 150:     mR->direction = 0;
   763   00130C  EE20 F001          	lfsr	2,1
   764   001310  5017               	movf	turnRight@mR^0,w,c
   765   001312  26D9               	addwf	fsr2l,f,c
   766   001314  5018               	movf	(turnRight@mR+1)^0,w,c
   767   001316  22DA               	addwfc	fsr2h,f,c
   768   001318  0E00               	movlw	0
   769   00131A  6EDF               	movwf	indf2,c
   770   00131C                     
   771                           ;dc_motor.c: 151:     mL->direction = 1;
   772   00131C  EE20 F001          	lfsr	2,1
   773   001320  5015               	movf	turnRight@mL^0,w,c
   774   001322  26D9               	addwf	fsr2l,f,c
   775   001324  5016               	movf	(turnRight@mL+1)^0,w,c
   776   001326  22DA               	addwfc	fsr2h,f,c
   777   001328  0E01               	movlw	1
   778   00132A  6EDF               	movwf	indf2,c
   779   00132C                     
   780                           ;dc_motor.c: 152:     setMotorPWM(mL);
   781   00132C  C015  F00F         	movff	turnRight@mL,setMotorPWM@m
   782   001330  C016  F010         	movff	turnRight@mL+1,setMotorPWM@m+1
   783   001334  EC0A  F007         	call	_setMotorPWM	;wreg free
   784   001338                     
   785                           ;dc_motor.c: 153:     setMotorPWM(mR);
   786   001338  C017  F00F         	movff	turnRight@mR,setMotorPWM@m
   787   00133C  C018  F010         	movff	turnRight@mR+1,setMotorPWM@m+1
   788   001340  EC0A  F007         	call	_setMotorPWM	;wreg free
   789   001344  0012               	return		;funcret
   790   001346                     __end_of_turnRight:
   791                           	callstack 0
   792                           
   793 ;; *************** function _persistence_register *****************
   794 ;; Defined at:
   795 ;;		line 44 in file "interrupts.c"
   796 ;; Parameters:    Size  Location     Type
   797 ;;		None
   798 ;; Auto vars:     Size  Location     Type
   799 ;;		None
   800 ;; Return value:  Size  Location     Type
   801 ;;                  1    wreg      void 
   802 ;; Registers used:
   803 ;;		wreg, status,2, status,0, cstack
   804 ;; Tracked objects:
   805 ;;		On entry : 0/0
   806 ;;		On exit  : 0/0
   807 ;;		Unchanged: 0/0
   808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   813 ;;Total ram usage:        0 bytes
   814 ;; Hardware stack levels used: 1
   815 ;; Hardware stack levels required when called: 4
   816 ;; This function calls:
   817 ;;		_color_writetoaddr
   818 ;; This function is called by:
   819 ;;		_main
   820 ;; This function uses a non-reentrant model
   821 ;;
   822                           
   823                           	psect	text2
   824   001794                     __ptext2:
   825                           	callstack 0
   826   001794                     _persistence_register:
   827                           	callstack 26
   828   001794                     
   829                           ;interrupts.c: 46:  color_writetoaddr(0x0C, 0b0100);
   830   001794  0E04               	movlw	4
   831   001796  6E04               	movwf	color_writetoaddr@value^0,c
   832   001798  0E0C               	movlw	12
   833   00179A  EC96  F00B         	call	_color_writetoaddr
   834   00179E  0012               	return		;funcret
   835   0017A0                     __end_of_persistence_register:
   836                           	callstack 0
   837                           
   838 ;; *************** function _norm_stop *****************
   839 ;; Defined at:
   840 ;;		line 118 in file "dc_motor.c"
   841 ;; Parameters:    Size  Location     Type
   842 ;;  mL              2   20[COMRAM] PTR struct DC_motor
   843 ;;		 -> main@mL(9), 
   844 ;;  mR              2   22[COMRAM] PTR struct DC_motor
   845 ;;		 -> main@mR(9), 
   846 ;; Auto vars:     Size  Location     Type
   847 ;;		None
   848 ;; Return value:  Size  Location     Type
   849 ;;                  1    wreg      void 
   850 ;; Registers used:
   851 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   852 ;; Tracked objects:
   853 ;;		On entry : 0/0
   854 ;;		On exit  : 0/0
   855 ;;		Unchanged: 0/0
   856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   857 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   860 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   861 ;;Total ram usage:        4 bytes
   862 ;; Hardware stack levels used: 1
   863 ;; Hardware stack levels required when called: 3
   864 ;; This function calls:
   865 ;;		_setMotorPWM
   866 ;; This function is called by:
   867 ;;		_main
   868 ;; This function uses a non-reentrant model
   869 ;;
   870                           
   871                           	psect	text3
   872   00162E                     __ptext3:
   873                           	callstack 0
   874   00162E                     _norm_stop:
   875                           	callstack 27
   876   00162E                     
   877                           ;dc_motor.c: 118: void norm_stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 119: {;dc_motor
      +                          .c: 124:     mL->power = 0;
   878   00162E  C015  FFD9         	movff	norm_stop@mL,fsr2l
   879   001632  C016  FFDA         	movff	norm_stop@mL+1,fsr2h
   880   001636  0E00               	movlw	0
   881   001638  6EDF               	movwf	indf2,c
   882                           
   883                           ;dc_motor.c: 125:     mR->power = 0;
   884   00163A  C017  FFD9         	movff	norm_stop@mR,fsr2l
   885   00163E  C018  FFDA         	movff	norm_stop@mR+1,fsr2h
   886   001642  0E00               	movlw	0
   887   001644  6EDF               	movwf	indf2,c
   888   001646                     
   889                           ;dc_motor.c: 126:     setMotorPWM(mL);
   890   001646  C015  F00F         	movff	norm_stop@mL,setMotorPWM@m
   891   00164A  C016  F010         	movff	norm_stop@mL+1,setMotorPWM@m+1
   892   00164E  EC0A  F007         	call	_setMotorPWM	;wreg free
   893   001652                     
   894                           ;dc_motor.c: 127:     setMotorPWM(mR);
   895   001652  C017  F00F         	movff	norm_stop@mR,setMotorPWM@m
   896   001656  C018  F010         	movff	norm_stop@mR+1,setMotorPWM@m+1
   897   00165A  EC0A  F007         	call	_setMotorPWM	;wreg free
   898   00165E  0012               	return		;funcret
   899   001660                     __end_of_norm_stop:
   900                           	callstack 0
   901                           
   902 ;; *************** function _motorRinit *****************
   903 ;; Defined at:
   904 ;;		line 88 in file "dc_motor.c"
   905 ;; Parameters:    Size  Location     Type
   906 ;;  mR              2    1[COMRAM] PTR struct DC_motor
   907 ;;		 -> main@mR(9), 
   908 ;; Auto vars:     Size  Location     Type
   909 ;;		None
   910 ;; Return value:  Size  Location     Type
   911 ;;                  1    wreg      void 
   912 ;; Registers used:
   913 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   914 ;; Tracked objects:
   915 ;;		On entry : 0/0
   916 ;;		On exit  : 0/0
   917 ;;		Unchanged: 0/0
   918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   919 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   922 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   923 ;;Total ram usage:        2 bytes
   924 ;; Hardware stack levels used: 1
   925 ;; Hardware stack levels required when called: 1
   926 ;; This function calls:
   927 ;;		Nothing
   928 ;; This function is called by:
   929 ;;		_main
   930 ;; This function uses a non-reentrant model
   931 ;;
   932                           
   933                           	psect	text4
   934   001346                     __ptext4:
   935                           	callstack 0
   936   001346                     _motorRinit:
   937                           	callstack 29
   938   001346                     
   939                           ;dc_motor.c: 88: void motorRinit(DC_motor *mR);dc_motor.c: 89: {;dc_motor.c: 90:     mR-
      +                          >power = 50;
   940   001346  C002  FFD9         	movff	motorRinit@mR,fsr2l
   941   00134A  C003  FFDA         	movff	motorRinit@mR+1,fsr2h
   942   00134E  0E32               	movlw	50
   943   001350  6EDF               	movwf	indf2,c
   944   001352                     
   945                           ;dc_motor.c: 91:     mR->direction = 1;
   946   001352  EE20 F001          	lfsr	2,1
   947   001356  5002               	movf	motorRinit@mR^0,w,c
   948   001358  26D9               	addwf	fsr2l,f,c
   949   00135A  5003               	movf	(motorRinit@mR+1)^0,w,c
   950   00135C  22DA               	addwfc	fsr2h,f,c
   951   00135E  0E01               	movlw	1
   952   001360  6EDF               	movwf	indf2,c
   953   001362                     
   954                           ;dc_motor.c: 92:     mR->brakemode = 1;
   955   001362  EE20 F002          	lfsr	2,2
   956   001366  5002               	movf	motorRinit@mR^0,w,c
   957   001368  26D9               	addwf	fsr2l,f,c
   958   00136A  5003               	movf	(motorRinit@mR+1)^0,w,c
   959   00136C  22DA               	addwfc	fsr2h,f,c
   960   00136E  0E01               	movlw	1
   961   001370  6EDF               	movwf	indf2,c
   962   001372                     
   963                           ;dc_motor.c: 93:     mR->posDutyHighByte = (unsigned char *) (&CCPR3H);
   964   001372  EE20 F005          	lfsr	2,5
   965   001376  5002               	movf	motorRinit@mR^0,w,c
   966   001378  26D9               	addwf	fsr2l,f,c
   967   00137A  5003               	movf	(motorRinit@mR+1)^0,w,c
   968   00137C  22DA               	addwfc	fsr2h,f,c
   969   00137E  0E25               	movlw	37
   970   001380  6EDE               	movwf	postinc2,c
   971   001382  0E0F               	movlw	15
   972   001384  6EDD               	movwf	postdec2,c
   973   001386                     
   974                           ;dc_motor.c: 94:     mR->negDutyHighByte = (unsigned char *) (&CCPR4H);
   975   001386  EE20 F007          	lfsr	2,7
   976   00138A  5002               	movf	motorRinit@mR^0,w,c
   977   00138C  26D9               	addwf	fsr2l,f,c
   978   00138E  5003               	movf	(motorRinit@mR+1)^0,w,c
   979   001390  22DA               	addwfc	fsr2h,f,c
   980   001392  0E21               	movlw	33
   981   001394  6EDE               	movwf	postinc2,c
   982   001396  0E0F               	movlw	15
   983   001398  6EDD               	movwf	postdec2,c
   984   00139A                     
   985                           ;dc_motor.c: 95:     mR->PWMperiod = 200;
   986   00139A  EE20 F003          	lfsr	2,3
   987   00139E  5002               	movf	motorRinit@mR^0,w,c
   988   0013A0  26D9               	addwf	fsr2l,f,c
   989   0013A2  5003               	movf	(motorRinit@mR+1)^0,w,c
   990   0013A4  22DA               	addwfc	fsr2h,f,c
   991   0013A6  0EC8               	movlw	200
   992   0013A8  6EDE               	movwf	postinc2,c
   993   0013AA  0E00               	movlw	0
   994   0013AC  6EDD               	movwf	postdec2,c
   995   0013AE  0012               	return		;funcret
   996   0013B0                     __end_of_motorRinit:
   997                           	callstack 0
   998                           
   999 ;; *************** function _motorLinit *****************
  1000 ;; Defined at:
  1001 ;;		line 78 in file "dc_motor.c"
  1002 ;; Parameters:    Size  Location     Type
  1003 ;;  mL              2    1[COMRAM] PTR struct DC_motor
  1004 ;;		 -> main@mL(9), 
  1005 ;; Auto vars:     Size  Location     Type
  1006 ;;		None
  1007 ;; Return value:  Size  Location     Type
  1008 ;;                  1    wreg      void 
  1009 ;; Registers used:
  1010 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1011 ;; Tracked objects:
  1012 ;;		On entry : 0/0
  1013 ;;		On exit  : 0/0
  1014 ;;		Unchanged: 0/0
  1015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1016 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1019 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1020 ;;Total ram usage:        2 bytes
  1021 ;; Hardware stack levels used: 1
  1022 ;; Hardware stack levels required when called: 1
  1023 ;; This function calls:
  1024 ;;		Nothing
  1025 ;; This function is called by:
  1026 ;;		_main
  1027 ;; This function uses a non-reentrant model
  1028 ;;
  1029                           
  1030                           	psect	text5
  1031   0013B0                     __ptext5:
  1032                           	callstack 0
  1033   0013B0                     _motorLinit:
  1034                           	callstack 29
  1035   0013B0                     
  1036                           ;dc_motor.c: 78: void motorLinit(DC_motor *mL);dc_motor.c: 79: {;dc_motor.c: 80:     mL-
      +                          >power = 50;
  1037   0013B0  C002  FFD9         	movff	motorLinit@mL,fsr2l
  1038   0013B4  C003  FFDA         	movff	motorLinit@mL+1,fsr2h
  1039   0013B8  0E32               	movlw	50
  1040   0013BA  6EDF               	movwf	indf2,c
  1041   0013BC                     
  1042                           ;dc_motor.c: 81:     mL->direction = 1;
  1043   0013BC  EE20 F001          	lfsr	2,1
  1044   0013C0  5002               	movf	motorLinit@mL^0,w,c
  1045   0013C2  26D9               	addwf	fsr2l,f,c
  1046   0013C4  5003               	movf	(motorLinit@mL+1)^0,w,c
  1047   0013C6  22DA               	addwfc	fsr2h,f,c
  1048   0013C8  0E01               	movlw	1
  1049   0013CA  6EDF               	movwf	indf2,c
  1050   0013CC                     
  1051                           ;dc_motor.c: 82:     mL->brakemode = 1;
  1052   0013CC  EE20 F002          	lfsr	2,2
  1053   0013D0  5002               	movf	motorLinit@mL^0,w,c
  1054   0013D2  26D9               	addwf	fsr2l,f,c
  1055   0013D4  5003               	movf	(motorLinit@mL+1)^0,w,c
  1056   0013D6  22DA               	addwfc	fsr2h,f,c
  1057   0013D8  0E01               	movlw	1
  1058   0013DA  6EDF               	movwf	indf2,c
  1059   0013DC                     
  1060                           ;dc_motor.c: 83:     mL->posDutyHighByte = (unsigned char *) (&CCPR1H);
  1061   0013DC  EE20 F005          	lfsr	2,5
  1062   0013E0  5002               	movf	motorLinit@mL^0,w,c
  1063   0013E2  26D9               	addwf	fsr2l,f,c
  1064   0013E4  5003               	movf	(motorLinit@mL+1)^0,w,c
  1065   0013E6  22DA               	addwfc	fsr2h,f,c
  1066   0013E8  0EAA               	movlw	170
  1067   0013EA  6EDE               	movwf	postinc2,c
  1068   0013EC  0E0F               	movlw	15
  1069   0013EE  6EDD               	movwf	postdec2,c
  1070   0013F0                     
  1071                           ;dc_motor.c: 84:     mL->negDutyHighByte = (unsigned char *) (&CCPR2H);
  1072   0013F0  EE20 F007          	lfsr	2,7
  1073   0013F4  5002               	movf	motorLinit@mL^0,w,c
  1074   0013F6  26D9               	addwf	fsr2l,f,c
  1075   0013F8  5003               	movf	(motorLinit@mL+1)^0,w,c
  1076   0013FA  22DA               	addwfc	fsr2h,f,c
  1077   0013FC  0EA6               	movlw	166
  1078   0013FE  6EDE               	movwf	postinc2,c
  1079   001400  0E0F               	movlw	15
  1080   001402  6EDD               	movwf	postdec2,c
  1081   001404                     
  1082                           ;dc_motor.c: 85:     mL->PWMperiod = 200;
  1083   001404  EE20 F003          	lfsr	2,3
  1084   001408  5002               	movf	motorLinit@mL^0,w,c
  1085   00140A  26D9               	addwf	fsr2l,f,c
  1086   00140C  5003               	movf	(motorLinit@mL+1)^0,w,c
  1087   00140E  22DA               	addwfc	fsr2h,f,c
  1088   001410  0EC8               	movlw	200
  1089   001412  6EDE               	movwf	postinc2,c
  1090   001414  0E00               	movlw	0
  1091   001416  6EDD               	movwf	postdec2,c
  1092   001418  0012               	return		;funcret
  1093   00141A                     __end_of_motorLinit:
  1094                           	callstack 0
  1095                           
  1096 ;; *************** function _initDCmotorsPWM *****************
  1097 ;; Defined at:
  1098 ;;		line 5 in file "dc_motor.c"
  1099 ;; Parameters:    Size  Location     Type
  1100 ;;  PWMperiod       2    1[COMRAM] unsigned int 
  1101 ;; Auto vars:     Size  Location     Type
  1102 ;;		None
  1103 ;; Return value:  Size  Location     Type
  1104 ;;                  1    wreg      void 
  1105 ;; Registers used:
  1106 ;;		wreg, status,2
  1107 ;; Tracked objects:
  1108 ;;		On entry : 0/0
  1109 ;;		On exit  : 0/0
  1110 ;;		Unchanged: 0/0
  1111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1112 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1115 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1116 ;;Total ram usage:        2 bytes
  1117 ;; Hardware stack levels used: 1
  1118 ;; Hardware stack levels required when called: 1
  1119 ;; This function calls:
  1120 ;;		Nothing
  1121 ;; This function is called by:
  1122 ;;		_main
  1123 ;; This function uses a non-reentrant model
  1124 ;;
  1125                           
  1126                           	psect	text6
  1127   0011E0                     __ptext6:
  1128                           	callstack 0
  1129   0011E0                     _initDCmotorsPWM:
  1130                           	callstack 29
  1131   0011E0                     
  1132                           ;dc_motor.c: 9:     RE2PPS=0x05;
  1133   0011E0  0E05               	movlw	5
  1134   0011E2  010E               	movlb	14	; () banked
  1135   0011E4  6F74               	movwf	116,b	;volatile
  1136                           
  1137                           ;dc_motor.c: 10:     RE4PPS=0x06;
  1138   0011E6  0E06               	movlw	6
  1139   0011E8  6F76               	movwf	118,b	;volatile
  1140                           
  1141                           ;dc_motor.c: 11:     RC7PPS=0x07;
  1142   0011EA  0E07               	movlw	7
  1143   0011EC  6F69               	movwf	105,b	;volatile
  1144                           
  1145                           ;dc_motor.c: 12:     RG6PPS=0x08;
  1146   0011EE  0E08               	movlw	8
  1147   0011F0  6F88               	movwf	136,b	;volatile
  1148                           
  1149                           ;dc_motor.c: 15:     T2CONbits.CKPS=0b0011;
  1150   0011F2  50BD               	movf	189,w,c	;volatile
  1151   0011F4  0B8F               	andlw	-113
  1152   0011F6  0930               	iorlw	48
  1153   0011F8  6EBD               	movwf	189,c	;volatile
  1154                           
  1155                           ;dc_motor.c: 16:     T2HLTbits.MODE=0b00000;
  1156   0011FA  0EE0               	movlw	-32
  1157   0011FC  16BE               	andwf	190,f,c	;volatile
  1158                           
  1159                           ;dc_motor.c: 17:     T2CLKCONbits.CS=0b0001;
  1160   0011FE  50BF               	movf	191,w,c	;volatile
  1161   001200  0BF0               	andlw	-16
  1162   001202  0901               	iorlw	1
  1163   001204  6EBF               	movwf	191,c	;volatile
  1164                           
  1165                           ;dc_motor.c: 21:     T2PR=200;
  1166   001206  0EC8               	movlw	200
  1167   001208  6EBC               	movwf	188,c	;volatile
  1168   00120A                     
  1169                           ; BSR set to: 14
  1170                           ;dc_motor.c: 22:     T2CONbits.ON=1;
  1171   00120A  8EBD               	bsf	189,7,c	;volatile
  1172                           
  1173                           ;dc_motor.c: 26:     CCPR1H=0;
  1174   00120C  0E00               	movlw	0
  1175   00120E  6EAA               	movwf	170,c	;volatile
  1176                           
  1177                           ;dc_motor.c: 27:     CCPR2H=0;
  1178   001210  0E00               	movlw	0
  1179   001212  6EA6               	movwf	166,c	;volatile
  1180                           
  1181                           ;dc_motor.c: 28:     CCPR3H=0;
  1182   001214  0E00               	movlw	0
  1183   001216  010F               	movlb	15	; () banked
  1184   001218  6F25               	movwf	37,b	;volatile
  1185                           
  1186                           ;dc_motor.c: 29:     CCPR4H=0;
  1187   00121A  0E00               	movlw	0
  1188   00121C  6F21               	movwf	33,b	;volatile
  1189                           
  1190                           ;dc_motor.c: 32:     CCPTMRS0bits.C1TSEL=0;
  1191   00121E  0EFC               	movlw	-4
  1192   001220  16AD               	andwf	173,f,c	;volatile
  1193                           
  1194                           ;dc_motor.c: 33:     CCPTMRS0bits.C2TSEL=0;
  1195   001222  0EF3               	movlw	-13
  1196   001224  16AD               	andwf	173,f,c	;volatile
  1197                           
  1198                           ;dc_motor.c: 34:     CCPTMRS0bits.C3TSEL=0;
  1199   001226  0ECF               	movlw	-49
  1200   001228  16AD               	andwf	173,f,c	;volatile
  1201                           
  1202                           ;dc_motor.c: 35:     CCPTMRS0bits.C4TSEL=0;
  1203   00122A  0E3F               	movlw	-193
  1204   00122C  16AD               	andwf	173,f,c	;volatile
  1205   00122E                     
  1206                           ; BSR set to: 15
  1207                           ;dc_motor.c: 38:     CCP1CONbits.FMT=1;
  1208   00122E  88AB               	bsf	171,4,c	;volatile
  1209                           
  1210                           ;dc_motor.c: 39:     CCP1CONbits.CCP1MODE=0b1100;
  1211   001230  50AB               	movf	171,w,c	;volatile
  1212   001232  0BF0               	andlw	-16
  1213   001234  090C               	iorlw	12
  1214   001236  6EAB               	movwf	171,c	;volatile
  1215   001238                     
  1216                           ; BSR set to: 15
  1217                           ;dc_motor.c: 40:     CCP1CONbits.EN=1;
  1218   001238  8EAB               	bsf	171,7,c	;volatile
  1219   00123A                     
  1220                           ; BSR set to: 15
  1221                           ;dc_motor.c: 42:     CCP2CONbits.FMT=1;
  1222   00123A  88A7               	bsf	167,4,c	;volatile
  1223                           
  1224                           ;dc_motor.c: 43:     CCP2CONbits.CCP2MODE=0b1100;
  1225   00123C  50A7               	movf	167,w,c	;volatile
  1226   00123E  0BF0               	andlw	-16
  1227   001240  090C               	iorlw	12
  1228   001242  6EA7               	movwf	167,c	;volatile
  1229   001244                     
  1230                           ; BSR set to: 15
  1231                           ;dc_motor.c: 44:     CCP2CONbits.EN=1;
  1232   001244  8EA7               	bsf	167,7,c	;volatile
  1233   001246                     
  1234                           ; BSR set to: 15
  1235                           ;dc_motor.c: 46:     CCP3CONbits.FMT=1;
  1236   001246  8926               	bsf	38,4,b	;volatile
  1237                           
  1238                           ;dc_motor.c: 47:     CCP3CONbits.CCP3MODE=0b1100;
  1239   001248  5126               	movf	38,w,b	;volatile
  1240   00124A  0BF0               	andlw	-16
  1241   00124C  090C               	iorlw	12
  1242   00124E  6F26               	movwf	38,b	;volatile
  1243   001250                     
  1244                           ; BSR set to: 15
  1245                           ;dc_motor.c: 48:     CCP3CONbits.EN=1;
  1246   001250  8F26               	bsf	38,7,b	;volatile
  1247   001252                     
  1248                           ; BSR set to: 15
  1249                           ;dc_motor.c: 50:     CCP4CONbits.FMT=1;
  1250   001252  8922               	bsf	34,4,b	;volatile
  1251                           
  1252                           ;dc_motor.c: 51:     CCP4CONbits.CCP4MODE=0b1100;
  1253   001254  5122               	movf	34,w,b	;volatile
  1254   001256  0BF0               	andlw	-16
  1255   001258  090C               	iorlw	12
  1256   00125A  6F22               	movwf	34,b	;volatile
  1257   00125C                     
  1258                           ; BSR set to: 15
  1259                           ;dc_motor.c: 52:     CCP4CONbits.EN=1;
  1260   00125C  8F22               	bsf	34,7,b	;volatile
  1261   00125E                     
  1262                           ; BSR set to: 15
  1263   00125E  0012               	return		;funcret
  1264   001260                     __end_of_initDCmotorsPWM:
  1265                           	callstack 0
  1266                           
  1267 ;; *************** function _fullSpeedAhead *****************
  1268 ;; Defined at:
  1269 ;;		line 167 in file "dc_motor.c"
  1270 ;; Parameters:    Size  Location     Type
  1271 ;;  mL              2   20[COMRAM] PTR struct DC_motor
  1272 ;;		 -> main@mL(9), 
  1273 ;;  mR              2   22[COMRAM] PTR struct DC_motor
  1274 ;;		 -> main@mR(9), 
  1275 ;; Auto vars:     Size  Location     Type
  1276 ;;		None
  1277 ;; Return value:  Size  Location     Type
  1278 ;;                  1    wreg      void 
  1279 ;; Registers used:
  1280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1281 ;; Tracked objects:
  1282 ;;		On entry : 0/0
  1283 ;;		On exit  : 0/0
  1284 ;;		Unchanged: 0/0
  1285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1286 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1288 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1289 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1290 ;;Total ram usage:        5 bytes
  1291 ;; Hardware stack levels used: 1
  1292 ;; Hardware stack levels required when called: 3
  1293 ;; This function calls:
  1294 ;;		_setMotorPWM
  1295 ;; This function is called by:
  1296 ;;		_main
  1297 ;; This function uses a non-reentrant model
  1298 ;;
  1299                           
  1300                           	psect	text7
  1301   0010E8                     __ptext7:
  1302                           	callstack 0
  1303   0010E8                     _fullSpeedAhead:
  1304                           	callstack 27
  1305   0010E8                     
  1306                           ;dc_motor.c: 167: void fullSpeedAhead(DC_motor *mL, DC_motor *mR);dc_motor.c: 168: {;dc_
      +                          motor.c: 169:     mL->power = 5;
  1307   0010E8  C015  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1308   0010EC  C016  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1309   0010F0  0E05               	movlw	5
  1310   0010F2  6EDF               	movwf	indf2,c
  1311                           
  1312                           ;dc_motor.c: 170:     mR->power = 5;
  1313   0010F4  C017  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1314   0010F8  C018  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1315   0010FC  0E05               	movlw	5
  1316   0010FE  6EDF               	movwf	indf2,c
  1317   001100                     
  1318                           ;dc_motor.c: 171:     mR->direction = 1;
  1319   001100  EE20 F001          	lfsr	2,1
  1320   001104  5017               	movf	fullSpeedAhead@mR^0,w,c
  1321   001106  26D9               	addwf	fsr2l,f,c
  1322   001108  5018               	movf	(fullSpeedAhead@mR+1)^0,w,c
  1323   00110A  22DA               	addwfc	fsr2h,f,c
  1324   00110C  0E01               	movlw	1
  1325   00110E  6EDF               	movwf	indf2,c
  1326   001110                     
  1327                           ;dc_motor.c: 172:     mL->direction = 1;
  1328   001110  EE20 F001          	lfsr	2,1
  1329   001114  5015               	movf	fullSpeedAhead@mL^0,w,c
  1330   001116  26D9               	addwf	fsr2l,f,c
  1331   001118  5016               	movf	(fullSpeedAhead@mL+1)^0,w,c
  1332   00111A  22DA               	addwfc	fsr2h,f,c
  1333   00111C  0E01               	movlw	1
  1334   00111E  6EDF               	movwf	indf2,c
  1335   001120                     
  1336                           ;dc_motor.c: 173:     mL->brakemode = 1;
  1337   001120  EE20 F002          	lfsr	2,2
  1338   001124  5015               	movf	fullSpeedAhead@mL^0,w,c
  1339   001126  26D9               	addwf	fsr2l,f,c
  1340   001128  5016               	movf	(fullSpeedAhead@mL+1)^0,w,c
  1341   00112A  22DA               	addwfc	fsr2h,f,c
  1342   00112C  0E01               	movlw	1
  1343   00112E  6EDF               	movwf	indf2,c
  1344   001130                     
  1345                           ;dc_motor.c: 174:     mR->brakemode = 1;
  1346   001130  EE20 F002          	lfsr	2,2
  1347   001134  5017               	movf	fullSpeedAhead@mR^0,w,c
  1348   001136  26D9               	addwf	fsr2l,f,c
  1349   001138  5018               	movf	(fullSpeedAhead@mR+1)^0,w,c
  1350   00113A  22DA               	addwfc	fsr2h,f,c
  1351   00113C  0E01               	movlw	1
  1352   00113E  6EDF               	movwf	indf2,c
  1353                           
  1354                           ;dc_motor.c: 175:     while (mL->power <= 100 && mR->power <=100)
  1355   001140  EFBF  F008         	goto	l430
  1356   001144                     l1704:
  1357                           
  1358                           ;dc_motor.c: 176:     {;dc_motor.c: 177:         mL->power++;
  1359   001144  C015  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1360   001148  C016  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1361   00114C  2ADF               	incf	indf2,f,c
  1362                           
  1363                           ;dc_motor.c: 178:         mR->power++;
  1364   00114E  C017  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1365   001152  C018  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1366   001156  2ADF               	incf	indf2,f,c
  1367   001158                     
  1368                           ;dc_motor.c: 179:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1369   001158  0ED0               	movlw	208
  1370   00115A  6E19               	movwf	??_fullSpeedAhead^0,c
  1371   00115C  0ECA               	movlw	202
  1372   00115E                     u547:
  1373   00115E  2EE8               	decfsz	wreg,f,c
  1374   001160  D7FE               	bra	u547
  1375   001162  2E19               	decfsz	??_fullSpeedAhead^0,f,c
  1376   001164  D7FC               	bra	u547
  1377   001166                     
  1378                           ;dc_motor.c: 180:         setMotorPWM(mL);
  1379   001166  C015  F00F         	movff	fullSpeedAhead@mL,setMotorPWM@m
  1380   00116A  C016  F010         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  1381   00116E  EC0A  F007         	call	_setMotorPWM	;wreg free
  1382   001172                     
  1383                           ;dc_motor.c: 181:         setMotorPWM(mR);
  1384   001172  C017  F00F         	movff	fullSpeedAhead@mR,setMotorPWM@m
  1385   001176  C018  F010         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  1386   00117A  EC0A  F007         	call	_setMotorPWM	;wreg free
  1387   00117E                     l430:
  1388                           
  1389                           ;dc_motor.c: 175:     while (mL->power <= 100 && mR->power <=100)
  1390   00117E  C015  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1391   001182  C016  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1392   001186  0E65               	movlw	101
  1393   001188  60DF               	cpfslt	indf2,c
  1394   00118A  EFC9  F008         	goto	u381
  1395   00118E  EFCB  F008         	goto	u380
  1396   001192                     u381:
  1397   001192  EFD7  F008         	goto	l1714
  1398   001196                     u380:
  1399   001196  C017  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1400   00119A  C018  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1401   00119E  0E64               	movlw	100
  1402   0011A0  64DF               	cpfsgt	indf2,c
  1403   0011A2  EFD5  F008         	goto	u391
  1404   0011A6  EFD7  F008         	goto	u390
  1405   0011AA                     u391:
  1406   0011AA  EFA2  F008         	goto	l1704
  1407   0011AE                     u390:
  1408   0011AE                     l1714:
  1409                           
  1410                           ;dc_motor.c: 183:     mL->power = 100;
  1411   0011AE  C015  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1412   0011B2  C016  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1413   0011B6  0E64               	movlw	100
  1414   0011B8  6EDF               	movwf	indf2,c
  1415                           
  1416                           ;dc_motor.c: 184:     mR->power = 100;
  1417   0011BA  C017  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1418   0011BE  C018  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1419   0011C2  0E64               	movlw	100
  1420   0011C4  6EDF               	movwf	indf2,c
  1421   0011C6                     
  1422                           ;dc_motor.c: 185:     setMotorPWM(mL);
  1423   0011C6  C015  F00F         	movff	fullSpeedAhead@mL,setMotorPWM@m
  1424   0011CA  C016  F010         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  1425   0011CE  EC0A  F007         	call	_setMotorPWM	;wreg free
  1426   0011D2                     
  1427                           ;dc_motor.c: 186:     setMotorPWM(mR);
  1428   0011D2  C017  F00F         	movff	fullSpeedAhead@mR,setMotorPWM@m
  1429   0011D6  C018  F010         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  1430   0011DA  EC0A  F007         	call	_setMotorPWM	;wreg free
  1431   0011DE  0012               	return		;funcret
  1432   0011E0                     __end_of_fullSpeedAhead:
  1433                           	callstack 0
  1434                           
  1435 ;; *************** function _setMotorPWM *****************
  1436 ;; Defined at:
  1437 ;;		line 56 in file "dc_motor.c"
  1438 ;; Parameters:    Size  Location     Type
  1439 ;;  m               2   14[COMRAM] PTR struct DC_motor
  1440 ;;		 -> main@mR(9), main@mL(9), 
  1441 ;; Auto vars:     Size  Location     Type
  1442 ;;  negDuty         1   19[COMRAM] unsigned char 
  1443 ;;  posDuty         1   18[COMRAM] unsigned char 
  1444 ;; Return value:  Size  Location     Type
  1445 ;;                  1    wreg      void 
  1446 ;; Registers used:
  1447 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1448 ;; Tracked objects:
  1449 ;;		On entry : 0/0
  1450 ;;		On exit  : 0/0
  1451 ;;		Unchanged: 0/0
  1452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1453 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1454 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1455 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1456 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1457 ;;Total ram usage:        6 bytes
  1458 ;; Hardware stack levels used: 1
  1459 ;; Hardware stack levels required when called: 2
  1460 ;; This function calls:
  1461 ;;		___lwdiv
  1462 ;;		___wmul
  1463 ;; This function is called by:
  1464 ;;		_norm_stop
  1465 ;;		_turnRight
  1466 ;;		_fullSpeedAhead
  1467 ;;		_stop
  1468 ;;		_turnLeft
  1469 ;;		_uturn
  1470 ;;		_reverse
  1471 ;; This function uses a non-reentrant model
  1472 ;;
  1473                           
  1474                           	psect	text8
  1475   000E14                     __ptext8:
  1476                           	callstack 0
  1477   000E14                     _setMotorPWM:
  1478                           	callstack 27
  1479   000E14                     
  1480                           ;dc_motor.c: 56: void setMotorPWM(DC_motor *m);dc_motor.c: 57: {;dc_motor.c: 58:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 60:     if(m->brakemode) {
  1481   000E14  EE20 F002          	lfsr	2,2
  1482   000E18  500F               	movf	setMotorPWM@m^0,w,c
  1483   000E1A  26D9               	addwf	fsr2l,f,c
  1484   000E1C  5010               	movf	(setMotorPWM@m+1)^0,w,c
  1485   000E1E  22DA               	addwfc	fsr2h,f,c
  1486   000E20  50DF               	movf	indf2,w,c
  1487   000E22  B4D8               	btfsc	status,2,c
  1488   000E24  EF16  F007         	goto	u361
  1489   000E28  EF18  F007         	goto	u360
  1490   000E2C                     u361:
  1491   000E2C  EF4C  F007         	goto	l1618
  1492   000E30                     u360:
  1493   000E30                     
  1494                           ;dc_motor.c: 61:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  1495   000E30  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
  1496   000E34  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1497   000E38  50DF               	movf	indf2,w,c
  1498   000E3A  6E11               	movwf	??_setMotorPWM^0,c
  1499   000E3C  5011               	movf	??_setMotorPWM^0,w,c
  1500   000E3E  6E02               	movwf	___wmul@multiplier^0,c
  1501   000E40  6A03               	clrf	(___wmul@multiplier+1)^0,c
  1502   000E42  EE20 F003          	lfsr	2,3
  1503   000E46  500F               	movf	setMotorPWM@m^0,w,c
  1504   000E48  26D9               	addwf	fsr2l,f,c
  1505   000E4A  5010               	movf	(setMotorPWM@m+1)^0,w,c
  1506   000E4C  22DA               	addwfc	fsr2h,f,c
  1507   000E4E  CFDE F004          	movff	postinc2,___wmul@multiplicand
  1508   000E52  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  1509   000E56  EC83  F00B         	call	___wmul	;wreg free
  1510   000E5A  C002  F008         	movff	?___wmul,___lwdiv@dividend
  1511   000E5E  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  1512   000E62  0E00               	movlw	0
  1513   000E64  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  1514   000E66  0E64               	movlw	100
  1515   000E68  6E0A               	movwf	___lwdiv@divisor^0,c
  1516   000E6A  EC30  F009         	call	___lwdiv	;wreg free
  1517   000E6E  EE20 F003          	lfsr	2,3
  1518   000E72  500F               	movf	setMotorPWM@m^0,w,c
  1519   000E74  26D9               	addwf	fsr2l,f,c
  1520   000E76  5010               	movf	(setMotorPWM@m+1)^0,w,c
  1521   000E78  22DA               	addwfc	fsr2h,f,c
  1522   000E7A  50DF               	movf	indf2,w,c
  1523   000E7C  6E12               	movwf	(??_setMotorPWM+1)^0,c
  1524   000E7E  5008               	movf	?___lwdiv^0,w,c
  1525   000E80  5C12               	subwf	(??_setMotorPWM+1)^0,w,c
  1526   000E82  6E13               	movwf	setMotorPWM@posDuty^0,c
  1527   000E84                     
  1528                           ;dc_motor.c: 62:         negDuty=m->PWMperiod;
  1529   000E84  EE20 F003          	lfsr	2,3
  1530   000E88  500F               	movf	setMotorPWM@m^0,w,c
  1531   000E8A  26D9               	addwf	fsr2l,f,c
  1532   000E8C  5010               	movf	(setMotorPWM@m+1)^0,w,c
  1533   000E8E  22DA               	addwfc	fsr2h,f,c
  1534   000E90  50DF               	movf	indf2,w,c
  1535   000E92  6E14               	movwf	setMotorPWM@negDuty^0,c
  1536                           
  1537                           ;dc_motor.c: 63:     }
  1538   000E94  EF6F  F007         	goto	l1622
  1539   000E98                     l1618:
  1540                           
  1541                           ;dc_motor.c: 65:         posDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  1542   000E98  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
  1543   000E9C  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1544   000EA0  50DF               	movf	indf2,w,c
  1545   000EA2  6E11               	movwf	??_setMotorPWM^0,c
  1546   000EA4  5011               	movf	??_setMotorPWM^0,w,c
  1547   000EA6  6E02               	movwf	___wmul@multiplier^0,c
  1548   000EA8  6A03               	clrf	(___wmul@multiplier+1)^0,c
  1549   000EAA  EE20 F003          	lfsr	2,3
  1550   000EAE  500F               	movf	setMotorPWM@m^0,w,c
  1551   000EB0  26D9               	addwf	fsr2l,f,c
  1552   000EB2  5010               	movf	(setMotorPWM@m+1)^0,w,c
  1553   000EB4  22DA               	addwfc	fsr2h,f,c
  1554   000EB6  CFDE F004          	movff	postinc2,___wmul@multiplicand
  1555   000EBA  CFDD F005          	movff	postdec2,___wmul@multiplicand+1
  1556   000EBE  EC83  F00B         	call	___wmul	;wreg free
  1557   000EC2  C002  F008         	movff	?___wmul,___lwdiv@dividend
  1558   000EC6  C003  F009         	movff	?___wmul+1,___lwdiv@dividend+1
  1559   000ECA  0E00               	movlw	0
  1560   000ECC  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  1561   000ECE  0E64               	movlw	100
  1562   000ED0  6E0A               	movwf	___lwdiv@divisor^0,c
  1563   000ED2  EC30  F009         	call	___lwdiv	;wreg free
  1564   000ED6  5008               	movf	?___lwdiv^0,w,c
  1565   000ED8  6E13               	movwf	setMotorPWM@posDuty^0,c
  1566   000EDA                     
  1567                           ;dc_motor.c: 66:         negDuty=0;
  1568   000EDA  0E00               	movlw	0
  1569   000EDC  6E14               	movwf	setMotorPWM@negDuty^0,c
  1570   000EDE                     l1622:
  1571                           
  1572                           ;dc_motor.c: 69:     if (m->direction) {
  1573   000EDE  EE20 F001          	lfsr	2,1
  1574   000EE2  500F               	movf	setMotorPWM@m^0,w,c
  1575   000EE4  26D9               	addwf	fsr2l,f,c
  1576   000EE6  5010               	movf	(setMotorPWM@m+1)^0,w,c
  1577   000EE8  22DA               	addwfc	fsr2h,f,c
  1578   000EEA  50DF               	movf	indf2,w,c
  1579   000EEC  B4D8               	btfsc	status,2,c
  1580   000EEE  EF7B  F007         	goto	u371
  1581   000EF2  EF7D  F007         	goto	u370
  1582   000EF6                     u371:
  1583   000EF6  EF9F  F007         	goto	l1626
  1584   000EFA                     u370:
  1585   000EFA                     
  1586                           ;dc_motor.c: 70:         *(m->posDutyHighByte)=posDuty;
  1587   000EFA  EE20 F005          	lfsr	2,5
  1588   000EFE  500F               	movf	setMotorPWM@m^0,w,c
  1589   000F00  26D9               	addwf	fsr2l,f,c
  1590   000F02  5010               	movf	(setMotorPWM@m+1)^0,w,c
  1591   000F04  22DA               	addwfc	fsr2h,f,c
  1592   000F06  CFDE F011          	movff	postinc2,??_setMotorPWM
  1593   000F0A  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  1594   000F0E  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  1595   000F12  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1596   000F16  C013  FFDF         	movff	setMotorPWM@posDuty,indf2
  1597                           
  1598                           ;dc_motor.c: 71:         *(m->negDutyHighByte)=negDuty;
  1599   000F1A  EE20 F007          	lfsr	2,7
  1600   000F1E  500F               	movf	setMotorPWM@m^0,w,c
  1601   000F20  26D9               	addwf	fsr2l,f,c
  1602   000F22  5010               	movf	(setMotorPWM@m+1)^0,w,c
  1603   000F24  22DA               	addwfc	fsr2h,f,c
  1604   000F26  CFDE F011          	movff	postinc2,??_setMotorPWM
  1605   000F2A  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  1606   000F2E  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  1607   000F32  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1608   000F36  C014  FFDF         	movff	setMotorPWM@negDuty,indf2
  1609                           
  1610                           ;dc_motor.c: 72:     } else {
  1611   000F3A  EFBF  F007         	goto	l401
  1612   000F3E                     l1626:
  1613                           
  1614                           ;dc_motor.c: 73:         *(m->posDutyHighByte)=negDuty;
  1615   000F3E  EE20 F005          	lfsr	2,5
  1616   000F42  500F               	movf	setMotorPWM@m^0,w,c
  1617   000F44  26D9               	addwf	fsr2l,f,c
  1618   000F46  5010               	movf	(setMotorPWM@m+1)^0,w,c
  1619   000F48  22DA               	addwfc	fsr2h,f,c
  1620   000F4A  CFDE F011          	movff	postinc2,??_setMotorPWM
  1621   000F4E  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  1622   000F52  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  1623   000F56  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1624   000F5A  C014  FFDF         	movff	setMotorPWM@negDuty,indf2
  1625                           
  1626                           ;dc_motor.c: 74:         *(m->negDutyHighByte)=posDuty;
  1627   000F5E  EE20 F007          	lfsr	2,7
  1628   000F62  500F               	movf	setMotorPWM@m^0,w,c
  1629   000F64  26D9               	addwf	fsr2l,f,c
  1630   000F66  5010               	movf	(setMotorPWM@m+1)^0,w,c
  1631   000F68  22DA               	addwfc	fsr2h,f,c
  1632   000F6A  CFDE F011          	movff	postinc2,??_setMotorPWM
  1633   000F6E  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  1634   000F72  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  1635   000F76  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1636   000F7A  C013  FFDF         	movff	setMotorPWM@posDuty,indf2
  1637   000F7E                     l401:
  1638   000F7E  0012               	return		;funcret
  1639   000F80                     __end_of_setMotorPWM:
  1640                           	callstack 0
  1641                           
  1642 ;; *************** function ___wmul *****************
  1643 ;; Defined at:
  1644 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  1645 ;; Parameters:    Size  Location     Type
  1646 ;;  multiplier      2    1[COMRAM] unsigned int 
  1647 ;;  multiplicand    2    3[COMRAM] unsigned int 
  1648 ;; Auto vars:     Size  Location     Type
  1649 ;;  product         2    5[COMRAM] unsigned int 
  1650 ;; Return value:  Size  Location     Type
  1651 ;;                  2    1[COMRAM] unsigned int 
  1652 ;; Registers used:
  1653 ;;		wreg, status,2, status,0, prodl, prodh
  1654 ;; Tracked objects:
  1655 ;;		On entry : 0/0
  1656 ;;		On exit  : 0/0
  1657 ;;		Unchanged: 0/0
  1658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1659 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1660 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1662 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1663 ;;Total ram usage:        6 bytes
  1664 ;; Hardware stack levels used: 1
  1665 ;; Hardware stack levels required when called: 1
  1666 ;; This function calls:
  1667 ;;		Nothing
  1668 ;; This function is called by:
  1669 ;;		_setMotorPWM
  1670 ;; This function uses a non-reentrant model
  1671 ;;
  1672                           
  1673                           	psect	text9
  1674   001706                     __ptext9:
  1675                           	callstack 0
  1676   001706                     ___wmul:
  1677                           	callstack 27
  1678   001706  5002               	movf	___wmul@multiplier^0,w,c
  1679   001708  0204               	mulwf	___wmul@multiplicand^0,c
  1680   00170A  CFF3 F006          	movff	prodl,___wmul@product
  1681   00170E  CFF4 F007          	movff	prodh,___wmul@product+1
  1682   001712  5002               	movf	___wmul@multiplier^0,w,c
  1683   001714  0205               	mulwf	(___wmul@multiplicand+1)^0,c
  1684   001716  50F3               	movf	243,w,c
  1685   001718  2607               	addwf	(___wmul@product+1)^0,f,c
  1686   00171A  5003               	movf	(___wmul@multiplier+1)^0,w,c
  1687   00171C  0204               	mulwf	___wmul@multiplicand^0,c
  1688   00171E  50F3               	movf	243,w,c
  1689   001720  2607               	addwf	(___wmul@product+1)^0,f,c
  1690   001722  C006  F002         	movff	___wmul@product,?___wmul
  1691   001726  C007  F003         	movff	___wmul@product+1,?___wmul+1
  1692   00172A  0012               	return		;funcret
  1693   00172C                     __end_of___wmul:
  1694                           	callstack 0
  1695                           
  1696 ;; *************** function ___lwdiv *****************
  1697 ;; Defined at:
  1698 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  1699 ;; Parameters:    Size  Location     Type
  1700 ;;  dividend        2    7[COMRAM] unsigned int 
  1701 ;;  divisor         2    9[COMRAM] unsigned int 
  1702 ;; Auto vars:     Size  Location     Type
  1703 ;;  quotient        2   11[COMRAM] unsigned int 
  1704 ;;  counter         1   13[COMRAM] unsigned char 
  1705 ;; Return value:  Size  Location     Type
  1706 ;;                  2    7[COMRAM] unsigned int 
  1707 ;; Registers used:
  1708 ;;		wreg, status,2, status,0
  1709 ;; Tracked objects:
  1710 ;;		On entry : 0/0
  1711 ;;		On exit  : 0/0
  1712 ;;		Unchanged: 0/0
  1713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1714 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1715 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1717 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1718 ;;Total ram usage:        7 bytes
  1719 ;; Hardware stack levels used: 1
  1720 ;; Hardware stack levels required when called: 1
  1721 ;; This function calls:
  1722 ;;		Nothing
  1723 ;; This function is called by:
  1724 ;;		_setMotorPWM
  1725 ;; This function uses a non-reentrant model
  1726 ;;
  1727                           
  1728                           	psect	text10
  1729   001260                     __ptext10:
  1730                           	callstack 0
  1731   001260                     ___lwdiv:
  1732                           	callstack 27
  1733   001260  0E00               	movlw	0
  1734   001262  6E0D               	movwf	(___lwdiv@quotient+1)^0,c
  1735   001264  0E00               	movlw	0
  1736   001266  6E0C               	movwf	___lwdiv@quotient^0,c
  1737   001268  500A               	movf	___lwdiv@divisor^0,w,c
  1738   00126A  100B               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1739   00126C  B4D8               	btfsc	status,2,c
  1740   00126E  EF3B  F009         	goto	u331
  1741   001272  EF3D  F009         	goto	u330
  1742   001276                     u331:
  1743   001276  EF65  F009         	goto	l937
  1744   00127A                     u330:
  1745   00127A  0E01               	movlw	1
  1746   00127C  6E0E               	movwf	___lwdiv@counter^0,c
  1747   00127E  EF45  F009         	goto	l1572
  1748   001282                     l1570:
  1749   001282  90D8               	bcf	status,0,c
  1750   001284  360A               	rlcf	___lwdiv@divisor^0,f,c
  1751   001286  360B               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1752   001288  2A0E               	incf	___lwdiv@counter^0,f,c
  1753   00128A                     l1572:
  1754   00128A  AE0B               	btfss	(___lwdiv@divisor+1)^0,7,c
  1755   00128C  EF4A  F009         	goto	u341
  1756   001290  EF4C  F009         	goto	u340
  1757   001294                     u341:
  1758   001294  EF41  F009         	goto	l1570
  1759   001298                     u340:
  1760   001298                     l1574:
  1761   001298  90D8               	bcf	status,0,c
  1762   00129A  360C               	rlcf	___lwdiv@quotient^0,f,c
  1763   00129C  360D               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1764   00129E  500A               	movf	___lwdiv@divisor^0,w,c
  1765   0012A0  5C08               	subwf	___lwdiv@dividend^0,w,c
  1766   0012A2  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  1767   0012A4  5809               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1768   0012A6  A0D8               	btfss	status,0,c
  1769   0012A8  EF58  F009         	goto	u351
  1770   0012AC  EF5A  F009         	goto	u350
  1771   0012B0                     u351:
  1772   0012B0  EF5F  F009         	goto	l1582
  1773   0012B4                     u350:
  1774   0012B4  500A               	movf	___lwdiv@divisor^0,w,c
  1775   0012B6  5E08               	subwf	___lwdiv@dividend^0,f,c
  1776   0012B8  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  1777   0012BA  5A09               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1778   0012BC  800C               	bsf	___lwdiv@quotient^0,0,c
  1779   0012BE                     l1582:
  1780   0012BE  90D8               	bcf	status,0,c
  1781   0012C0  320B               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1782   0012C2  320A               	rrcf	___lwdiv@divisor^0,f,c
  1783   0012C4  2E0E               	decfsz	___lwdiv@counter^0,f,c
  1784   0012C6  EF4C  F009         	goto	l1574
  1785   0012CA                     l937:
  1786   0012CA  C00C  F008         	movff	___lwdiv@quotient,?___lwdiv
  1787   0012CE  C00D  F009         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1788   0012D2  0012               	return		;funcret
  1789   0012D4                     __end_of___lwdiv:
  1790                           	callstack 0
  1791                           
  1792 ;; *************** function _color_read_RGBC *****************
  1793 ;; Defined at:
  1794 ;;		line 92 in file "color.c"
  1795 ;; Parameters:    Size  Location     Type
  1796 ;;  temp            2   12[COMRAM] PTR struct RGBC_val
  1797 ;;		 -> main@RGBC(8), 
  1798 ;; Auto vars:     Size  Location     Type
  1799 ;;		None
  1800 ;; Return value:  Size  Location     Type
  1801 ;;                  1    wreg      void 
  1802 ;; Registers used:
  1803 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1804 ;; Tracked objects:
  1805 ;;		On entry : 0/0
  1806 ;;		On exit  : 0/0
  1807 ;;		Unchanged: 0/0
  1808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1809 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1812 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1813 ;;Total ram usage:        2 bytes
  1814 ;; Hardware stack levels used: 1
  1815 ;; Hardware stack levels required when called: 4
  1816 ;; This function calls:
  1817 ;;		_color_read_Blue
  1818 ;;		_color_read_Clear
  1819 ;;		_color_read_Green
  1820 ;;		_color_read_Red
  1821 ;; This function is called by:
  1822 ;;		_main
  1823 ;; This function uses a non-reentrant model
  1824 ;;
  1825                           
  1826                           	psect	text11
  1827   00141A                     __ptext11:
  1828                           	callstack 0
  1829   00141A                     _color_read_RGBC:
  1830                           	callstack 26
  1831   00141A                     
  1832                           ;color.c: 93:     temp->R = color_read_Red();
  1833   00141A  EC3C  F00A         	call	_color_read_Red	;wreg free
  1834   00141E  C00D  FFD9         	movff	color_read_RGBC@temp,fsr2l
  1835   001422  C00E  FFDA         	movff	color_read_RGBC@temp+1,fsr2h
  1836   001426  C006  FFDE         	movff	?_color_read_Red,postinc2
  1837   00142A  C007  FFDD         	movff	?_color_read_Red+1,postdec2
  1838                           
  1839                           ;color.c: 94:     temp->B = color_read_Blue();
  1840   00142E  ECB4  F00A         	call	_color_read_Blue	;wreg free
  1841   001432  EE20 F004          	lfsr	2,4
  1842   001436  500D               	movf	color_read_RGBC@temp^0,w,c
  1843   001438  26D9               	addwf	fsr2l,f,c
  1844   00143A  500E               	movf	(color_read_RGBC@temp+1)^0,w,c
  1845   00143C  22DA               	addwfc	fsr2h,f,c
  1846   00143E  C006  FFDE         	movff	?_color_read_Blue,postinc2
  1847   001442  C007  FFDD         	movff	?_color_read_Blue+1,postdec2
  1848                           
  1849                           ;color.c: 95:     temp->G = color_read_Green();
  1850   001446  EC64  F00A         	call	_color_read_Green	;wreg free
  1851   00144A  EE20 F002          	lfsr	2,2
  1852   00144E  500D               	movf	color_read_RGBC@temp^0,w,c
  1853   001450  26D9               	addwf	fsr2l,f,c
  1854   001452  500E               	movf	(color_read_RGBC@temp+1)^0,w,c
  1855   001454  22DA               	addwfc	fsr2h,f,c
  1856   001456  C006  FFDE         	movff	?_color_read_Green,postinc2
  1857   00145A  C007  FFDD         	movff	?_color_read_Green+1,postdec2
  1858                           
  1859                           ;color.c: 96:     temp->C = color_read_Clear();
  1860   00145E  EC8C  F00A         	call	_color_read_Clear	;wreg free
  1861   001462  EE20 F006          	lfsr	2,6
  1862   001466  500D               	movf	color_read_RGBC@temp^0,w,c
  1863   001468  26D9               	addwf	fsr2l,f,c
  1864   00146A  500E               	movf	(color_read_RGBC@temp+1)^0,w,c
  1865   00146C  22DA               	addwfc	fsr2h,f,c
  1866   00146E  C006  FFDE         	movff	?_color_read_Clear,postinc2
  1867   001472  C007  FFDD         	movff	?_color_read_Clear+1,postdec2
  1868   001476  0012               	return		;funcret
  1869   001478                     __end_of_color_read_RGBC:
  1870                           	callstack 0
  1871                           
  1872 ;; *************** function _color_read_Red *****************
  1873 ;; Defined at:
  1874 ;;		line 33 in file "color.c"
  1875 ;; Parameters:    Size  Location     Type
  1876 ;;		None
  1877 ;; Auto vars:     Size  Location     Type
  1878 ;;  tmp             2   10[COMRAM] unsigned int 
  1879 ;; Return value:  Size  Location     Type
  1880 ;;                  2    5[COMRAM] unsigned int 
  1881 ;; Registers used:
  1882 ;;		wreg, status,2, status,0, cstack
  1883 ;; Tracked objects:
  1884 ;;		On entry : 0/0
  1885 ;;		On exit  : 0/0
  1886 ;;		Unchanged: 0/0
  1887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1888 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1889 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1890 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1891 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1892 ;;Total ram usage:        7 bytes
  1893 ;; Hardware stack levels used: 1
  1894 ;; Hardware stack levels required when called: 3
  1895 ;; This function calls:
  1896 ;;		_I2C_2_Master_Read
  1897 ;;		_I2C_2_Master_RepStart
  1898 ;;		_I2C_2_Master_Start
  1899 ;;		_I2C_2_Master_Stop
  1900 ;;		_I2C_2_Master_Write
  1901 ;; This function is called by:
  1902 ;;		_color_read_RGBC
  1903 ;; This function uses a non-reentrant model
  1904 ;;
  1905                           
  1906                           	psect	text12
  1907   001478                     __ptext12:
  1908                           	callstack 0
  1909   001478                     _color_read_Red:
  1910                           	callstack 26
  1911   001478                     
  1912                           ;color.c: 35:  unsigned int tmp;;color.c: 36:  I2C_2_Master_Start();
  1913   001478  ECE0  F00B         	call	_I2C_2_Master_Start	;wreg free
  1914                           
  1915                           ;color.c: 37:  I2C_2_Master_Write(0x52 | 0x00);
  1916   00147C  0E52               	movlw	82
  1917   00147E  ECD0  F00B         	call	_I2C_2_Master_Write
  1918                           
  1919                           ;color.c: 38:  I2C_2_Master_Write(0xA0 | 0x16);
  1920   001482  0EB6               	movlw	182
  1921   001484  ECD0  F00B         	call	_I2C_2_Master_Write
  1922                           
  1923                           ;color.c: 39:  I2C_2_Master_RepStart();
  1924   001488  ECD6  F00B         	call	_I2C_2_Master_RepStart	;wreg free
  1925                           
  1926                           ;color.c: 40:  I2C_2_Master_Write(0x52 | 0x01);
  1927   00148C  0E53               	movlw	83
  1928   00148E  ECD0  F00B         	call	_I2C_2_Master_Write
  1929                           
  1930                           ;color.c: 41:  tmp=I2C_2_Master_Read(1);
  1931   001492  0E01               	movlw	1
  1932   001494  ECDC  F00A         	call	_I2C_2_Master_Read
  1933   001498  6E08               	movwf	??_color_read_Red^0,c
  1934   00149A  5008               	movf	??_color_read_Red^0,w,c
  1935   00149C  6E0B               	movwf	color_read_Red@tmp^0,c
  1936   00149E  6A0C               	clrf	(color_read_Red@tmp+1)^0,c
  1937                           
  1938                           ;color.c: 42:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  1939   0014A0  0E00               	movlw	0
  1940   0014A2  ECDC  F00A         	call	_I2C_2_Master_Read
  1941   0014A6  6E08               	movwf	??_color_read_Red^0,c
  1942   0014A8  5008               	movf	??_color_read_Red^0,w,c
  1943   0014AA  6E0A               	movwf	(??_color_read_Red+2)^0,c
  1944   0014AC  6A09               	clrf	(??_color_read_Red+1)^0,c
  1945   0014AE  500B               	movf	color_read_Red@tmp^0,w,c
  1946   0014B0  1009               	iorwf	(??_color_read_Red+1)^0,w,c
  1947   0014B2  6E0B               	movwf	color_read_Red@tmp^0,c
  1948   0014B4  500C               	movf	(color_read_Red@tmp+1)^0,w,c
  1949   0014B6  100A               	iorwf	(??_color_read_Red+2)^0,w,c
  1950   0014B8  6E0C               	movwf	(color_read_Red@tmp+1)^0,c
  1951                           
  1952                           ;color.c: 43:  I2C_2_Master_Stop();
  1953   0014BA  ECDB  F00B         	call	_I2C_2_Master_Stop	;wreg free
  1954   0014BE                     
  1955                           ;color.c: 44:  return tmp;
  1956   0014BE  C00B  F006         	movff	color_read_Red@tmp,?_color_read_Red
  1957   0014C2  C00C  F007         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  1958   0014C6  0012               	return		;funcret
  1959   0014C8                     __end_of_color_read_Red:
  1960                           	callstack 0
  1961                           
  1962 ;; *************** function _color_read_Green *****************
  1963 ;; Defined at:
  1964 ;;		line 47 in file "color.c"
  1965 ;; Parameters:    Size  Location     Type
  1966 ;;		None
  1967 ;; Auto vars:     Size  Location     Type
  1968 ;;  tmp             2   10[COMRAM] unsigned int 
  1969 ;; Return value:  Size  Location     Type
  1970 ;;                  2    5[COMRAM] unsigned int 
  1971 ;; Registers used:
  1972 ;;		wreg, status,2, status,0, cstack
  1973 ;; Tracked objects:
  1974 ;;		On entry : 0/0
  1975 ;;		On exit  : 0/0
  1976 ;;		Unchanged: 0/0
  1977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1978 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1979 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1980 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1981 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1982 ;;Total ram usage:        7 bytes
  1983 ;; Hardware stack levels used: 1
  1984 ;; Hardware stack levels required when called: 3
  1985 ;; This function calls:
  1986 ;;		_I2C_2_Master_Read
  1987 ;;		_I2C_2_Master_RepStart
  1988 ;;		_I2C_2_Master_Start
  1989 ;;		_I2C_2_Master_Stop
  1990 ;;		_I2C_2_Master_Write
  1991 ;; This function is called by:
  1992 ;;		_color_read_RGBC
  1993 ;; This function uses a non-reentrant model
  1994 ;;
  1995                           
  1996                           	psect	text13
  1997   0014C8                     __ptext13:
  1998                           	callstack 0
  1999   0014C8                     _color_read_Green:
  2000                           	callstack 26
  2001   0014C8                     
  2002                           ;color.c: 49:  unsigned int tmp;;color.c: 50:  I2C_2_Master_Start();
  2003   0014C8  ECE0  F00B         	call	_I2C_2_Master_Start	;wreg free
  2004                           
  2005                           ;color.c: 51:  I2C_2_Master_Write(0x52 | 0x00);
  2006   0014CC  0E52               	movlw	82
  2007   0014CE  ECD0  F00B         	call	_I2C_2_Master_Write
  2008                           
  2009                           ;color.c: 52:  I2C_2_Master_Write(0xA0 | 0x18);
  2010   0014D2  0EB8               	movlw	184
  2011   0014D4  ECD0  F00B         	call	_I2C_2_Master_Write
  2012                           
  2013                           ;color.c: 53:  I2C_2_Master_RepStart();
  2014   0014D8  ECD6  F00B         	call	_I2C_2_Master_RepStart	;wreg free
  2015                           
  2016                           ;color.c: 54:  I2C_2_Master_Write(0x52 | 0x01);
  2017   0014DC  0E53               	movlw	83
  2018   0014DE  ECD0  F00B         	call	_I2C_2_Master_Write
  2019                           
  2020                           ;color.c: 55:  tmp=I2C_2_Master_Read(1);
  2021   0014E2  0E01               	movlw	1
  2022   0014E4  ECDC  F00A         	call	_I2C_2_Master_Read
  2023   0014E8  6E08               	movwf	??_color_read_Green^0,c
  2024   0014EA  5008               	movf	??_color_read_Green^0,w,c
  2025   0014EC  6E0B               	movwf	color_read_Green@tmp^0,c
  2026   0014EE  6A0C               	clrf	(color_read_Green@tmp+1)^0,c
  2027                           
  2028                           ;color.c: 56:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  2029   0014F0  0E00               	movlw	0
  2030   0014F2  ECDC  F00A         	call	_I2C_2_Master_Read
  2031   0014F6  6E08               	movwf	??_color_read_Green^0,c
  2032   0014F8  5008               	movf	??_color_read_Green^0,w,c
  2033   0014FA  6E0A               	movwf	(??_color_read_Green+2)^0,c
  2034   0014FC  6A09               	clrf	(??_color_read_Green+1)^0,c
  2035   0014FE  500B               	movf	color_read_Green@tmp^0,w,c
  2036   001500  1009               	iorwf	(??_color_read_Green+1)^0,w,c
  2037   001502  6E0B               	movwf	color_read_Green@tmp^0,c
  2038   001504  500C               	movf	(color_read_Green@tmp+1)^0,w,c
  2039   001506  100A               	iorwf	(??_color_read_Green+2)^0,w,c
  2040   001508  6E0C               	movwf	(color_read_Green@tmp+1)^0,c
  2041                           
  2042                           ;color.c: 57:  I2C_2_Master_Stop();
  2043   00150A  ECDB  F00B         	call	_I2C_2_Master_Stop	;wreg free
  2044   00150E                     
  2045                           ;color.c: 58:  return tmp;
  2046   00150E  C00B  F006         	movff	color_read_Green@tmp,?_color_read_Green
  2047   001512  C00C  F007         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  2048   001516  0012               	return		;funcret
  2049   001518                     __end_of_color_read_Green:
  2050                           	callstack 0
  2051                           
  2052 ;; *************** function _color_read_Clear *****************
  2053 ;; Defined at:
  2054 ;;		line 75 in file "color.c"
  2055 ;; Parameters:    Size  Location     Type
  2056 ;;		None
  2057 ;; Auto vars:     Size  Location     Type
  2058 ;;  tmp             2   10[COMRAM] unsigned int 
  2059 ;; Return value:  Size  Location     Type
  2060 ;;                  2    5[COMRAM] unsigned int 
  2061 ;; Registers used:
  2062 ;;		wreg, status,2, status,0, cstack
  2063 ;; Tracked objects:
  2064 ;;		On entry : 0/0
  2065 ;;		On exit  : 0/0
  2066 ;;		Unchanged: 0/0
  2067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2068 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2069 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2070 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2071 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2072 ;;Total ram usage:        7 bytes
  2073 ;; Hardware stack levels used: 1
  2074 ;; Hardware stack levels required when called: 3
  2075 ;; This function calls:
  2076 ;;		_I2C_2_Master_Read
  2077 ;;		_I2C_2_Master_RepStart
  2078 ;;		_I2C_2_Master_Start
  2079 ;;		_I2C_2_Master_Stop
  2080 ;;		_I2C_2_Master_Write
  2081 ;; This function is called by:
  2082 ;;		_color_read_RGBC
  2083 ;; This function uses a non-reentrant model
  2084 ;;
  2085                           
  2086                           	psect	text14
  2087   001518                     __ptext14:
  2088                           	callstack 0
  2089   001518                     _color_read_Clear:
  2090                           	callstack 26
  2091   001518                     
  2092                           ;color.c: 77:  unsigned int tmp;;color.c: 78:  I2C_2_Master_Start();
  2093   001518  ECE0  F00B         	call	_I2C_2_Master_Start	;wreg free
  2094                           
  2095                           ;color.c: 79:  I2C_2_Master_Write(0x52 | 0x00);
  2096   00151C  0E52               	movlw	82
  2097   00151E  ECD0  F00B         	call	_I2C_2_Master_Write
  2098                           
  2099                           ;color.c: 80:  I2C_2_Master_Write(0xA0 | 0x14);
  2100   001522  0EB4               	movlw	180
  2101   001524  ECD0  F00B         	call	_I2C_2_Master_Write
  2102                           
  2103                           ;color.c: 81:  I2C_2_Master_RepStart();
  2104   001528  ECD6  F00B         	call	_I2C_2_Master_RepStart	;wreg free
  2105                           
  2106                           ;color.c: 82:  I2C_2_Master_Write(0x52 | 0x01);
  2107   00152C  0E53               	movlw	83
  2108   00152E  ECD0  F00B         	call	_I2C_2_Master_Write
  2109                           
  2110                           ;color.c: 83:  tmp=I2C_2_Master_Read(1);
  2111   001532  0E01               	movlw	1
  2112   001534  ECDC  F00A         	call	_I2C_2_Master_Read
  2113   001538  6E08               	movwf	??_color_read_Clear^0,c
  2114   00153A  5008               	movf	??_color_read_Clear^0,w,c
  2115   00153C  6E0B               	movwf	color_read_Clear@tmp^0,c
  2116   00153E  6A0C               	clrf	(color_read_Clear@tmp+1)^0,c
  2117                           
  2118                           ;color.c: 84:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  2119   001540  0E00               	movlw	0
  2120   001542  ECDC  F00A         	call	_I2C_2_Master_Read
  2121   001546  6E08               	movwf	??_color_read_Clear^0,c
  2122   001548  5008               	movf	??_color_read_Clear^0,w,c
  2123   00154A  6E0A               	movwf	(??_color_read_Clear+2)^0,c
  2124   00154C  6A09               	clrf	(??_color_read_Clear+1)^0,c
  2125   00154E  500B               	movf	color_read_Clear@tmp^0,w,c
  2126   001550  1009               	iorwf	(??_color_read_Clear+1)^0,w,c
  2127   001552  6E0B               	movwf	color_read_Clear@tmp^0,c
  2128   001554  500C               	movf	(color_read_Clear@tmp+1)^0,w,c
  2129   001556  100A               	iorwf	(??_color_read_Clear+2)^0,w,c
  2130   001558  6E0C               	movwf	(color_read_Clear@tmp+1)^0,c
  2131                           
  2132                           ;color.c: 85:  I2C_2_Master_Stop();
  2133   00155A  ECDB  F00B         	call	_I2C_2_Master_Stop	;wreg free
  2134   00155E                     
  2135                           ;color.c: 86:  return tmp;
  2136   00155E  C00B  F006         	movff	color_read_Clear@tmp,?_color_read_Clear
  2137   001562  C00C  F007         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  2138   001566  0012               	return		;funcret
  2139   001568                     __end_of_color_read_Clear:
  2140                           	callstack 0
  2141                           
  2142 ;; *************** function _color_read_Blue *****************
  2143 ;; Defined at:
  2144 ;;		line 61 in file "color.c"
  2145 ;; Parameters:    Size  Location     Type
  2146 ;;		None
  2147 ;; Auto vars:     Size  Location     Type
  2148 ;;  tmp             2   10[COMRAM] unsigned int 
  2149 ;; Return value:  Size  Location     Type
  2150 ;;                  2    5[COMRAM] unsigned int 
  2151 ;; Registers used:
  2152 ;;		wreg, status,2, status,0, cstack
  2153 ;; Tracked objects:
  2154 ;;		On entry : 0/0
  2155 ;;		On exit  : 0/0
  2156 ;;		Unchanged: 0/0
  2157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2158 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2159 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2160 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2161 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2162 ;;Total ram usage:        7 bytes
  2163 ;; Hardware stack levels used: 1
  2164 ;; Hardware stack levels required when called: 3
  2165 ;; This function calls:
  2166 ;;		_I2C_2_Master_Read
  2167 ;;		_I2C_2_Master_RepStart
  2168 ;;		_I2C_2_Master_Start
  2169 ;;		_I2C_2_Master_Stop
  2170 ;;		_I2C_2_Master_Write
  2171 ;; This function is called by:
  2172 ;;		_color_read_RGBC
  2173 ;; This function uses a non-reentrant model
  2174 ;;
  2175                           
  2176                           	psect	text15
  2177   001568                     __ptext15:
  2178                           	callstack 0
  2179   001568                     _color_read_Blue:
  2180                           	callstack 26
  2181   001568                     
  2182                           ;color.c: 63:  unsigned int tmp;;color.c: 64:  I2C_2_Master_Start();
  2183   001568  ECE0  F00B         	call	_I2C_2_Master_Start	;wreg free
  2184                           
  2185                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x00);
  2186   00156C  0E52               	movlw	82
  2187   00156E  ECD0  F00B         	call	_I2C_2_Master_Write
  2188                           
  2189                           ;color.c: 66:  I2C_2_Master_Write(0xA0 | 0x1A);
  2190   001572  0EBA               	movlw	186
  2191   001574  ECD0  F00B         	call	_I2C_2_Master_Write
  2192                           
  2193                           ;color.c: 67:  I2C_2_Master_RepStart();
  2194   001578  ECD6  F00B         	call	_I2C_2_Master_RepStart	;wreg free
  2195                           
  2196                           ;color.c: 68:  I2C_2_Master_Write(0x52 | 0x01);
  2197   00157C  0E53               	movlw	83
  2198   00157E  ECD0  F00B         	call	_I2C_2_Master_Write
  2199                           
  2200                           ;color.c: 69:  tmp=I2C_2_Master_Read(1);
  2201   001582  0E01               	movlw	1
  2202   001584  ECDC  F00A         	call	_I2C_2_Master_Read
  2203   001588  6E08               	movwf	??_color_read_Blue^0,c
  2204   00158A  5008               	movf	??_color_read_Blue^0,w,c
  2205   00158C  6E0B               	movwf	color_read_Blue@tmp^0,c
  2206   00158E  6A0C               	clrf	(color_read_Blue@tmp+1)^0,c
  2207                           
  2208                           ;color.c: 70:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  2209   001590  0E00               	movlw	0
  2210   001592  ECDC  F00A         	call	_I2C_2_Master_Read
  2211   001596  6E08               	movwf	??_color_read_Blue^0,c
  2212   001598  5008               	movf	??_color_read_Blue^0,w,c
  2213   00159A  6E0A               	movwf	(??_color_read_Blue+2)^0,c
  2214   00159C  6A09               	clrf	(??_color_read_Blue+1)^0,c
  2215   00159E  500B               	movf	color_read_Blue@tmp^0,w,c
  2216   0015A0  1009               	iorwf	(??_color_read_Blue+1)^0,w,c
  2217   0015A2  6E0B               	movwf	color_read_Blue@tmp^0,c
  2218   0015A4  500C               	movf	(color_read_Blue@tmp+1)^0,w,c
  2219   0015A6  100A               	iorwf	(??_color_read_Blue+2)^0,w,c
  2220   0015A8  6E0C               	movwf	(color_read_Blue@tmp+1)^0,c
  2221                           
  2222                           ;color.c: 71:  I2C_2_Master_Stop();
  2223   0015AA  ECDB  F00B         	call	_I2C_2_Master_Stop	;wreg free
  2224   0015AE                     
  2225                           ;color.c: 72:  return tmp;
  2226   0015AE  C00B  F006         	movff	color_read_Blue@tmp,?_color_read_Blue
  2227   0015B2  C00C  F007         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  2228   0015B6  0012               	return		;funcret
  2229   0015B8                     __end_of_color_read_Blue:
  2230                           	callstack 0
  2231                           
  2232 ;; *************** function _I2C_2_Master_RepStart *****************
  2233 ;; Defined at:
  2234 ;;		line 33 in file "i2c.c"
  2235 ;; Parameters:    Size  Location     Type
  2236 ;;		None
  2237 ;; Auto vars:     Size  Location     Type
  2238 ;;		None
  2239 ;; Return value:  Size  Location     Type
  2240 ;;                  1    wreg      void 
  2241 ;; Registers used:
  2242 ;;		wreg, status,2, status,0, cstack
  2243 ;; Tracked objects:
  2244 ;;		On entry : 0/0
  2245 ;;		On exit  : 0/0
  2246 ;;		Unchanged: 0/0
  2247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2251 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2252 ;;Total ram usage:        0 bytes
  2253 ;; Hardware stack levels used: 1
  2254 ;; Hardware stack levels required when called: 2
  2255 ;; This function calls:
  2256 ;;		_I2C_2_Master_Idle
  2257 ;; This function is called by:
  2258 ;;		_color_read_Red
  2259 ;;		_color_read_Green
  2260 ;;		_color_read_Blue
  2261 ;;		_color_read_Clear
  2262 ;; This function uses a non-reentrant model
  2263 ;;
  2264                           
  2265                           	psect	text16
  2266   0017AC                     __ptext16:
  2267                           	callstack 0
  2268   0017AC                     _I2C_2_Master_RepStart:
  2269                           	callstack 26
  2270   0017AC                     
  2271                           ;i2c.c: 35:   I2C_2_Master_Idle();
  2272   0017AC  EC6F  F00B         	call	_I2C_2_Master_Idle	;wreg free
  2273   0017B0                     
  2274                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  2275   0017B0  010E               	movlb	14	; () banked
  2276   0017B2  83DA               	bsf	218,1,b	;volatile
  2277   0017B4                     
  2278                           ; BSR set to: 14
  2279   0017B4  0012               	return		;funcret
  2280   0017B6                     __end_of_I2C_2_Master_RepStart:
  2281                           	callstack 0
  2282                           
  2283 ;; *************** function _I2C_2_Master_Read *****************
  2284 ;; Defined at:
  2285 ;;		line 51 in file "i2c.c"
  2286 ;; Parameters:    Size  Location     Type
  2287 ;;  ack             1    wreg     unsigned char 
  2288 ;; Auto vars:     Size  Location     Type
  2289 ;;  ack             1    3[COMRAM] unsigned char 
  2290 ;;  tmp             1    4[COMRAM] unsigned char 
  2291 ;; Return value:  Size  Location     Type
  2292 ;;                  1    wreg      unsigned char 
  2293 ;; Registers used:
  2294 ;;		wreg, status,2, status,0, cstack
  2295 ;; Tracked objects:
  2296 ;;		On entry : 0/0
  2297 ;;		On exit  : 0/0
  2298 ;;		Unchanged: 0/0
  2299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2301 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2302 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2303 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2304 ;;Total ram usage:        3 bytes
  2305 ;; Hardware stack levels used: 1
  2306 ;; Hardware stack levels required when called: 2
  2307 ;; This function calls:
  2308 ;;		_I2C_2_Master_Idle
  2309 ;; This function is called by:
  2310 ;;		_color_read_Red
  2311 ;;		_color_read_Green
  2312 ;;		_color_read_Blue
  2313 ;;		_color_read_Clear
  2314 ;; This function uses a non-reentrant model
  2315 ;;
  2316                           
  2317                           	psect	text17
  2318   0015B8                     __ptext17:
  2319                           	callstack 0
  2320   0015B8                     _I2C_2_Master_Read:
  2321                           	callstack 26
  2322                           
  2323                           ; BSR set to: 14
  2324                           ;incstack = 0
  2325                           ;I2C_2_Master_Read@ack stored from wreg
  2326   0015B8  6E04               	movwf	I2C_2_Master_Read@ack^0,c
  2327   0015BA                     
  2328                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  2329   0015BA  EC6F  F00B         	call	_I2C_2_Master_Idle	;wreg free
  2330   0015BE                     
  2331                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  2332   0015BE  010E               	movlb	14	; () banked
  2333   0015C0  87DA               	bsf	218,3,b	;volatile
  2334                           
  2335                           ;i2c.c: 56:   I2C_2_Master_Idle();
  2336   0015C2  EC6F  F00B         	call	_I2C_2_Master_Idle	;wreg free
  2337   0015C6                     
  2338                           ;i2c.c: 57:   tmp = SSP2BUF;
  2339   0015C6  CED5 F005          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  2340                           
  2341                           ;i2c.c: 58:   I2C_2_Master_Idle();
  2342   0015CA  EC6F  F00B         	call	_I2C_2_Master_Idle	;wreg free
  2343   0015CE                     
  2344                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  2345   0015CE  5004               	movf	I2C_2_Master_Read@ack^0,w,c
  2346   0015D0  B4D8               	btfsc	status,2,c
  2347   0015D2  EFED  F00A         	goto	u31
  2348   0015D6  EFF1  F00A         	goto	u30
  2349   0015DA                     u31:
  2350   0015DA  6A03               	clrf	??_I2C_2_Master_Read^0,c
  2351   0015DC  2A03               	incf	??_I2C_2_Master_Read^0,f,c
  2352   0015DE  EFF2  F00A         	goto	u48
  2353   0015E2                     u30:
  2354   0015E2  6A03               	clrf	??_I2C_2_Master_Read^0,c
  2355   0015E4                     u48:
  2356   0015E4  3A03               	swapf	??_I2C_2_Master_Read^0,f,c
  2357   0015E6  4603               	rlncf	??_I2C_2_Master_Read^0,f,c
  2358   0015E8  010E               	movlb	14	; () banked
  2359   0015EA  51DA               	movf	218,w,b	;volatile
  2360   0015EC  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
  2361   0015EE  0BDF               	andlw	-33
  2362   0015F0  1803               	xorwf	??_I2C_2_Master_Read^0,w,c
  2363   0015F2  6FDA               	movwf	218,b	;volatile
  2364   0015F4                     
  2365                           ; BSR set to: 14
  2366                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  2367   0015F4  89DA               	bsf	218,4,b	;volatile
  2368   0015F6                     
  2369                           ; BSR set to: 14
  2370                           ;i2c.c: 61:   return tmp;
  2371   0015F6  5005               	movf	I2C_2_Master_Read@tmp^0,w,c
  2372   0015F8                     
  2373                           ; BSR set to: 14
  2374   0015F8  0012               	return		;funcret
  2375   0015FA                     __end_of_I2C_2_Master_Read:
  2376                           	callstack 0
  2377                           
  2378 ;; *************** function _color_click_init *****************
  2379 ;; Defined at:
  2380 ;;		line 9 in file "color.c"
  2381 ;; Parameters:    Size  Location     Type
  2382 ;;		None
  2383 ;; Auto vars:     Size  Location     Type
  2384 ;;		None
  2385 ;; Return value:  Size  Location     Type
  2386 ;;                  1    wreg      void 
  2387 ;; Registers used:
  2388 ;;		wreg, status,2, status,0, cstack
  2389 ;; Tracked objects:
  2390 ;;		On entry : 0/0
  2391 ;;		On exit  : 0/0
  2392 ;;		Unchanged: 0/0
  2393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2396 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2397 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2398 ;;Total ram usage:        1 bytes
  2399 ;; Hardware stack levels used: 1
  2400 ;; Hardware stack levels required when called: 4
  2401 ;; This function calls:
  2402 ;;		_I2C_2_Master_Init
  2403 ;;		_color_writetoaddr
  2404 ;; This function is called by:
  2405 ;;		_main
  2406 ;; This function uses a non-reentrant model
  2407 ;;
  2408                           
  2409                           	psect	text18
  2410   0015FA                     __ptext18:
  2411                           	callstack 0
  2412   0015FA                     _color_click_init:
  2413                           	callstack 26
  2414   0015FA                     
  2415                           ;color.c: 12:     I2C_2_Master_Init();
  2416   0015FA  EC45  F00B         	call	_I2C_2_Master_Init	;wreg free
  2417   0015FE                     
  2418                           ;color.c: 15:   color_writetoaddr(0x00, 0x01);
  2419   0015FE  0E01               	movlw	1
  2420   001600  6E04               	movwf	color_writetoaddr@value^0,c
  2421   001602  0E00               	movlw	0
  2422   001604  EC96  F00B         	call	_color_writetoaddr
  2423   001608                     
  2424                           ;color.c: 16:     _delay((unsigned long)((3)*(64000000/4000.0)));
  2425   001608  0E3F               	movlw	63
  2426   00160A  6E06               	movwf	??_color_click_init^0,c
  2427   00160C  0E55               	movlw	85
  2428   00160E                     u557:
  2429   00160E  2EE8               	decfsz	wreg,f,c
  2430   001610  D7FE               	bra	u557
  2431   001612  2E06               	decfsz	??_color_click_init^0,f,c
  2432   001614  D7FC               	bra	u557
  2433   001616  F000               	nop	
  2434   001618                     
  2435                           ;color.c: 19:  color_writetoaddr(0x00, 0x03);
  2436   001618  0E03               	movlw	3
  2437   00161A  6E04               	movwf	color_writetoaddr@value^0,c
  2438   00161C  0E00               	movlw	0
  2439   00161E  EC96  F00B         	call	_color_writetoaddr
  2440   001622                     
  2441                           ;color.c: 22:  color_writetoaddr(0x01, 0xD5);
  2442   001622  0ED5               	movlw	213
  2443   001624  6E04               	movwf	color_writetoaddr@value^0,c
  2444   001626  0E01               	movlw	1
  2445   001628  EC96  F00B         	call	_color_writetoaddr
  2446   00162C  0012               	return		;funcret
  2447   00162E                     __end_of_color_click_init:
  2448                           	callstack 0
  2449                           
  2450 ;; *************** function _I2C_2_Master_Init *****************
  2451 ;; Defined at:
  2452 ;;		line 4 in file "i2c.c"
  2453 ;; Parameters:    Size  Location     Type
  2454 ;;		None
  2455 ;; Auto vars:     Size  Location     Type
  2456 ;;		None
  2457 ;; Return value:  Size  Location     Type
  2458 ;;                  1    wreg      void 
  2459 ;; Registers used:
  2460 ;;		wreg, status,2
  2461 ;; Tracked objects:
  2462 ;;		On entry : 0/0
  2463 ;;		On exit  : 0/0
  2464 ;;		Unchanged: 0/0
  2465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2469 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2470 ;;Total ram usage:        0 bytes
  2471 ;; Hardware stack levels used: 1
  2472 ;; Hardware stack levels required when called: 1
  2473 ;; This function calls:
  2474 ;;		Nothing
  2475 ;; This function is called by:
  2476 ;;		_color_click_init
  2477 ;; This function uses a non-reentrant model
  2478 ;;
  2479                           
  2480                           	psect	text19
  2481   00168A                     __ptext19:
  2482                           	callstack 0
  2483   00168A                     _I2C_2_Master_Init:
  2484                           	callstack 28
  2485   00168A                     
  2486                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  2487   00168A  010E               	movlb	14	; () banked
  2488   00168C  51D9               	movf	217,w,b	;volatile
  2489   00168E  0BF0               	andlw	-16
  2490   001690  0908               	iorlw	8
  2491   001692  6FD9               	movwf	217,b	;volatile
  2492   001694                     
  2493                           ; BSR set to: 14
  2494                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  2495   001694  8BD9               	bsf	217,5,b	;volatile
  2496                           
  2497                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  2498   001696  0E9F               	movlw	159
  2499   001698  6FD6               	movwf	214,b	;volatile
  2500   00169A                     
  2501                           ; BSR set to: 14
  2502                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  2503   00169A  8A84               	bsf	132,5,c	;volatile
  2504   00169C                     
  2505                           ; BSR set to: 14
  2506                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  2507   00169C  8C84               	bsf	132,6,c	;volatile
  2508   00169E                     
  2509                           ; BSR set to: 14
  2510                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  2511   00169E  9BA7               	bcf	167,5,b	;volatile
  2512   0016A0                     
  2513                           ; BSR set to: 14
  2514                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  2515   0016A0  9DA7               	bcf	167,6,b	;volatile
  2516                           
  2517                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  2518   0016A2  0E1D               	movlw	29
  2519   0016A4  6F1D               	movwf	29,b	;volatile
  2520                           
  2521                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  2522   0016A6  0E1E               	movlw	30
  2523   0016A8  6F1C               	movwf	28,b	;volatile
  2524                           
  2525                           ;i2c.c: 18:   RD5PPS=0x1C;
  2526   0016AA  0E1C               	movlw	28
  2527   0016AC  6F6F               	movwf	111,b	;volatile
  2528                           
  2529                           ;i2c.c: 19:   RD6PPS=0x1B;
  2530   0016AE  0E1B               	movlw	27
  2531   0016B0  6F70               	movwf	112,b	;volatile
  2532   0016B2                     
  2533                           ; BSR set to: 14
  2534   0016B2  0012               	return		;funcret
  2535   0016B4                     __end_of_I2C_2_Master_Init:
  2536                           	callstack 0
  2537                           
  2538 ;; *************** function _Interrupts_init *****************
  2539 ;; Defined at:
  2540 ;;		line 10 in file "interrupts.c"
  2541 ;; Parameters:    Size  Location     Type
  2542 ;;		None
  2543 ;; Auto vars:     Size  Location     Type
  2544 ;;		None
  2545 ;; Return value:  Size  Location     Type
  2546 ;;                  1    wreg      void 
  2547 ;; Registers used:
  2548 ;;		None
  2549 ;; Tracked objects:
  2550 ;;		On entry : 0/0
  2551 ;;		On exit  : 0/0
  2552 ;;		Unchanged: 0/0
  2553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2557 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2558 ;;Total ram usage:        0 bytes
  2559 ;; Hardware stack levels used: 1
  2560 ;; Hardware stack levels required when called: 1
  2561 ;; This function calls:
  2562 ;;		Nothing
  2563 ;; This function is called by:
  2564 ;;		_main
  2565 ;; This function uses a non-reentrant model
  2566 ;;
  2567                           
  2568                           	psect	text20
  2569   001780                     __ptext20:
  2570                           	callstack 0
  2571   001780                     _Interrupts_init:
  2572                           	callstack 29
  2573   001780                     
  2574                           ;interrupts.c: 15:     TRISBbits.TRISB0=1;
  2575   001780  8082               	bsf	130,0,c	;volatile
  2576                           
  2577                           ;interrupts.c: 17:     ANSELBbits.ANSELB0=0;
  2578   001782  010E               	movlb	14	; () banked
  2579   001784  919A               	bcf	154,0,b	;volatile
  2580                           
  2581                           ;interrupts.c: 18:     PIE0bits.INT0IE = 1;
  2582   001786  8129               	bsf	41,0,b	;volatile
  2583                           
  2584                           ;interrupts.c: 19:     IPR0bits.INT0IP = 1;
  2585   001788  811F               	bsf	31,0,b	;volatile
  2586                           
  2587                           ;interrupts.c: 20:     INTCONbits.INT0EDG=0;
  2588   00178A  90F2               	bcf	242,0,c	;volatile
  2589                           
  2590                           ;interrupts.c: 21:     INTCONbits.IPEN=1;
  2591   00178C  8AF2               	bsf	242,5,c	;volatile
  2592                           
  2593                           ;interrupts.c: 22:     INTCONbits.PEIE=1;
  2594   00178E  8CF2               	bsf	242,6,c	;volatile
  2595                           
  2596                           ;interrupts.c: 23:     INTCONbits.GIE=1;
  2597   001790  8EF2               	bsf	242,7,c	;volatile
  2598   001792                     
  2599                           ; BSR set to: 14
  2600   001792  0012               	return		;funcret
  2601   001794                     __end_of_Interrupts_init:
  2602                           	callstack 0
  2603                           
  2604 ;; *************** function _Color_Interrupts_threshold *****************
  2605 ;; Defined at:
  2606 ;;		line 36 in file "interrupts.c"
  2607 ;; Parameters:    Size  Location     Type
  2608 ;;  upperThresho    2    5[COMRAM] unsigned int 
  2609 ;;  lowerThresho    2    7[COMRAM] unsigned int 
  2610 ;; Auto vars:     Size  Location     Type
  2611 ;;		None
  2612 ;; Return value:  Size  Location     Type
  2613 ;;                  1    wreg      void 
  2614 ;; Registers used:
  2615 ;;		wreg, status,2, status,0, cstack
  2616 ;; Tracked objects:
  2617 ;;		On entry : 0/0
  2618 ;;		On exit  : 0/0
  2619 ;;		Unchanged: 0/0
  2620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2621 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2624 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2625 ;;Total ram usage:        4 bytes
  2626 ;; Hardware stack levels used: 1
  2627 ;; Hardware stack levels required when called: 4
  2628 ;; This function calls:
  2629 ;;		_color_writetoaddr
  2630 ;; This function is called by:
  2631 ;;		_main
  2632 ;; This function uses a non-reentrant model
  2633 ;;
  2634                           
  2635                           	psect	text21
  2636   0016B4                     __ptext21:
  2637                           	callstack 0
  2638   0016B4                     _Color_Interrupts_threshold:
  2639                           	callstack 26
  2640   0016B4                     
  2641                           ;interrupts.c: 36: void Color_Interrupts_threshold(unsigned int upperThreshold, unsigned
      +                           int lowerThreshold);interrupts.c: 37: {;interrupts.c: 38:  color_writetoaddr(0x04, lowe
      +                          rThreshold);
  2642   0016B4  C008  F004         	movff	Color_Interrupts_threshold@lowerThreshold,color_writetoaddr@value
  2643   0016B8  0E04               	movlw	4
  2644   0016BA  EC96  F00B         	call	_color_writetoaddr
  2645                           
  2646                           ;interrupts.c: 39:     color_writetoaddr(0x05, lowerThreshold>>8);
  2647   0016BE  5009               	movf	(Color_Interrupts_threshold@lowerThreshold+1)^0,w,c
  2648   0016C0  6E04               	movwf	color_writetoaddr@value^0,c
  2649   0016C2  0E05               	movlw	5
  2650   0016C4  EC96  F00B         	call	_color_writetoaddr
  2651                           
  2652                           ;interrupts.c: 40:     color_writetoaddr(0x06, upperThreshold);
  2653   0016C8  C006  F004         	movff	Color_Interrupts_threshold@upperThreshold,color_writetoaddr@value
  2654   0016CC  0E06               	movlw	6
  2655   0016CE  EC96  F00B         	call	_color_writetoaddr
  2656                           
  2657                           ;interrupts.c: 41:     color_writetoaddr(0x07, upperThreshold>>8);
  2658   0016D2  5007               	movf	(Color_Interrupts_threshold@upperThreshold+1)^0,w,c
  2659   0016D4  6E04               	movwf	color_writetoaddr@value^0,c
  2660   0016D6  0E07               	movlw	7
  2661   0016D8  EC96  F00B         	call	_color_writetoaddr
  2662   0016DC  0012               	return		;funcret
  2663   0016DE                     __end_of_Color_Interrupts_threshold:
  2664                           	callstack 0
  2665                           
  2666 ;; *************** function _Color_Interrupts_init *****************
  2667 ;; Defined at:
  2668 ;;		line 27 in file "interrupts.c"
  2669 ;; Parameters:    Size  Location     Type
  2670 ;;		None
  2671 ;; Auto vars:     Size  Location     Type
  2672 ;;		None
  2673 ;; Return value:  Size  Location     Type
  2674 ;;                  1    wreg      void 
  2675 ;; Registers used:
  2676 ;;		wreg, status,2, status,0, cstack
  2677 ;; Tracked objects:
  2678 ;;		On entry : 0/0
  2679 ;;		On exit  : 0/0
  2680 ;;		Unchanged: 0/0
  2681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2684 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2685 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2686 ;;Total ram usage:        1 bytes
  2687 ;; Hardware stack levels used: 1
  2688 ;; Hardware stack levels required when called: 4
  2689 ;; This function calls:
  2690 ;;		_Color_Interrupts_clear
  2691 ;;		_color_writetoaddr
  2692 ;; This function is called by:
  2693 ;;		_main
  2694 ;; This function uses a non-reentrant model
  2695 ;;
  2696                           
  2697                           	psect	text22
  2698   00174C                     __ptext22:
  2699                           	callstack 0
  2700   00174C                     _Color_Interrupts_init:
  2701                           	callstack 26
  2702   00174C                     
  2703                           ;interrupts.c: 31:    color_writetoaddr(0x00, 0b00010011);
  2704   00174C  0E13               	movlw	19
  2705   00174E  6E04               	movwf	color_writetoaddr@value^0,c
  2706   001750  0E00               	movlw	0
  2707   001752  EC96  F00B         	call	_color_writetoaddr
  2708   001756                     
  2709                           ;interrupts.c: 32:    _delay((unsigned long)((10)*(64000000/4000.0))) ;
  2710   001756  0ED0               	movlw	208
  2711   001758  6E06               	movwf	??_Color_Interrupts_init^0,c
  2712   00175A  0ECA               	movlw	202
  2713   00175C                     u567:
  2714   00175C  2EE8               	decfsz	wreg,f,c
  2715   00175E  D7FE               	bra	u567
  2716   001760  2E06               	decfsz	??_Color_Interrupts_init^0,f,c
  2717   001762  D7FC               	bra	u567
  2718   001764                     
  2719                           ;interrupts.c: 33:    Color_Interrupts_clear();
  2720   001764  ECB5  F00B         	call	_Color_Interrupts_clear	;wreg free
  2721   001768  0012               	return		;funcret
  2722   00176A                     __end_of_Color_Interrupts_init:
  2723                           	callstack 0
  2724                           
  2725 ;; *************** function _color_writetoaddr *****************
  2726 ;; Defined at:
  2727 ;;		line 25 in file "color.c"
  2728 ;; Parameters:    Size  Location     Type
  2729 ;;  address         1    wreg     unsigned char 
  2730 ;;  value           1    3[COMRAM] unsigned char 
  2731 ;; Auto vars:     Size  Location     Type
  2732 ;;  address         1    4[COMRAM] unsigned char 
  2733 ;; Return value:  Size  Location     Type
  2734 ;;                  1    wreg      void 
  2735 ;; Registers used:
  2736 ;;		wreg, status,2, status,0, cstack
  2737 ;; Tracked objects:
  2738 ;;		On entry : 0/0
  2739 ;;		On exit  : 0/0
  2740 ;;		Unchanged: 0/0
  2741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2742 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2743 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2745 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2746 ;;Total ram usage:        2 bytes
  2747 ;; Hardware stack levels used: 1
  2748 ;; Hardware stack levels required when called: 3
  2749 ;; This function calls:
  2750 ;;		_I2C_2_Master_Start
  2751 ;;		_I2C_2_Master_Stop
  2752 ;;		_I2C_2_Master_Write
  2753 ;; This function is called by:
  2754 ;;		_color_click_init
  2755 ;;		_Color_Interrupts_init
  2756 ;;		_Color_Interrupts_threshold
  2757 ;;		_persistence_register
  2758 ;; This function uses a non-reentrant model
  2759 ;;
  2760                           
  2761                           	psect	text23
  2762   00172C                     __ptext23:
  2763                           	callstack 0
  2764   00172C                     _color_writetoaddr:
  2765                           	callstack 26
  2766                           
  2767                           ;incstack = 0
  2768                           ;color_writetoaddr@address stored from wreg
  2769   00172C  6E05               	movwf	color_writetoaddr@address^0,c
  2770   00172E                     
  2771                           ;color.c: 26:     I2C_2_Master_Start();
  2772   00172E  ECE0  F00B         	call	_I2C_2_Master_Start	;wreg free
  2773                           
  2774                           ;color.c: 27:     I2C_2_Master_Write(0x52 | 0x00);
  2775   001732  0E52               	movlw	82
  2776   001734  ECD0  F00B         	call	_I2C_2_Master_Write
  2777                           
  2778                           ;color.c: 28:     I2C_2_Master_Write(0x80 | address);
  2779   001738  5005               	movf	color_writetoaddr@address^0,w,c
  2780   00173A  0980               	iorlw	128
  2781   00173C  ECD0  F00B         	call	_I2C_2_Master_Write
  2782                           
  2783                           ;color.c: 29:     I2C_2_Master_Write(value);
  2784   001740  5004               	movf	color_writetoaddr@value^0,w,c
  2785   001742  ECD0  F00B         	call	_I2C_2_Master_Write
  2786                           
  2787                           ;color.c: 30:     I2C_2_Master_Stop();
  2788   001746  ECDB  F00B         	call	_I2C_2_Master_Stop	;wreg free
  2789   00174A  0012               	return		;funcret
  2790   00174C                     __end_of_color_writetoaddr:
  2791                           	callstack 0
  2792                           
  2793 ;; *************** function _Color_Interrupts_clear *****************
  2794 ;; Defined at:
  2795 ;;		line 49 in file "interrupts.c"
  2796 ;; Parameters:    Size  Location     Type
  2797 ;;		None
  2798 ;; Auto vars:     Size  Location     Type
  2799 ;;		None
  2800 ;; Return value:  Size  Location     Type
  2801 ;;                  1    wreg      void 
  2802 ;; Registers used:
  2803 ;;		wreg, status,2, status,0, cstack
  2804 ;; Tracked objects:
  2805 ;;		On entry : 0/0
  2806 ;;		On exit  : 0/0
  2807 ;;		Unchanged: 0/0
  2808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2813 ;;Total ram usage:        0 bytes
  2814 ;; Hardware stack levels used: 1
  2815 ;; Hardware stack levels required when called: 3
  2816 ;; This function calls:
  2817 ;;		_I2C_2_Master_Start
  2818 ;;		_I2C_2_Master_Stop
  2819 ;;		_I2C_2_Master_Write
  2820 ;; This function is called by:
  2821 ;;		_main
  2822 ;;		_Color_Interrupts_init
  2823 ;; This function uses a non-reentrant model
  2824 ;;
  2825                           
  2826                           	psect	text24
  2827   00176A                     __ptext24:
  2828                           	callstack 0
  2829   00176A                     _Color_Interrupts_clear:
  2830                           	callstack 26
  2831   00176A                     
  2832                           ;interrupts.c: 53:     I2C_2_Master_Start();
  2833   00176A  ECE0  F00B         	call	_I2C_2_Master_Start	;wreg free
  2834                           
  2835                           ;interrupts.c: 54:     I2C_2_Master_Write(0x52 | 0x00);
  2836   00176E  0E52               	movlw	82
  2837   001770  ECD0  F00B         	call	_I2C_2_Master_Write
  2838                           
  2839                           ;interrupts.c: 55:     I2C_2_Master_Write(0b11100110);
  2840   001774  0EE6               	movlw	230
  2841   001776  ECD0  F00B         	call	_I2C_2_Master_Write
  2842                           
  2843                           ;interrupts.c: 56:     I2C_2_Master_Stop();
  2844   00177A  ECDB  F00B         	call	_I2C_2_Master_Stop	;wreg free
  2845   00177E  0012               	return		;funcret
  2846   001780                     __end_of_Color_Interrupts_clear:
  2847                           	callstack 0
  2848                           
  2849 ;; *************** function _I2C_2_Master_Write *****************
  2850 ;; Defined at:
  2851 ;;		line 45 in file "i2c.c"
  2852 ;; Parameters:    Size  Location     Type
  2853 ;;  data_byte       1    wreg     unsigned char 
  2854 ;; Auto vars:     Size  Location     Type
  2855 ;;  data_byte       1    2[COMRAM] unsigned char 
  2856 ;; Return value:  Size  Location     Type
  2857 ;;                  1    wreg      void 
  2858 ;; Registers used:
  2859 ;;		wreg, status,2, status,0, cstack
  2860 ;; Tracked objects:
  2861 ;;		On entry : 0/0
  2862 ;;		On exit  : 0/0
  2863 ;;		Unchanged: 0/0
  2864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2866 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2868 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2869 ;;Total ram usage:        1 bytes
  2870 ;; Hardware stack levels used: 1
  2871 ;; Hardware stack levels required when called: 2
  2872 ;; This function calls:
  2873 ;;		_I2C_2_Master_Idle
  2874 ;; This function is called by:
  2875 ;;		_color_writetoaddr
  2876 ;;		_color_read_Red
  2877 ;;		_color_read_Green
  2878 ;;		_color_read_Blue
  2879 ;;		_color_read_Clear
  2880 ;;		_Color_Interrupts_clear
  2881 ;; This function uses a non-reentrant model
  2882 ;;
  2883                           
  2884                           	psect	text25
  2885   0017A0                     __ptext25:
  2886                           	callstack 0
  2887   0017A0                     _I2C_2_Master_Write:
  2888                           	callstack 26
  2889                           
  2890                           ;incstack = 0
  2891                           ;I2C_2_Master_Write@data_byte stored from wreg
  2892   0017A0  6E03               	movwf	I2C_2_Master_Write@data_byte^0,c
  2893   0017A2                     
  2894                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  2895   0017A2  EC6F  F00B         	call	_I2C_2_Master_Idle	;wreg free
  2896   0017A6                     
  2897                           ;i2c.c: 48:   SSP2BUF = data_byte;
  2898   0017A6  C003  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  2899   0017AA  0012               	return		;funcret
  2900   0017AC                     __end_of_I2C_2_Master_Write:
  2901                           	callstack 0
  2902                           
  2903 ;; *************** function _I2C_2_Master_Stop *****************
  2904 ;; Defined at:
  2905 ;;		line 39 in file "i2c.c"
  2906 ;; Parameters:    Size  Location     Type
  2907 ;;		None
  2908 ;; Auto vars:     Size  Location     Type
  2909 ;;		None
  2910 ;; Return value:  Size  Location     Type
  2911 ;;                  1    wreg      void 
  2912 ;; Registers used:
  2913 ;;		wreg, status,2, status,0, cstack
  2914 ;; Tracked objects:
  2915 ;;		On entry : 0/0
  2916 ;;		On exit  : 0/0
  2917 ;;		Unchanged: 0/0
  2918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2922 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2923 ;;Total ram usage:        0 bytes
  2924 ;; Hardware stack levels used: 1
  2925 ;; Hardware stack levels required when called: 2
  2926 ;; This function calls:
  2927 ;;		_I2C_2_Master_Idle
  2928 ;; This function is called by:
  2929 ;;		_color_writetoaddr
  2930 ;;		_color_read_Red
  2931 ;;		_color_read_Green
  2932 ;;		_color_read_Blue
  2933 ;;		_color_read_Clear
  2934 ;;		_Color_Interrupts_clear
  2935 ;; This function uses a non-reentrant model
  2936 ;;
  2937                           
  2938                           	psect	text26
  2939   0017B6                     __ptext26:
  2940                           	callstack 0
  2941   0017B6                     _I2C_2_Master_Stop:
  2942                           	callstack 26
  2943   0017B6                     
  2944                           ;i2c.c: 41:   I2C_2_Master_Idle();
  2945   0017B6  EC6F  F00B         	call	_I2C_2_Master_Idle	;wreg free
  2946   0017BA                     
  2947                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  2948   0017BA  010E               	movlb	14	; () banked
  2949   0017BC  85DA               	bsf	218,2,b	;volatile
  2950   0017BE                     
  2951                           ; BSR set to: 14
  2952   0017BE  0012               	return		;funcret
  2953   0017C0                     __end_of_I2C_2_Master_Stop:
  2954                           	callstack 0
  2955                           
  2956 ;; *************** function _I2C_2_Master_Start *****************
  2957 ;; Defined at:
  2958 ;;		line 27 in file "i2c.c"
  2959 ;; Parameters:    Size  Location     Type
  2960 ;;		None
  2961 ;; Auto vars:     Size  Location     Type
  2962 ;;		None
  2963 ;; Return value:  Size  Location     Type
  2964 ;;                  1    wreg      void 
  2965 ;; Registers used:
  2966 ;;		wreg, status,2, status,0, cstack
  2967 ;; Tracked objects:
  2968 ;;		On entry : 0/0
  2969 ;;		On exit  : 0/0
  2970 ;;		Unchanged: 0/0
  2971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2975 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2976 ;;Total ram usage:        0 bytes
  2977 ;; Hardware stack levels used: 1
  2978 ;; Hardware stack levels required when called: 2
  2979 ;; This function calls:
  2980 ;;		_I2C_2_Master_Idle
  2981 ;; This function is called by:
  2982 ;;		_color_writetoaddr
  2983 ;;		_color_read_Red
  2984 ;;		_color_read_Green
  2985 ;;		_color_read_Blue
  2986 ;;		_color_read_Clear
  2987 ;;		_Color_Interrupts_clear
  2988 ;; This function uses a non-reentrant model
  2989 ;;
  2990                           
  2991                           	psect	text27
  2992   0017C0                     __ptext27:
  2993                           	callstack 0
  2994   0017C0                     _I2C_2_Master_Start:
  2995                           	callstack 26
  2996   0017C0                     
  2997                           ;i2c.c: 29:   I2C_2_Master_Idle();
  2998   0017C0  EC6F  F00B         	call	_I2C_2_Master_Idle	;wreg free
  2999   0017C4                     
  3000                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  3001   0017C4  010E               	movlb	14	; () banked
  3002   0017C6  81DA               	bsf	218,0,b	;volatile
  3003   0017C8                     
  3004                           ; BSR set to: 14
  3005   0017C8  0012               	return		;funcret
  3006   0017CA                     __end_of_I2C_2_Master_Start:
  3007                           	callstack 0
  3008                           
  3009 ;; *************** function _I2C_2_Master_Idle *****************
  3010 ;; Defined at:
  3011 ;;		line 22 in file "i2c.c"
  3012 ;; Parameters:    Size  Location     Type
  3013 ;;		None
  3014 ;; Auto vars:     Size  Location     Type
  3015 ;;		None
  3016 ;; Return value:  Size  Location     Type
  3017 ;;                  1    wreg      void 
  3018 ;; Registers used:
  3019 ;;		wreg, status,2, status,0
  3020 ;; Tracked objects:
  3021 ;;		On entry : 0/0
  3022 ;;		On exit  : 0/0
  3023 ;;		Unchanged: 0/0
  3024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3027 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3028 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3029 ;;Total ram usage:        1 bytes
  3030 ;; Hardware stack levels used: 1
  3031 ;; Hardware stack levels required when called: 1
  3032 ;; This function calls:
  3033 ;;		Nothing
  3034 ;; This function is called by:
  3035 ;;		_I2C_2_Master_Start
  3036 ;;		_I2C_2_Master_RepStart
  3037 ;;		_I2C_2_Master_Stop
  3038 ;;		_I2C_2_Master_Write
  3039 ;;		_I2C_2_Master_Read
  3040 ;; This function uses a non-reentrant model
  3041 ;;
  3042                           
  3043                           	psect	text28
  3044   0016DE                     __ptext28:
  3045                           	callstack 0
  3046   0016DE                     _I2C_2_Master_Idle:
  3047                           	callstack 26
  3048   0016DE                     l110:
  3049   0016DE  010E               	movlb	14	; () banked
  3050   0016E0  B5D8               	btfsc	216,2,b	;volatile
  3051   0016E2  EF75  F00B         	goto	u11
  3052   0016E6  EF77  F00B         	goto	u10
  3053   0016EA                     u11:
  3054   0016EA  EF6F  F00B         	goto	l110
  3055   0016EE                     u10:
  3056   0016EE                     
  3057                           ; BSR set to: 14
  3058   0016EE  CEDA F002          	movff	3802,??_I2C_2_Master_Idle	;volatile
  3059   0016F2  0E1F               	movlw	31
  3060   0016F4  1602               	andwf	??_I2C_2_Master_Idle^0,f,c
  3061   0016F6  A4D8               	btfss	status,2,c
  3062   0016F8  EF80  F00B         	goto	u21
  3063   0016FC  EF82  F00B         	goto	u20
  3064   001700                     u21:
  3065   001700  EF6F  F00B         	goto	l110
  3066   001704                     u20:
  3067   001704                     
  3068                           ; BSR set to: 14
  3069   001704  0012               	return		;funcret
  3070   001706                     __end_of_I2C_2_Master_Idle:
  3071                           	callstack 0
  3072                           
  3073 ;; *************** function _HighISR *****************
  3074 ;; Defined at:
  3075 ;;		line 64 in file "interrupts.c"
  3076 ;; Parameters:    Size  Location     Type
  3077 ;;		None
  3078 ;; Auto vars:     Size  Location     Type
  3079 ;;		None
  3080 ;; Return value:  Size  Location     Type
  3081 ;;                  1    wreg      void 
  3082 ;; Registers used:
  3083 ;;		wreg, status,2, status,0
  3084 ;; Tracked objects:
  3085 ;;		On entry : 0/0
  3086 ;;		On exit  : 0/0
  3087 ;;		Unchanged: 0/0
  3088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3091 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3092 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3093 ;;Total ram usage:        1 bytes
  3094 ;; Hardware stack levels used: 1
  3095 ;; This function calls:
  3096 ;;		Nothing
  3097 ;; This function is called by:
  3098 ;;		Interrupt level 2
  3099 ;; This function uses a non-reentrant model
  3100 ;;
  3101                           
  3102                           	psect	intcode
  3103   000008                     __pintcode:
  3104                           	callstack 0
  3105   000008                     _HighISR:
  3106                           	callstack 26
  3107                           
  3108                           ; BSR set to: 14
  3109                           ;incstack = 0
  3110   000008  8252               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3111   00000A                     
  3112                           ;interrupts.c: 67:     if(PIR0bits.INT0IF){
  3113   00000A  010E               	movlb	14	; () banked
  3114   00000C  A133               	btfss	51,0,b	;volatile
  3115   00000E  EF0B  F000         	goto	i2u26_41
  3116   000012  EF0D  F000         	goto	i2u26_40
  3117   000016                     i2u26_41:
  3118   000016  EF24  F000         	goto	i2l341
  3119   00001A                     i2u26_40:
  3120   00001A                     
  3121                           ; BSR set to: 14
  3122                           ;interrupts.c: 69:     LATDbits.LATD7=!LATDbits.LATD7;
  3123   00001A  AE7C               	btfss	124,7,c	;volatile
  3124   00001C  EF12  F000         	goto	i2u27_41
  3125   000020  EF16  F000         	goto	i2u27_40
  3126   000024                     i2u27_41:
  3127   000024  6A01               	clrf	??_HighISR^0,c
  3128   000026  2A01               	incf	??_HighISR^0,f,c
  3129   000028  EF17  F000         	goto	i2u28_48
  3130   00002C                     i2u27_40:
  3131   00002C  6A01               	clrf	??_HighISR^0,c
  3132   00002E                     i2u28_48:
  3133   00002E  3201               	rrcf	??_HighISR^0,f,c
  3134   000030  3201               	rrcf	??_HighISR^0,f,c
  3135   000032  507C               	movf	124,w,c	;volatile
  3136   000034  1801               	xorwf	??_HighISR^0,w,c
  3137   000036  0B7F               	andlw	-129
  3138   000038  1801               	xorwf	??_HighISR^0,w,c
  3139   00003A  6E7C               	movwf	124,c	;volatile
  3140   00003C                     
  3141                           ;interrupts.c: 70:         interrupt_flag = 1;
  3142   00003C  0E00               	movlw	0
  3143   00003E  6E4D               	movwf	(_interrupt_flag+1)^0,c
  3144   000040  0E01               	movlw	1
  3145   000042  6E4C               	movwf	_interrupt_flag^0,c
  3146   000044                     
  3147                           ;interrupts.c: 73:         PIR0bits.INT0IF = 0;
  3148   000044  010E               	movlb	14	; () banked
  3149   000046  9133               	bcf	51,0,b	;volatile
  3150   000048                     i2l341:
  3151                           
  3152                           ; BSR set to: 14
  3153   000048  9252               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3154   00004A  0011               	retfie		f
  3155   00004C                     __end_of_HighISR:
  3156                           	callstack 0
  3157                           
  3158                           	psect	rparam
  3159   000000                     
  3160                           	psect	temp
  3161   000052                     btemp:
  3162                           	callstack 0
  3163   000052                     	ds	1
  3164   000000                     int$flags	set	btemp
  3165   000000                     wtemp8	set	btemp+1
  3166   000000                     ttemp5	set	btemp+1
  3167   000000                     ttemp6	set	btemp+4
  3168   000000                     ttemp7	set	btemp+8
  3169                           
  3170                           	psect	idloc
  3171                           
  3172                           ;Config register IDLOC0 @ 0x200000
  3173                           ;	unspecified, using default values
  3174   200000                     	org	2097152
  3175   200000  0FFF               	dw	4095
  3176                           
  3177                           ;Config register IDLOC1 @ 0x200002
  3178                           ;	unspecified, using default values
  3179   200002                     	org	2097154
  3180   200002  0FFF               	dw	4095
  3181                           
  3182                           ;Config register IDLOC2 @ 0x200004
  3183                           ;	unspecified, using default values
  3184   200004                     	org	2097156
  3185   200004  0FFF               	dw	4095
  3186                           
  3187                           ;Config register IDLOC3 @ 0x200006
  3188                           ;	unspecified, using default values
  3189   200006                     	org	2097158
  3190   200006  0FFF               	dw	4095
  3191                           
  3192                           ;Config register IDLOC4 @ 0x200008
  3193                           ;	unspecified, using default values
  3194   200008                     	org	2097160
  3195   200008  0FFF               	dw	4095
  3196                           
  3197                           ;Config register IDLOC5 @ 0x20000A
  3198                           ;	unspecified, using default values
  3199   20000A                     	org	2097162
  3200   20000A  0FFF               	dw	4095
  3201                           
  3202                           ;Config register IDLOC6 @ 0x20000C
  3203                           ;	unspecified, using default values
  3204   20000C                     	org	2097164
  3205   20000C  0FFF               	dw	4095
  3206                           
  3207                           ;Config register IDLOC7 @ 0x20000E
  3208                           ;	unspecified, using default values
  3209   20000E                     	org	2097166
  3210   20000E  0FFF               	dw	4095
  3211                           
  3212                           	psect	config
  3213                           
  3214                           ;Config register CONFIG1L @ 0x300000
  3215                           ;	External Oscillator mode Selection bits
  3216                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  3217                           ;	Power-up default value for COSC bits
  3218                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  3219   300000                     	org	3145728
  3220   300000  AA                 	db	170
  3221                           
  3222                           ;Config register CONFIG1H @ 0x300001
  3223                           ;	unspecified, using default values
  3224                           ;	Clock Out Enable bit
  3225                           ;	CLKOUTEN = 0x1, unprogrammed default
  3226                           ;	Clock Switch Enable bit
  3227                           ;	CSWEN = 0x1, unprogrammed default
  3228                           ;	Fail-Safe Clock Monitor Enable bit
  3229                           ;	FCMEN = 0x1, unprogrammed default
  3230   300001                     	org	3145729
  3231   300001  FF                 	db	255
  3232                           
  3233                           ;Config register CONFIG2L @ 0x300002
  3234                           ;	unspecified, using default values
  3235                           ;	Master Clear Enable bit
  3236                           ;	MCLRE = 0x1, unprogrammed default
  3237                           ;	Power-up Timer Enable bit
  3238                           ;	PWRTE = 0x1, unprogrammed default
  3239                           ;	Low-power BOR enable bit
  3240                           ;	LPBOREN = 0x1, unprogrammed default
  3241                           ;	Brown-out Reset Enable bits
  3242                           ;	BOREN = 0x3, unprogrammed default
  3243   300002                     	org	3145730
  3244   300002  FF                 	db	255
  3245                           
  3246                           ;Config register CONFIG2H @ 0x300003
  3247                           ;	unspecified, using default values
  3248                           ;	Brown Out Reset Voltage selection bits
  3249                           ;	BORV = 0x3, unprogrammed default
  3250                           ;	ZCD Disable bit
  3251                           ;	ZCD = 0x1, unprogrammed default
  3252                           ;	PPSLOCK bit One-Way Set Enable bit
  3253                           ;	PPS1WAY = 0x1, unprogrammed default
  3254                           ;	Stack Full/Underflow Reset Enable bit
  3255                           ;	STVREN = 0x1, unprogrammed default
  3256                           ;	Debugger Enable bit
  3257                           ;	DEBUG = 0x1, unprogrammed default
  3258                           ;	Extended Instruction Set Enable bit
  3259                           ;	XINST = 0x1, unprogrammed default
  3260   300003                     	org	3145731
  3261   300003  FF                 	db	255
  3262                           
  3263                           ;Config register CONFIG3L @ 0x300004
  3264                           ;	WDT Period Select bits
  3265                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  3266                           ;	WDT operating mode
  3267                           ;	WDTE = OFF, WDT Disabled
  3268   300004                     	org	3145732
  3269   300004  9F                 	db	159
  3270                           
  3271                           ;Config register CONFIG3H @ 0x300005
  3272                           ;	unspecified, using default values
  3273                           ;	WDT Window Select bits
  3274                           ;	WDTCWS = 0x7, unprogrammed default
  3275                           ;	WDT input clock selector
  3276                           ;	WDTCCS = 0x7, unprogrammed default
  3277   300005                     	org	3145733
  3278   300005  FF                 	db	255
  3279                           
  3280                           ;Config register CONFIG4L @ 0x300006
  3281                           ;	unspecified, using default values
  3282                           ;	Write Protection Block 0
  3283                           ;	WRT0 = 0x1, unprogrammed default
  3284                           ;	Write Protection Block 1
  3285                           ;	WRT1 = 0x1, unprogrammed default
  3286                           ;	Write Protection Block 2
  3287                           ;	WRT2 = 0x1, unprogrammed default
  3288                           ;	Write Protection Block 3
  3289                           ;	WRT3 = 0x1, unprogrammed default
  3290                           ;	Write Protection Block 3
  3291                           ;	WRT4 = 0x1, unprogrammed default
  3292                           ;	Write Protection Block 3
  3293                           ;	WRT5 = 0x1, unprogrammed default
  3294                           ;	Write Protection Block 3
  3295                           ;	WRT6 = 0x1, unprogrammed default
  3296                           ;	Write Protection Block 3
  3297                           ;	WRT7 = 0x1, unprogrammed default
  3298   300006                     	org	3145734
  3299   300006  FF                 	db	255
  3300                           
  3301                           ;Config register CONFIG4H @ 0x300007
  3302                           ;	unspecified, using default values
  3303                           ;	Configuration Register Write Protection bit
  3304                           ;	WRTC = 0x1, unprogrammed default
  3305                           ;	Boot Block Write Protection bit
  3306                           ;	WRTB = 0x1, unprogrammed default
  3307                           ;	Data EEPROM Write Protection bit
  3308                           ;	WRTD = 0x1, unprogrammed default
  3309                           ;	Scanner Enable bit
  3310                           ;	SCANE = 0x1, unprogrammed default
  3311                           ;	Low Voltage Programming Enable bit
  3312                           ;	LVP = 0x1, unprogrammed default
  3313   300007                     	org	3145735
  3314   300007  FF                 	db	255
  3315                           
  3316                           ;Config register CONFIG5L @ 0x300008
  3317                           ;	unspecified, using default values
  3318                           ;	UserNVM Program Memory Code Protection bit
  3319                           ;	CP = 0x1, unprogrammed default
  3320                           ;	DataNVM Memory Code Protection bit
  3321                           ;	CPD = 0x1, unprogrammed default
  3322   300008                     	org	3145736
  3323   300008  FF                 	db	255
  3324                           
  3325                           ;Config register CONFIG5H @ 0x300009
  3326                           ;	unspecified, using default values
  3327   300009                     	org	3145737
  3328   300009  FF                 	db	255
  3329                           
  3330                           ;Config register CONFIG6L @ 0x30000A
  3331                           ;	unspecified, using default values
  3332                           ;	Table Read Protection Block 0
  3333                           ;	EBTR0 = 0x1, unprogrammed default
  3334                           ;	Table Read Protection Block 1
  3335                           ;	EBTR1 = 0x1, unprogrammed default
  3336                           ;	Table Read Protection Block 2
  3337                           ;	EBTR2 = 0x1, unprogrammed default
  3338                           ;	Table Read Protection Block 3
  3339                           ;	EBTR3 = 0x1, unprogrammed default
  3340                           ;	Table Read Protection Block 4
  3341                           ;	EBTR4 = 0x1, unprogrammed default
  3342                           ;	Table Read Protection Block 5
  3343                           ;	EBTR5 = 0x1, unprogrammed default
  3344                           ;	Table Read Protection Block 6
  3345                           ;	EBTR6 = 0x1, unprogrammed default
  3346                           ;	Table Read Protection Block 7
  3347                           ;	EBTR7 = 0x1, unprogrammed default
  3348   30000A                     	org	3145738
  3349   30000A  FF                 	db	255
  3350                           
  3351                           ;Config register CONFIG6H @ 0x30000B
  3352                           ;	unspecified, using default values
  3353                           ;	Boot Block Table Read Protection bit
  3354                           ;	EBTRB = 0x1, unprogrammed default
  3355   30000B                     	org	3145739
  3356   30000B  FF                 	db	255
  3357                           tosu	equ	0xFFF
  3358                           tosh	equ	0xFFE
  3359                           tosl	equ	0xFFD
  3360                           stkptr	equ	0xFFC
  3361                           pclatu	equ	0xFFB
  3362                           pclath	equ	0xFFA
  3363                           pcl	equ	0xFF9
  3364                           tblptru	equ	0xFF8
  3365                           tblptrh	equ	0xFF7
  3366                           tblptrl	equ	0xFF6
  3367                           tablat	equ	0xFF5
  3368                           prodh	equ	0xFF4
  3369                           prodl	equ	0xFF3
  3370                           indf0	equ	0xFEF
  3371                           postinc0	equ	0xFEE
  3372                           postdec0	equ	0xFED
  3373                           preinc0	equ	0xFEC
  3374                           plusw0	equ	0xFEB
  3375                           fsr0h	equ	0xFEA
  3376                           fsr0l	equ	0xFE9
  3377                           wreg	equ	0xFE8
  3378                           indf1	equ	0xFE7
  3379                           postinc1	equ	0xFE6
  3380                           postdec1	equ	0xFE5
  3381                           preinc1	equ	0xFE4
  3382                           plusw1	equ	0xFE3
  3383                           fsr1h	equ	0xFE2
  3384                           fsr1l	equ	0xFE1
  3385                           bsr	equ	0xFE0
  3386                           indf2	equ	0xFDF
  3387                           postinc2	equ	0xFDE
  3388                           postdec2	equ	0xFDD
  3389                           preinc2	equ	0xFDC
  3390                           plusw2	equ	0xFDB
  3391                           fsr2h	equ	0xFDA
  3392                           fsr2l	equ	0xFD9
  3393                           status	equ	0xFD8

Data Sizes:
    Strings     18
    Constant    0
    Data        0
    BSS         86
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     55      81
    BANK0           160      0      60
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    vfprintf$2	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf$1	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_1(CODE[18]), 

    vfprintf$0	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    S2413$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2413$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    reverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    reverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    reverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    reverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(COMRAM[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(COMRAM[9]), 

    uturn@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    uturn@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    uturn@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    uturn@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(COMRAM[9]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(COMRAM[9]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    norm_stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    norm_stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    norm_stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(COMRAM[9]), 

    norm_stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    norm_stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    norm_stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(COMRAM[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    motorRinit@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    motorRinit@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    motorRinit@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(COMRAM[9]), 

    motorLinit@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    motorLinit@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    motorLinit@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(COMRAM[9]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(COMRAM[9]), main@mL(COMRAM[9]), 

    mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    S814DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRlllhhll[1]), CCPR2H(BITBIGSFRhlllll[1]), 

    S814DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRlllhhll[1]), CCPR1H(BITBIGSFRhlllll[1]), 

    color_read_RGBC@temp	PTR struct RGBC_val size(2) Largest target is 8
		 -> main@RGBC(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _main->_fullSpeedAhead
    _turnRight->_setMotorPWM
    _persistence_register->_color_writetoaddr
    _norm_stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_read_RGBC->_color_read_Blue
    _color_read_RGBC->_color_read_Clear
    _color_read_RGBC->_color_read_Green
    _color_read_RGBC->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_click_init->_color_writetoaddr
    _Color_Interrupts_threshold->_color_writetoaddr
    _Color_Interrupts_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _Color_Interrupts_clear->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                32    32      0   13635
                                             25 COMRAM    30    30      0
             _Color_Interrupts_clear
              _Color_Interrupts_init
         _Color_Interrupts_threshold
                    _Interrupts_init
                   _color_click_init
                    _color_read_RGBC
                     _fullSpeedAhead
                    _initDCmotorsPWM
                         _motorLinit
                         _motorRinit
                          _norm_stop
               _persistence_register
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            4     0      4    2917
                                             20 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _persistence_register                                 0     0      0     743
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (1) _norm_stop                                            4     0      4    2981
                                             20 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _motorRinit                                           2     0      2     208
                                              1 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _motorLinit                                           2     0      2     208
                                              1 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              1 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       5     1      4    3093
                                             20 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    2589
                                             14 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                              1 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     358
                                              7 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_read_RGBC                                      2     0      2     528
                                             12 COMRAM     2     0      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2      91
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2      91
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2      91
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2      91
                                              5 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      30
                                              2 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     743
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Color_Interrupts_threshold                           4     0      4     983
                                              5 COMRAM     4     0      4
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (1) _Color_Interrupts_init                                1     1      0     758
                                              5 COMRAM     1     1      0
             _Color_Interrupts_clear
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     743
                                              3 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _Color_Interrupts_clear                               0     0      0      15
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      15
                                              2 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _HighISR                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Color_Interrupts_clear
     _I2C_2_Master_Start
       _I2C_2_Master_Idle
     _I2C_2_Master_Stop
       _I2C_2_Master_Idle
     _I2C_2_Master_Write
       _I2C_2_Master_Idle
   _Color_Interrupts_init
     _Color_Interrupts_clear
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _Color_Interrupts_threshold
     _color_writetoaddr
   _Interrupts_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
   _color_read_RGBC
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _fullSpeedAhead
     _setMotorPWM
       ___lwdiv
         ___wmul (ARG)
       ___wmul
   _initDCmotorsPWM
   _motorLinit
   _motorRinit
   _norm_stop
     _setMotorPWM
   _persistence_register
     _color_writetoaddr
   _turnRight
     _setMotorPWM

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      62        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      3C       5       37.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     37      51       1       86.2%
BITBIGSFRlllhhh     52      0       0      40        0.0%
BITBIGSFRlllhhl     37      0       0      42        0.0%
BITBIGSFRlllllh     2D      0       0      45        0.0%
BITBIGSFRllllll     2A      0       0      53        0.0%
BITBIGSFRllllll     26      0       0      60        0.0%
BITBIGSFRhlllll     1D      0       0      38        0.0%
BITBIGSFRhlh        1B      0       0      33        0.0%
BITBIGSFRhllh       13      0       0      34        0.0%
BITBIGSFRllllll     11      0       0      47        0.0%
BITBIGSFRllllll     11      0       0      48        0.0%
BITBIGSFRhlllhh      E      0       0      35        0.0%
BITBIGSFRhh          D      0       0      32        0.0%
BITBIGSFRllllll      C      0       0      46        0.0%
BITBIGSFRllllll      9      0       0      57        0.0%
BITBIGSFRlllhll      8      0       0      43        0.0%
BITBIGSFRllllll      6      0       0      59        0.0%
BITBIGSFRllllll      6      0       0      52        0.0%
BITBIGSFRllllll      5      0       0      51        0.0%
BITBIGSFRllllll      5      0       0      55        0.0%
BITBIGSFRllllll      3      0       0      54        0.0%
BITBIGSFRllllll      3      0       0      56        0.0%
BITBIGSFRllllll      3      0       0      50        0.0%
BITBIGSFRlllhhl      2      0       0      41        0.0%
BITBIGSFRhllllh      2      0       0      37        0.0%
BITBIGSFRllh         2      0       0      39        0.0%
BITBIGSFRhlllhl      1      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      49        0.0%
BITBIGSFRllllll      1      0       0      58        0.0%
BITBIGSFRllllh       1      0       0      44        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8D      61        0.0%
DATA                 0      0      8D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Tue Dec 06 11:51:18 2022

                          _color_read_Red 1478                           _color_read_RGBC 141A  
                         _color_read_Blue 1568                                        l53 162C  
                                      l62 1516                                        l56 174A  
                                      l65 15B6                                        l74 1476  
                                      l59 14C6                                        l68 1566  
                                      u10 16EE                                        u11 16EA  
                                      u20 1704                                        u21 1700  
                                      u30 15E2                                        u31 15DA  
                                      u48 15E4                       ___wmul@multiplicand 0004  
                        _color_read_Clear 1518                          _color_read_Green 14C8  
                       ??_Interrupts_init 0002                                       l110 16DE  
                                     l113 1704                                       l122 17BE  
                                     l107 16B2                                       l116 17C8  
                                     l125 17AA                                       l119 17B4  
                                     l128 15F8                                       l401 0F7E  
                                     l323 1792                                       l404 1418  
                                     l332 179E                                       l326 1768  
                                     l430 117E                                       l335 177E  
                                     l407 13AE                                       l424 1344  
                                     l329 16DC                                       l418 165E  
                                     l435 11DE                                       l446 172A  
                                     l394 125E                                       l944 12D2  
                                     l937 12CA                                       u330 127A  
                                     u410 102C                                       u331 1276  
                                     u411 1028                                       u340 1298  
                                     u420 103E                                       u341 1294  
                                     u421 1036                                       u350 12B4  
                                     u351 12B0                                       u360 0E30  
                                     u361 0E2C                                       u370 0EFA  
                                     u371 0EF6                                       u507 100C  
                                     u380 1196                                       u381 1192  
                                     u517 106E                                       u390 11AE  
                                     u438 1040                                       u391 11AA  
                                     u527 109A                                       u537 10D2  
                                     u547 115E                                       u557 160E  
                                     u567 175C                                       wreg 000FE8  
                                    l1130 17C0                                      l1132 17C4  
                                    l1140 17BA                                      l1126 16DE  
                                    l1134 17A2                                      l1150 15C6  
                                    l1142 17AC                                      l1128 16EE  
                                    l1136 17A6                                      l1152 15CE  
                                    l1144 17B0                                      l1138 17B6  
                                    l1226 176A                                      l1154 15F4  
                                    l1146 15BA                                      l1156 15F6  
                                    l1148 15BE                                      l1270 1780  
                                    l1190 1694                                      l1192 169A  
                                    l1600 1568                                      l1194 169C  
                                    l1602 15AE                                      l1196 169E  
                                    l1188 168A                                      l1620 0EDA  
                                    l1612 0E14                                      l1700 1120  
                                    l1198 16A0                                      l1630 15FE  
                                    l1606 1518                                      l1622 0EDE  
                                    l1614 0E30                                      l1710 1172  
                                    l1702 1130                                      l1640 16B4  
                                    l1632 1608                                      l1608 155E  
                                    l1560 1722                                      l1624 0EFA  
                                    l1616 0E84                                      l1712 1196  
                                    l1704 1144                                      l1720 162E  
                                    l1634 1618                                      l1570 1282  
                                    l1626 0F3E                                      l1618 0E98  
                                    l1714 11AE                                      l1706 1158  
                                    l1650 11E0                                      l1722 1646  
                                    l1642 1794                                      l1730 12FC  
                                    l1644 174C                                      l1636 1622  
                                    l1628 15FA                                      l1580 12BC  
                                    l1572 128A                                      l1564 1260  
                                    l1716 11C6                                      l1708 1166  
                                    l1660 1244                                      l1652 120A  
                                    l1724 1652                                      l1732 130C  
                                    l1646 1756                                      l1590 14BE  
                                    l1638 141A                                      l1582 12BE  
                                    l1574 1298                                      l1566 1268  
                                    l1558 1706                                      l1718 11D2  
                                    l1662 1246                                      l1654 122E  
                                    l1670 13B0                                      l1734 131C  
                                    l1726 12D4                                      l1750 0F8A  
                                    l1648 1764                                      l1584 12C4  
                                    l1576 129E                                      l1568 127A  
                                    l1664 1250                                      l1656 1238  
                                    l1680 1404                                      l1672 13BC  
                                    l1736 132C                                      l1728 12EC  
                                    l1760 0FB2                                      l1752 0F92  
                                    l1586 172E                                      l1594 14C8  
                                    l1578 12B4                                      l1666 1252  
                                    l1658 123A                                      l1674 13CC  
                                    l1690 1386                                      l1682 1346  
                                    l1738 1338                                      l1770 0FCA  
                                    l1762 0FC2                                      l1754 0F96  
                                    l1596 150E                                      l1588 1478  
                                    l1668 125C                                      l1676 13DC  
                                    l1692 139A                                      l1684 1352  
                                    l1780 101A                                      l1772 0FD6  
                                    l1764 0FC4                                      l1756 0FAA  
                                    l1748 0F80                                      l1694 10E8  
                                    l1678 13F0                                      l1686 1362  
                                    l1790 1090                                      l1782 102C  
                                    l1774 0FE2                                      l1766 0FC6  
                                    l1758 0FAE                                      l1696 1100  
                                    l1688 1372                                      l1792 10A8  
                                    l1784 1050                                      l1776 0FEE  
                                    l1768 0FC8                                      l1698 1110  
                                    l1794 10B0                                      l1786 1064  
                                    l1778 1002                                      l1788 107C  
                                    l1796 10B4                                      l1798 10C8  
                                    STR_1 0E01                              _BAUD4CONbits 000EE9  
                                    _T2PR 000FBC                                      _main 0F80  
                                    fsr2h 000FDA                                      indf2 000FDF  
                                    fsr2l 000FD9                                      btemp 0052  
                                    prodh 000FF4                                      prodl 000FF3  
                                    start 004C                    __end_of_color_read_Red 14C8  
                         __end_of_HighISR 004C                              ___param_bank 000000  
                                   ?_main 0001                           __end_of___lwdiv 12D4  
                                   i2l341 0048                                     _TMR0H 000FD4  
                                   _TMR0L 000FD3                __end_of_I2C_2_Master_Start 17CA  
              __end_of_I2C_2_Master_Write 17AC                     _Color_Interrupts_init 174C  
                                   ttemp5 0053                                     ttemp6 0056  
                                   ttemp7 005A                                     status 000FD8  
                                   wtemp8 0053                   __end_of_color_read_RGBC 1478  
                 __end_of_color_read_Blue 15B8                     _I2C_2_Master_RepStart 17AC  
                         ?_color_read_Red 0006                           __initialization 1660  
                            __end_of_main 10E8               ?_Color_Interrupts_threshold 0006  
                                  ??_main 001A                             __activetblptr 000001  
                            ?_setMotorPWM 000F                                    _CCPR1H 000FAA  
                                  _CCPR2H 000FA6                                    _CCPR3H 000F25  
                                  _CCPR4H 000F21                                    _RC0PPS 000E62  
                                  _RC4REG 000EE3                                    _RE2PPS 000E74  
                                  _RC7PPS 000E69                                    _RD5PPS 000E6F  
                                  _RE4PPS 000E76                                    _RD6PPS 000E70  
                                  i2l1510 001A                                    i2l1512 003C  
                                  i2l1514 0044                                    i2l1508 000A  
                                  _RG6PPS 000E88                                 ??_HighISR 0001  
                __end_of_color_click_init 162E                                    _RX4PPS 000E15  
                                  _TX4REG 000EE4  Color_Interrupts_threshold@lowerThreshold 0008  
            __end_of_persistence_register 17A0                              _CCPTMRS0bits 000FAD  
                                  ___wmul 1706                                 ??___lwdiv 000C  
                                  clear_0 1666                                    clear_1 1672  
                                  isa$std 000001                                    main@mL 0026  
                                  main@mR 002F                    _Color_Interrupts_clear 176A  
                            __mediumconst 0000                                    tblptrh 000FF7  
                                  tblptru 000FF8  Color_Interrupts_threshold@upperThreshold 0006  
                       ??_initDCmotorsPWM 0004                    ?_Color_Interrupts_init 0001  
                              __accesstop 0060                   __end_of__initialization 1678  
                __end_of_color_read_Clear 1568                  __end_of_color_read_Green 1518  
                  ?_I2C_2_Master_RepStart 0001                             ___rparam_used 000001  
                        ?_color_read_RGBC 000D                          ?_color_read_Blue 0006  
                         _Interrupts_init 1780                            __pcstackCOMRAM 0001  
                              __pbssBANK0 0060                         _color_writetoaddr 172C  
                            _T2CLKCONbits 000FBF                        ?_color_writetoaddr 0004  
                                 ?___wmul 0002                       ??_color_writetoaddr 0005  
                                 _SP4BRGH 000EE6                                   _SP4BRGL 000EE5  
                                 i2u26_40 001A                                   i2u26_41 0016  
                                 i2u27_40 002C                                   i2u27_41 0024  
                                 i2u28_48 002E                                   _SSP2ADD 000ED6  
                                 _SSP2BUF 000ED5                      _persistence_register 1794  
                 __end_of_Interrupts_init 1794                    color_writetoaddr@value 0004  
                        ??_color_read_Red 0008                                   _HighISR 0008  
               __end_of_color_writetoaddr 174C                        _I2C_2_Master_Start 17C0  
                      _I2C_2_Master_Write 17A0                                   __Hparam 0000  
                                 __Lparam 0000                         color_read_Red@tmp 000B  
                     ?_I2C_2_Master_Start 0001                                   ___lwdiv 1260  
                     ?_I2C_2_Master_Write 0001                              __psmallconst 0E00  
                                 __pcinit 1660                                   __ramtop 0E00  
                                 __ptext0 0F80                                   __ptext1 12D4  
                                 __ptext2 1794                                   __ptext3 162E  
                                 __ptext4 1346                                   __ptext5 13B0  
                                 __ptext6 11E0                                   __ptext7 10E8  
                                 __ptext8 0E14                                   __ptext9 1706  
                               _T2CONbits 000FBD                                 _T2HLTbits 000FBE  
                           _RxBufWriteCnt 0051                     ?_persistence_register 0001  
                    ??_I2C_2_Master_Start 0003                      ??_I2C_2_Master_Write 0003  
                    end_of_initialization 1678                         ?_color_click_init 0001  
                       __end_of_norm_stop 1660                        ??_color_click_init 0006  
                             norm_stop@mL 0015                               norm_stop@mR 0017  
                                 postdec2 000FDD                                _motorLinit 13B0  
                                 postinc0 000FEE                                   postinc2 000FDE  
                              _motorRinit 1346                   ?_Color_Interrupts_clear 0001  
                         _initDCmotorsPWM 11E0                       color_read_RGBC@temp 000D  
                      setMotorPWM@negDuty 0014                         __end_of_turnRight 1346  
                 ??_Color_Interrupts_init 0006                                 _TRISAbits 000F81  
                      setMotorPWM@posDuty 0013                                 _TRISBbits 000F82  
                               _TRISCbits 000F83                                 _TRISDbits 000F84  
                               _TRISEbits 000F85                                 _TRISFbits 000F86  
                               _TRISGbits 000F87                                 _TRISHbits 000F88  
                        fullSpeedAhead@mL 0015                          fullSpeedAhead@mR 0017  
                color_writetoaddr@address 0005                   ??_I2C_2_Master_RepStart 0003  
                        ?_Interrupts_init 0001                               _CCP1CONbits 000FAB  
                       ?_color_read_Clear 0006                              _EUSART4RXbuf 0038  
                            _EUSART4TXbuf 0060                               _CCP2CONbits 000FA7  
                       ?_color_read_Green 0006                               _CCP3CONbits 000F26  
                             _CCP4CONbits 000F22                        ??_color_read_Clear 0008  
                      ??_color_read_Green 0008            __end_of_Color_Interrupts_clear 1780  
                          _fullSpeedAhead 10E8                            __end_of___wmul 172C  
                     color_read_Clear@tmp 000B                       start_initialization 1660  
                  ??_persistence_register 0006                             _TxBufWriteCnt 004F  
                     color_read_Green@tmp 000B                   __end_of_initDCmotorsPWM 1260  
                  __end_of_fullSpeedAhead 11E0                               ?_motorLinit 0002  
                                ??___wmul 0006                               ?_motorRinit 0002  
                             __pbssCOMRAM 0038                                  ?_HighISR 0001  
                        ___lwdiv@dividend 0008                           ?_fullSpeedAhead 0015  
                               __pintcode 0008                                  ?___lwdiv 0008  
            ??_Color_Interrupts_threshold 000A                      I2C_2_Master_Read@ack 0004  
                    I2C_2_Master_Read@tmp 0005                               __smallconst 0E00  
                       _I2C_2_Master_Idle 16DE                         _I2C_2_Master_Init 168A  
                       _I2C_2_Master_Read 15B8                         _I2C_2_Master_Stop 17B6  
                            _RxBufReadCnt 0050                        ?_I2C_2_Master_Idle 0001  
                      ?_I2C_2_Master_Init 0001                        ?_I2C_2_Master_Read 0001  
                           ??_setMotorPWM 0011                        ?_I2C_2_Master_Stop 0001  
                        ___lwdiv@quotient 000C                  initDCmotorsPWM@PWMperiod 0002  
                     ??_I2C_2_Master_Idle 0002                       ??_I2C_2_Master_Init 0002  
                     ??_I2C_2_Master_Read 0003                            ___wmul@product 0006  
                                _LATAbits 000F79                       ??_I2C_2_Master_Stop 0003  
                                _LATDbits 000F7C                                  _LATEbits 000F7D  
                                _LATFbits 000F7E                                  _LATGbits 000F7F  
                                _LATHbits 000F80                                  _IPR0bits 000E1F  
                                _PIE0bits 000E29                                  _PIE4bits 000E2D  
                             turnRight@mL 0015                               turnRight@mR 0017  
                                _PIR0bits 000E33                                  _PIR4bits 000E37  
                        ?_initDCmotorsPWM 0002                                 _norm_stop 162E  
                                _SSP2CON2 000EDA                                  _SSP2STAT 000ED8  
               __end_of_I2C_2_Master_Idle 1706                 __end_of_I2C_2_Master_Init 16B4  
               __end_of_I2C_2_Master_Read 15FA                         ___wmul@multiplier 0002  
               __end_of_I2C_2_Master_Stop 17C0                              setMotorPWM@m 000F  
             I2C_2_Master_Write@data_byte 0003                         ??_color_read_RGBC 000F  
                       ??_color_read_Blue 0008                              _TxBufReadCnt 004E  
                               _turnRight 12D4             __end_of_Color_Interrupts_init 176A  
           __end_of_I2C_2_Master_RepStart 17B6                        color_read_Blue@tmp 000B  
                     __end_of_setMotorPWM 0F80                                  __Hrparam 0000  
                                __Lrparam 0000                              __Lsmallconst 0E00  
                              ?_norm_stop 0015                                _ANSELBbits 000E9A  
                              _ANSELDbits 000EA7                                _T0CON0bits 000FD5  
                              _T0CON1bits 000FD6                           ___lwdiv@divisor 000A  
                         ___lwdiv@counter 000E                                ?_turnRight 0015  
                                __ptext10 1260                                  __ptext11 141A  
                                __ptext20 1780                                  __ptext12 1478  
                                __ptext21 16B4                                  __ptext13 14C8  
                                __ptext22 174C                                  __ptext14 1518  
                                __ptext23 172C                                  __ptext15 1568  
                                __ptext24 176A                                  __ptext16 17AC  
                                __ptext25 17A0                                  __ptext17 15B8  
                                __ptext26 17B6                                  __ptext18 15FA  
                                __ptext27 17C0                                  __ptext19 168A  
                                __ptext28 16DE                              _SSP2CON1bits 000ED9  
                            _SSP2CON2bits 000EDA                        main@lowerThreshold 001C  
                                isa$xinst 000000                              ??_motorLinit 0004  
                            ??_motorRinit 0004                                _RC4STAbits 000EE7  
                                main@RGBC 001E                                  int$flags 0052  
      __end_of_Color_Interrupts_threshold 16DE                _Color_Interrupts_threshold 16B4  
                              _INTCONbits 000FF2                               _setMotorPWM 0E14  
                            motorLinit@mL 0002                                  intlevel2 0000  
                      __end_of_motorLinit 141A                        __end_of_motorRinit 13B0  
                            motorRinit@mR 0002                          ??_fullSpeedAhead 0019  
                             ??_norm_stop 0019                          _color_click_init 15FA  
                              _SSP2DATPPS 000E1D                                _SSP2CLKPPS 000E1C  
                          _interrupt_flag 004C                               ??_turnRight 0019  
                              _TX4STAbits 000EE8                  ??_Color_Interrupts_clear 0004  
